FRONTEND REPOSITORY CODE COMBINATION
Generated: 2025-08-31T19:12:57.444Z
Total Files: 33
================================================================================


============================================================
DIRECTORY: .
============================================================

// === combine-frontend.js ===
#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Configuration
const OUTPUT_FILE = 'frontend-combined.txt';
const ROOT_DIR = process.cwd();

// File extensions to include
const INCLUDE_EXTENSIONS = [
  '.js', '.ts', '.tsx', '.jsx', '.json', '.md', '.env.example', 
  '.sql', '.html', '.css', '.scss', '.yaml', '.yml', '.txt',
  '.gitignore', '.eslintrc', '.babelrc', '.prettierrc', '.tailwind.config.js'
];

// Directories to exclude
const EXCLUDE_DIRS = [
  'node_modules', '.git', '.next', 'dist', 'build', 'coverage',
  '.nyc_output', 'logs', 'tmp', 'temp', '.cache', '.vscode',
  '.idea', 'bower_components', 'out'
];

// Files to exclude
const EXCLUDE_FILES = [
  '.env', '.env.local', '.env.production', '.env.development',
  'package-lock.json', 'yarn.lock', '.DS_Store', 'Thumbs.db',
  'npm-debug.log*', 'yarn-debug.log*', 'yarn-error.log*',
  'galway_research.db', '*.db', '*.sqlite', '*.sqlite3'
];

// Check if file should be included
function shouldIncludeFile(filePath, fileName) {
  // Check if file is in exclude list
  if (EXCLUDE_FILES.includes(fileName)) return false;
  
  // Check for database files
  if (fileName.endsWith('.db') || fileName.endsWith('.sqlite') || fileName.endsWith('.sqlite3')) {
    return false;
  }
  
  // Check if any part of the path contains excluded directories
  const pathParts = filePath.split(path.sep);
  if (pathParts.some(part => EXCLUDE_DIRS.includes(part))) return false;
  
  // Check file extension
  const ext = path.extname(fileName);
  return INCLUDE_EXTENSIONS.includes(ext) || fileName.startsWith('.') && !fileName.includes('.');
}

// Get all files recursively
function getAllFiles(dir, fileList = []) {
  const files = fs.readdirSync(dir);
  
  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      if (!EXCLUDE_DIRS.includes(file)) {
        getAllFiles(filePath, fileList);
      }
    } else {
      if (shouldIncludeFile(filePath, file)) {
        fileList.push(filePath);
      }
    }
  });
  
  return fileList;
}

// Get relative path from root
function getRelativePath(filePath) {
  return path.relative(ROOT_DIR, filePath);
}

// Group files by directory
function groupFilesByDirectory(files) {
  const grouped = {};
  
  files.forEach(file => {
    const relativePath = getRelativePath(file);
    const dir = path.dirname(relativePath);
    
    if (!grouped[dir]) {
      grouped[dir] = [];
    }
    
    grouped[dir].push({
      fullPath: file,
      relativePath: relativePath,
      fileName: path.basename(file)
    });
  });
  
  return grouped;
}

// Read file content safely
function readFileContent(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return content;
  } catch (error) {
    return `// Error reading file: ${error.message}`;
  }
}

// Main function
function combineFiles() {
  console.log('üîç Scanning frontend repository...');
  
  const allFiles = getAllFiles(ROOT_DIR);
  const groupedFiles = groupFilesByDirectory(allFiles);
  
  console.log(`üìÅ Found ${allFiles.length} files to combine`);
  
  let output = '';
  output += `FRONTEND REPOSITORY CODE COMBINATION\n`;
  output += `Generated: ${new Date().toISOString()}\n`;
  output += `Total Files: ${allFiles.length}\n`;
  output += `${'='.repeat(80)}\n\n`;
  
  // Sort directories for consistent output
  const sortedDirs = Object.keys(groupedFiles).sort();
  
  sortedDirs.forEach(dir => {
    const files = groupedFiles[dir];
    
    output += `\n${'='.repeat(60)}\n`;
    output += `DIRECTORY: ${dir}\n`;
    output += `${'='.repeat(60)}\n\n`;
    
    // Sort files within directory
    files.sort((a, b) => a.fileName.localeCompare(b.fileName));
    
    files.forEach(file => {
      output += `// === ${file.relativePath} ===\n`;
      
      const content = readFileContent(file.fullPath);
      output += content;
      
      if (!content.endsWith('\n')) {
        output += '\n';
      }
      
      output += `\n// === END ${file.relativePath} ===\n\n`;
    });
  });
  
  // Write output file
  fs.writeFileSync(OUTPUT_FILE, output);
  
  console.log(`‚úÖ Frontend code combined successfully!`);
  console.log(`üìÑ Output file: ${OUTPUT_FILE}`);
  console.log(`üìä File size: ${(fs.statSync(OUTPUT_FILE).size / 1024).toFixed(2)} KB`);
  console.log('\nüöÄ Ready to copy and paste into a gist!');
}

// Run the script
if (require.main === module) {
  try {
    combineFiles();
  } catch (error) {
    console.error('‚ùå Error combining files:', error.message);
    process.exit(1);
  }
}

// === END combine-frontend.js ===

// === next-env.d.ts ===
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.

// === END next-env.d.ts ===

// === next.config.js ===
/** @type {import('next').NextConfig} */
const nextConfig = {
  // Removed experimental.appDir since it's stable in Next.js 14
  // No other experimental features needed for your setup
}

module.exports = nextConfig

// === END next.config.js ===

// === package.json ===
{
  "name": "galway-research",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "deploy": "ssh -i ~/.ssh/id_ed25519 root@167.99.190.142 'cd /var/www/html/galway-research && npm run build && pm2 restart galway'",
    "quick:restart": "ssh -i ~/.ssh/id_ed25519 root@167.99.190.142 'pm2 restart galway'"
  },
  "dependencies": {
    "@tailwindcss/postcss": "^4.1.11",
    "next": "^14.2.31",
    "react": "^18",
    "react-dom": "^18",
    "zustand": "^4.5.7"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.0.1",
    "eslint": "^8",
    "eslint-config-next": "14.0.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.3.0",
    "typescript": "^5"
  }
}

// === END package.json ===

// === postcss.config.js ===
module.exports = {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  }

// === END postcss.config.js ===

// === README.md ===
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

// === END README.md ===

// === tailwind.config.js ===
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      fontFamily: {
        mono: ['IBM Plex Mono', 'monospace'],
      },
      colors: {
        role: {
          guest: 'rgb(57, 57, 57)',
          operative: '#DB52F4',
          contributor: '#D5B504',
          'beta-tester': '#0D7F10',
          moderator: '#D40684',
        },
        neutral: {
          150: '#f4f4f5',
        }
      },
      aspectRatio: {
        'cr80': '54 / 86',
      },
      dropShadow: {
        'card-guest': ['0 0 17px rgba(0, 0, 0, 0.14)'],
        'card-operative': ['0 0 17px rgba(219, 82, 244, 0.14)'],
        'card-contributor': ['0 0 17px rgba(213, 181, 4, 0.14)'],
        'card-beta-tester': ['0 0 17px rgba(13, 127, 16, 0.14)'],
        'card-moderator': ['0 0 17px rgba(212, 6, 132, 0.14)'],
        // Username text drop shadows
        'username-guest': ['0 0 7px rgba(57, 57, 57, 0.14)'],
        'username-operative': ['0 0 7px rgba(219, 82, 244, 0.14)'],
        'username-contributor': ['0 0 7px rgba(213, 181, 4, 0.14)'],
        'username-beta-tester': ['0 0 7px rgba(13, 127, 16, 0.14)'],
        'username-moderator': ['0 0 7px rgba(212, 6, 132, 0.14)'],
      },
      animation: {
        'pulse': 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
        'pulse-fast': 'pulse-fast 0.5s cubic-bezier(0.4, 0, 0.6, 1) infinite',
        'pulse-slow': 'pulse-slow 3s ease-in-out infinite',
        'pulse-glow': 'pulse-glow 0.8s ease-in-out infinite',  // ‚Üê Add this
      },
      keyframes: {
        pulse: {
          '0%, 100%': { opacity: '1' },
          '50%': { opacity: '0.5' },
        },
        'pulse-fast': {
          '0%, 100%': { opacity: '1' },
          '50%': { opacity: '0.2' },
        },
        'pulse-slow': {
          '0%, 100%': { opacity: '1' },
          '50%': { opacity: '0.7' },
        },
        'pulse-glow': {  // ‚Üê Add this
          '0%, 100%': { 
            boxShadow: '0 0 20px rgba(219, 82, 244, 0.4)' 
          },
          '50%': { 
            boxShadow: '0 0 35px rgba(219, 82, 244, 0.8)' 
          },
        },
      },
      backdropBlur: {
        xs: '2px',
      },
    },
  },
  plugins: [],
}

// === END tailwind.config.js ===

// === tsconfig.json ===
// tsconfig.json
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "next.config.js"],
  "exclude": ["node_modules"]
}

// === END tsconfig.json ===


============================================================
DIRECTORY: app
============================================================

// === app/globals.css ===
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    font-family: var(--font-ibm-plex-mono), monospace;
  }
  
  body {
    @apply text-neutral-900;
  }
}

@layer utilities {
  .aspect-cr80 {
    aspect-ratio: 54 / 86;
  }
}

// === END app/globals.css ===

// === app/layout.tsx ===
import type { Metadata } from 'next';
import { IBM_Plex_Mono } from 'next/font/google';
import './globals.css';
import Header from '@/components/layout/Header';
import Footer from '@/components/layout/Footer';

const ibmPlexMono = IBM_Plex_Mono({
  subsets: ['latin'],
  weight: ['400', '500', '600'],
  variable: '--font-ibm-plex-mono',
});

export const metadata: Metadata = {
  title: 'Galway Research',
  description: 'Field-tested research. Evidence-based iteration. Thankless innovation.',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <head>
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Sharp:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
      </head>
      <body className={`${ibmPlexMono.variable} font-mono min-h-screen flex flex-col bg-neutral-100`}>
        <Header />
        <main className="flex-1">
          {children}
        </main>
        <Footer />
      </body>
    </html>
  );
}

// === END app/layout.tsx ===

// === app/not-found.tsx ===
import Link from 'next/link';

export default function Custom404() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150 relative overflow-hidden">
      {/* Background pattern */}
      <div className="absolute inset-0 opacity-[0.02]">
        <div className="absolute inset-0" style={{
          backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23000000' fill-opacity='0.4'%3E%3Ccircle cx='7' cy='7' r='1'/%3E%3Ccircle cx='53' cy='53' r='1'/%3E%3Ccircle cx='30' cy='30' r='1'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`,
        }} />
      </div>

      <div className="relative z-10 flex items-center justify-center p-4 min-h-screen">
        <div className="text-center max-w-md">
          {/* Animated GIF */}
          <div className="mb-8">
            <img 
              src="/msn-emoticons/extra/break-computer.gif" 
              alt="Computer breaking"
              className="w-42 h-16 mx-auto"
            />
          </div>

          {/* Error Message */}
          <div className="mb-8">
            <h1 className="text-1xl font-mono font-semibold text-neutral-900 mb-4">
              404: PAGE NOT FOUND
            </h1>
            <div className="max-w-xs mx-auto">
              <p className="text-xs font-mono text-neutral-600 leading-relaxed">
                The requested resource could not be located in The Galway Research Institute database.
              </p>
            </div>
          </div>

          {/* Navigation Options */}
          <div className="space-y-3">
            <Link
              href="/"
              className="inline-block w-full px-6 py-3 bg-transparent text-neutral-900 font-mono text-sm uppercase tracking-wide hover:bg-neutral-900 hover:text-white transition-all duration-200 border-2 border-neutral-300 hover:border-neutral-900 hover:shadow-lg transform hover:-translate-y-0.5"
            >
              RETURN HOME
            </Link>
            
            <Link
              href="/correspondence"
              className="inline-block w-full px-6 py-3 bg-neutral-100 text-neutral-700 font-mono text-sm uppercase tracking-wide hover:bg-neutral-200 transition-all duration-200 border-2 border-neutral-200 hover:border-neutral-300"
            >
              REPORT ISSUE
            </Link>
          </div>

          {/* Technical Details */}
          <div className="mt-8 pt-6 border-t border-neutral-200/50">
            <p className="text-xs text-neutral-400 font-mono mt-3">
             ¬© 2025 Galway Research Institute
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

// === END app/not-found.tsx ===

// === app/page.tsx ===
'use client';
import { generateOliveBranch } from '@/lib/oliveGenerator';
import { useAuth } from '@/lib/auth';
import GalwayIdCard from '@/components/GalwayIdCard';
import Link from 'next/link';
import { useEffect, useState } from 'react';

interface StoredUserData {
  username: string;
  email: string;
  role: string;
  onset: string;
  idNo: string;
  bio: string;
  isEmailVerified: boolean;
  oliveBranch?: {
    svg: string;
    colors: {
      olive: string;
      branch: string;
      leaf: string;
    };
    oliveCount: number;
    id: number;
  };
  registrationComplete?: boolean;
}

export default function HomePage() {
  const { isLoggedIn, user, toggleAuth, cartItemCount, addToCart, clearCart } = useAuth();
  const [storedUserData, setStoredUserData] = useState<StoredUserData | null>(null);

  // Load stored user data on component mount
  useEffect(() => {
    const storedUser = localStorage.getItem('galwayUser');
    if (storedUser) {
      try {
        const userData = JSON.parse(storedUser);
        setStoredUserData(userData);
      } catch (error) {
        console.error('Failed to parse stored user data:', error);
      }
    }
  }, [isLoggedIn]);

  // Role colors
  const roleColors = {
    guest: 'rgb(57, 57, 57)',
    operative: '#DB52F4',
    contributor: '#D5B504',
    'beta-tester': '#0D7F10',
    moderator: '#D40684'
  };

  // Get the olive branch data for the card
  const getOliveBranchForCard = () => {
    if (isLoggedIn && storedUserData?.oliveBranch) {
      return storedUserData.oliveBranch;
    }
    return undefined;
  };

  // Handle logout functionality
  const handleLogout = () => {
    // Clear stored user data
    localStorage.removeItem('galwayUser');
    setStoredUserData(null);
    // Toggle auth state (or call actual logout function)
    toggleAuth();
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150 relative overflow-hidden">
      {/* Subtle background pattern */}
      <div className="absolute inset-0 opacity-[0.02]">
        <div className="absolute inset-0" style={{
          backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23000000' fill-opacity='0.4'%3E%3Ccircle cx='7' cy='7' r='1'/%3E%3Ccircle cx='53' cy='53' r='1'/%3E%3Ccircle cx='30' cy='30' r='1'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`,
        }} />
      </div>

      <div className="relative z-10 flex items-center justify-center p-4 sm:p-6 pt-8 sm:pt-10 min-h-screen">
        <div className="max-w-7xl mx-auto w-full">
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-center lg:space-x-8 space-y-6 lg:space-y-0">
            {/* Card Section */}
            <div className="w-full lg:w-96 flex justify-center lg:flex-shrink-0">
              <GalwayIdCard
                role={isLoggedIn && user ? user.role : 'guest'}
                username={user?.username}
                onset={user?.onset}
                idNo={user?.idNo}
                bio={user?.bio}
                oliveBranch={getOliveBranchForCard()}
                followMouse={true}
              />
            </div>

            {/* Content Section */}
            <div className="lg:flex-1 lg:max-w-xl w-full">
              {!isLoggedIn ? (
                // Guest state
                <div className="text-center lg:text-center">
                  <div className="mb-6">
                    <h1 className="text-2xl sm:text-3xl font-semibold text-neutral-900 mb-3 leading-tight">
                      Welcome to Galaway Research!
                    </h1>
                  </div>
                  
                  <div className="space-y-4 mb-8">
                    <div className="rounded-lg p-4">
                      <p className="text-neutral-700 leading-relaxed">
                        Claim your Operative ID to record your findings, engage in official discourse, and access restricted items.
                      </p>
                    </div>
                    
                    <div className="rounded-lg p-4">
                      <p className="text-neutral-600 leading-relaxed">
                        Unregistered visitors remain outside the network and cannot participate in studies.
                      </p>
                    </div>
                  </div>
                  
                  <div className="flex flex-col sm:flex-row gap-3 justify-center lg:justify-center">
                    <Link
                      href="/register"
                      className="group px-6 py-3 bg-transparent text-neutral-900 font-mono text-sm uppercase tracking-wide hover:bg-neutral-900 hover:text-white transition-all duration-200 border-2 border-neutral-300 hover:border-neutral-900 hover:shadow-lg transform hover:-translate-y-0.5 shadow-[0_0_20px_rgba(219,82,244,0.4)] hover:shadow-[0_0_30px_rgba(219,82,244,0.7)] animate-pulse-glow"
                    >
                      <span className="flex items-center justify-center space-x-2">
                        <span>REGISTER</span>
                        <svg className="w-4 h-4 group-hover:translate-x-1 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4" />
                        </svg>
                      </span>
                    </Link>
                    <Link
                      href="/login"
                      className="group px-6 py-3 bg-transparent text-neutral-900 font-mono text-sm uppercase tracking-wide hover:bg-neutral-900 hover:text-white transition-all duration-200 border-2 border-neutral-300 hover:border-neutral-900 hover:shadow-lg transform hover:-translate-y-0.5"
                    >
                      <span className="flex items-center justify-center space-x-2">
                        <span>LOG-IN</span>
                        <svg className="w-4 h-4 group-hover:translate-x-1 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
                        </svg>
                      </span>
                    </Link>
                  </div>
                </div>
              ) : (
                // Logged in state
                <div className="text-center lg:text-center">
                  <div className="mb-0">
                    {/*<h1 className="text-sm sm:text-sm font-semibold text-neutral-900 mb-2 leading-tight">
                      Hello, <span 
                        style={{ color: user?.role ? roleColors[user.role] : roleColors.guest }}
                      >
                        {user?.username}
                      </span>!
                    </h1>*/}
                  </div>
                  
                  <div className="rounded-lg p-0 mb-0">
                     {/*<p className="text-xs text-neutral-700 leading-relaxed max-w-60 text-center">
                      Your credentials have been verified and your operative profile is active.
                    </p> 
                    {/*{storedUserData?.oliveBranch && (
                      <p className="text-neutral-600 text-sm mt-2 font-mono">
                       Botanical signature confirmed: #{storedUserData.oliveBranch.id.toString().slice(-6)}
                      </p> 
                    )}*/}
                  </div> 
                  
                  <div className="grid grid-cols-1 gap-2">
                    <Link
                      href="/inventory"
                      className="group px-4 py-3 bg-transparent text-neutral-900 font-mono text-sm uppercase tracking-wide hover:bg-neutral-900 hover:text-white transition-all duration-200 border-2 border-neutral-300 hover:border-neutral-900 hover:shadow-lg transform hover:-translate-y-0.5 text-center"
                    >
                      <span className="flex items-center justify-center space-x-2">
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                        </svg>
                        <span>INVENTORY</span>
                      </span>
                    </Link>
                    <Link
                      href="/cart"
                      className="group px-4 py-3 bg-transparent text-neutral-900 font-mono text-sm uppercase tracking-wide hover:bg-neutral-900 hover:text-white transition-all duration-200 border-2 border-neutral-300 hover:border-neutral-900 hover:shadow-lg transform hover:-translate-y-0.5 text-center">
                      <span className="flex items-center justify-center space-x-2">
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-1.5 6M7 13l1.5 6m0 0h9" />
                        </svg>
                        <span>CATALOG</span>
                      </span>
                    </Link>
                    <Link
                      href="/settings"
                      className="group px-4 py-3 bg-transparent text-neutral-900 font-mono text-sm uppercase tracking-wide hover:bg-neutral-900 hover:text-white transition-all duration-200 border-2 border-neutral-300 hover:border-neutral-900 hover:shadow-lg transform hover:-translate-y-0.5 text-center"
                    >
                      <span className="flex items-center justify-center space-x-2">
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                        <span>SETTINGS</span>
                      </span>
                    </Link>
                    <button
                      onClick={handleLogout}
                      className="group px-4 py-3 bg-transparent text-neutral-900 font-mono text-sm uppercase tracking-wide hover:bg-neutral-900 hover:text-white transition-all duration-200 border-2 border-neutral-300 hover:border-neutral-900 hover:shadow-lg transform hover:-translate-y-0.5 text-center"
                    >
                      <span className="flex items-center justify-center space-x-2">
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                        </svg>
                        <span>LOG-OUT</span>
                      </span>
                    </button>
                  </div>
                </div>
              )}
              
              {/* Demo toggle button - remove when real auth is implemented */}
              <div className="mt-8 pt-6 border-t border-neutral-200/50">
                <p className="text-xs text-neutral-400 mb-3 text-center lg:text-left font-mono">Demo Controls (Remove in production):</p>
                <div className="flex flex-col sm:flex-row gap-2">
                  <button
                    onClick={toggleAuth}
                    className="px-4 py-2 bg-yellow-50 text-yellow-700 text-xs font-mono border border-yellow-200 rounded hover:bg-yellow-100 transition-colors duration-200"
                  >
                    Toggle Auth State
                  </button>
                  <button
                    onClick={addToCart}
                    className="px-4 py-2 bg-blue-50 text-blue-700 text-xs font-mono border border-blue-200 rounded hover:bg-blue-100 transition-colors duration-200"
                  >
                    Add to Cart ({cartItemCount})
                  </button>
                  <button
                    onClick={clearCart}
                    className="px-4 py-2 bg-red-50 text-red-700 text-xs font-mono border border-red-200 rounded hover:bg-red-100 transition-colors duration-200"
                  >
                    Clear Cart
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

// === END app/page.tsx ===


============================================================
DIRECTORY: app/correspondence
============================================================

// === app/correspondence/page.tsx ===
'use client';

import { useState, useRef } from 'react';
import { useAuth } from '@/lib/auth';
import Link from 'next/link';

interface FormData {
  name: string;
  email: string;
  operativeId: string;
  mood: 'happy' | 'unhappy' | '';
  reason: string;
  subject: string;
  message: string;
  files: File[];
}

interface ValidationResult {
  errors: string[];
  isValid: boolean;
}

const HAPPY_REASONS = [
  'Positive Feedback',
  'Staff Appreciation',
  'Research Breakthrough',
  'Feature Request',
  'Improvement Suggestion',
  'Business Proposal',
  'Collaboration Request',
  'Other'
];

const UNHAPPY_REASONS = [
  'Technical Issues',
  'Account & Access',
  'Payment & Billing',
  'Service Report',
  'Policy Questions',
  'Other (Problem)'
];

export default function CorrespondencePage() {
  const { isLoggedIn, user } = useAuth();
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  const [formData, setFormData] = useState<FormData>({
    name: user?.username || '',
    email: '',
    operativeId: user?.idNo || '',
    mood: '',
    reason: '',
    subject: '',
    message: '',
    files: []
  });

  const [validation, setValidation] = useState<{
    name: ValidationResult;
    email: ValidationResult;
    subject: ValidationResult;
    message: ValidationResult;
  }>({
    name: { errors: [], isValid: false },
    email: { errors: [], isValid: false },
    subject: { errors: [], isValid: false },
    message: { errors: [], isValid: false }
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState<'idle' | 'success' | 'error'>('idle');
  const [ticketId, setTicketId] = useState<string>('');

  // Validation functions
  const validateName = (name: string): ValidationResult => {
    const errors: string[] = [];
    if (name.trim().length === 0) {
      return { errors: [], isValid: false };
    }
    if (name.trim().length < 2) {
      errors.push('name must be at least 2 characters');
    }
    return { errors, isValid: errors.length === 0 };
  };

  const validateEmail = (email: string): ValidationResult => {
    const errors: string[] = [];
    if (email.trim().length === 0) {
      return { errors: [], isValid: false };
    }
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      errors.push('please enter a valid email address');
    }
    return { errors, isValid: errors.length === 0 };
  };

  const validateSubject = (subject: string): ValidationResult => {
    const errors: string[] = [];
    if (subject.trim().length === 0) {
      return { errors: [], isValid: false };
    }
    if (subject.trim().length < 3) {
      errors.push('subject must be at least 3 characters');
    }
    return { errors, isValid: errors.length === 0 };
  };

  const validateMessage = (message: string): ValidationResult => {
    const errors: string[] = [];
    if (message.trim().length === 0) {
      return { errors: [], isValid: false };
    }
    if (message.trim().length < 10) {
      errors.push('message must be at least 10 characters');
    }
    if (message.trim().length > 2000) {
      errors.push('message cannot exceed 2000 characters');
    }
    return { errors, isValid: errors.length === 0 };
  };

  // Handle input changes
  const handleInputChange = (field: keyof FormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    
    // Reset reason when mood changes
    if (field === 'mood') {
      setFormData(prev => ({ ...prev, reason: '' }));
    }
    
    // Validate on change
    let validationResult: ValidationResult;
    switch (field) {
      case 'name':
        validationResult = validateName(value);
        setValidation(prev => ({ ...prev, name: validationResult }));
        break;
      case 'email':
        validationResult = validateEmail(value);
        setValidation(prev => ({ ...prev, email: validationResult }));
        break;
      case 'subject':
        validationResult = validateSubject(value);
        setValidation(prev => ({ ...prev, subject: validationResult }));
        break;
      case 'message':
        validationResult = validateMessage(value);
        setValidation(prev => ({ ...prev, message: validationResult }));
        break;
    }
    
    if (submitStatus !== 'idle') {
      setSubmitStatus('idle');
    }
  };

  // Handle file upload
  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    const validFiles: File[] = [];
    
    for (const file of files) {
      // Check file type
      if (!['image/jpeg', 'image/jpg', 'image/png'].includes(file.type)) {
        continue;
      }
      
      // Check file size (10MB)
      if (file.size > 10 * 1024 * 1024) {
        continue;
      }
      
      validFiles.push(file);
    }
    
    // Limit to 3 files total
    const currentFiles = formData.files;
    const totalFiles = [...currentFiles, ...validFiles].slice(0, 3);
    
    setFormData(prev => ({ ...prev, files: totalFiles }));
  };

  // Remove file
  const removeFile = (index: number) => {
    setFormData(prev => ({
      ...prev,
      files: prev.files.filter((_, i) => i !== index)
    }));
  };

  // Generate ticket ID
  const generateTicketId = (): string => {
    const year = new Date().getFullYear();
    const randomNum = Math.floor(Math.random() * 900000) + 100000;
    return `GRI-${year}-${randomNum}`;
  };

  // Check if form is valid
  const isFormValid = Object.values(validation).every(v => v.isValid) && 
                     formData.name.trim().length > 0 &&
                     formData.email.trim().length > 0 &&
                     formData.subject.trim().length > 0 &&
                     formData.message.trim().length > 0 &&
                     formData.mood !== '' &&
                     formData.reason !== '';

  // Get character count styling
  const getCharCountStyle = () => {
    const count = formData.message.length;
    if (count > 2000) return 'text-red-600';
    if (count > 1800) return 'text-yellow-600';
    return 'text-neutral-500';
  };

  // Format email content
  const formatEmailContent = (data: FormData, ticket: string): string => {
    const timestamp = new Date().toISOString();
    const moodEmoji = data.mood === 'happy' ? 'üôÇ' : 'üò†';

    return `GALWAY RESEARCH INSTITUTE - CORRESPONDENCE

${moodEmoji} MOOD: ${data.mood.toUpperCase()}
üìã REASON: ${data.reason}
üé´ TICKET ID: ${ticket}
üïê TIMESTAMP: ${timestamp}

---

FROM: ${data.name}
EMAIL: ${data.email}
OPERATIVE ID: ${data.operativeId || 'N/A'}
SUBJECT: ${data.subject}

---

MESSAGE:
${data.message}

${data.files.length > 0 ? `\n---\n\nATTACHMENTS: ${data.files.length} file(s) attached` : ''}

---

This message was submitted via the Galway Research Institute Correspondence Portal.
Please respond to the sender at: ${data.email}

Ticket Reference: ${ticket}
End of transmission.`;
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!isFormValid || isSubmitting) return;
    
    setIsSubmitting(true);
    
    try {
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const ticket = generateTicketId();
      setTicketId(ticket);
      
      const emailContent = formatEmailContent(formData, ticket);
      
      // Store ticket in localStorage for thread tracking
      const existingTickets = JSON.parse(localStorage.getItem('galwayTickets') || '[]');
      existingTickets.push({
        id: ticket,
        subject: formData.subject,
        timestamp: new Date().toISOString(),
        status: 'sent'
      });
      localStorage.setItem('galwayTickets', JSON.stringify(existingTickets));
      
      const mailtoLink = `mailto:support@galwayresearch.org?subject=${encodeURIComponent(`[${ticket}] ${formData.subject}`)}&body=${encodeURIComponent(emailContent)}`;
      
      window.location.href = mailtoLink;
      setSubmitStatus('success');
      
      // Reset form after successful submission
      setTimeout(() => {
        setFormData({
          name: user?.username || '',
          email: '',
          operativeId: user?.idNo || '',
          mood: '',
          reason: '',
          subject: '',
          message: '',
          files: []
        });
        setSubmitStatus('idle');
        setTicketId('');
        if (fileInputRef.current) {
          fileInputRef.current.value = '';
        }
      }, 5000);
      
    } catch (error) {
      console.error('Submission failed:', error);
      setSubmitStatus('error');
    } finally {
      setIsSubmitting(false);
    }
  };

  const currentReasons = formData.mood === 'happy' ? HAPPY_REASONS : 
                        formData.mood === 'unhappy' ? UNHAPPY_REASONS : [];

  return (
    <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150 relative overflow-hidden">
      {/* Background pattern */}
      <div className="absolute inset-0 opacity-[0.02]">
        <div className="absolute inset-0" style={{
          backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23000000' fill-opacity='0.4'%3E%3Ccircle cx='7' cy='7' r='1'/%3E%3Ccircle cx='53' cy='53' r='1'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`,
        }} />
      </div>

      <div className="relative z-10 flex items-center justify-center p-4 sm:p-6 pt-8 sm:pt-10 min-h-screen">
        <div className="max-w-md mx-auto w-full">
          <div className="text-center mb-8">
            <p className="text-neutral-600 text-sm leading-relaxed font-mono">
              Submit correspondence to the Galway Research Institute. 
              All messages are tracked and directed to our response team.
            </p>
          </div>

          <form onSubmit={handleSubmit} className="bg-white rounded-lg p-6 sm:p-8 shadow-lg border border-neutral-200">
            
            {/* Name Field */}
            <div className="mb-6">
              <label htmlFor="name" className="block text-sm font-medium text-neutral-700 mb-2 font-mono uppercase">
                NAME
              </label>
              <input
                type="text"
                id="name"
                value={formData.name}
                onChange={(e) => handleInputChange('name', e.target.value)}
                className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
                placeholder="your full name"
                required
                disabled={isLoggedIn}
              />
              {validation.name.errors.length > 0 && (
                <p className="text-xs text-red-600 mt-1 font-mono">
                  {validation.name.errors[0]}
                </p>
              )}
              {isLoggedIn && (
                <p className="text-xs text-neutral-500 mt-1 font-mono">
                  auto-filled from your profile
                </p>
              )}
            </div>

            {/* Email Field */}
            <div className="mb-6">
              <label htmlFor="email" className="block text-sm font-medium text-neutral-700 mb-2 font-mono uppercase">
                EMAIL ADDRESS
              </label>
              <input
                type="email"
                id="email"
                value={formData.email}
                onChange={(e) => handleInputChange('email', e.target.value)}
                className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
                placeholder="your.email@domain.com"
                required
              />
              {validation.email.errors.length > 0 && (
                <p className="text-xs text-red-600 mt-1 font-mono">
                  {validation.email.errors[0]}
                </p>
              )}
            </div>

            {/* Operative ID */}
            <div className="mb-6">
              <label htmlFor="operativeId" className="block text-sm font-medium text-neutral-700 mb-2 font-mono uppercase">
                OPERATIVE ID (OPTIONAL)
              </label>
              <input
                type="text"
                id="operativeId"
                value={formData.operativeId}
                onChange={(e) => handleInputChange('operativeId', e.target.value)}
                className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
                placeholder="your operative id"
                disabled={isLoggedIn}
              />
              <p className="text-xs text-neutral-500 mt-1 font-mono">
                {isLoggedIn ? 'auto-filled from your profile' : 'leave blank if not registered'}
              </p>
            </div>

            {/* Mood Selection */}
            <div className="mb-6">
              <label className="block text-sm font-medium text-neutral-700 mb-3 font-mono uppercase">
                HOW ARE YOU FEELING?
              </label>
              <div className="flex space-x-4">
                <button
                  type="button"
                  onClick={() => handleInputChange('mood', 'happy')}
                  className={`p-4 rounded-lg ${
                    formData.mood === 'happy'
                      ? 'shadow-md scale-105'
                      : 'hover:bg-neutral-50'
                  }`}
                >
                  <img 
                    src="/msn-emoticons/original/hot-smile.png" 
                    alt="happy" 
                    className="w-12 h-12" 
                  />
                </button>
                <button
                  type="button"
                  onClick={() => handleInputChange('mood', 'unhappy')}
                  className={`p-4 rounded-lg ${
                    formData.mood === 'unhappy'
                      ? 'shadow-md scale-105'
                      : 'hover:bg-neutral-50'
                  }`}
                >
                  <img 
                    src="/msn-emoticons/original/angry-smile.png" 
                    alt="unhappy" 
                    className="w-12 h-12" 
                  />
                </button>
              </div>
            </div>

            {/* Reason Selection */}
            <div className="mb-6">
              <label htmlFor="reason" className="block text-sm font-medium text-neutral-700 mb-2 font-mono uppercase">
                REASON
              </label>
              <select
                id="reason"
                value={formData.reason}
                onChange={(e) => handleInputChange('reason', e.target.value)}
                className={`w-full px-4 py-3 border rounded-md transition-all duration-200 font-mono text-sm ${
                  formData.mood 
                    ? 'border-neutral-300 focus:ring-2 focus:ring-neutral-900 focus:border-transparent bg-white text-neutral-900' 
                    : 'border-neutral-200 bg-neutral-100 text-neutral-400 cursor-not-allowed'
                }`}
                required
                disabled={!formData.mood}
              >
                <option value="">
                  {formData.mood ? 'select a reason...' : 'pending...'}
                </option>
                {currentReasons.map((reason) => (
                  <option key={reason} value={reason}>
                    {reason}
                  </option>
                ))}
              </select>
              {!formData.mood && (
                <p className="text-xs text-neutral-500 mt-1 font-mono">
                  Select mood to unlock reason.
                </p>
              )}
            </div>

            {/* Subject Line */}
            <div className="mb-6">
              <label htmlFor="subject" className="block text-sm font-medium text-neutral-700 mb-2 font-mono uppercase">
                SUBJECT
              </label>
              <input
                type="text"
                id="subject"
                value={formData.subject}
                onChange={(e) => handleInputChange('subject', e.target.value)}
                className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
                placeholder="brief description of your message"
                required
              />
              {validation.subject.errors.length > 0 && (
                <p className="text-xs text-red-600 mt-1 font-mono">
                  {validation.subject.errors[0]}
                </p>
              )}
            </div>

            {/* Message */}
            <div className="mb-6">
              <label htmlFor="message" className="block text-sm font-medium text-neutral-700 mb-2 font-mono uppercase">
                MESSAGE
              </label>
              <textarea
                id="message"
                rows={6}
                value={formData.message}
                onChange={(e) => handleInputChange('message', e.target.value)}
                className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm resize-vertical"
                placeholder="provide detailed information about your inquiry..."
                required
              />
              <div className="flex justify-between items-center mt-2">
                {validation.message.errors.length > 0 && (
                  <p className="text-xs text-red-600 font-mono">
                    {validation.message.errors[0]}
                  </p>
                )}
                <p className={`text-xs font-mono ml-auto ${getCharCountStyle()}`}>
                  {formData.message.length} / 2,000 characters
                </p>
              </div>
            </div>

            {/* File Upload */}
            <div className="mb-6">
              <label htmlFor="files" className="block text-sm font-medium text-neutral-700 mb-2 font-mono uppercase">
                ATTACHMENTS (OPTIONAL)
              </label>
              <div className="space-y-3">
                <input
                  ref={fileInputRef}
                  type="file"
                  id="files"
                  multiple
                  accept=".jpg,.jpeg,.png"
                  onChange={handleFileUpload}
                  className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-mono file:bg-neutral-100 file:text-neutral-700 hover:file:bg-neutral-200"
                />
                <p className="text-xs text-neutral-500 font-mono">
                  jpg, png only ‚Ä¢ max 10mb per file ‚Ä¢ max 3 files
                </p>
                
                {/* File Previews */}
                {formData.files.length > 0 && (
                  <div className="space-y-2">
                    {formData.files.map((file, index) => (
                      <div key={index} className="flex items-center justify-between p-2 bg-neutral-50 rounded border">
                        <span className="text-xs font-mono text-neutral-700 truncate">
                          {file.name} ({(file.size / 1024 / 1024).toFixed(1)}MB)
                        </span>
                        <button
                          type="button"
                          onClick={() => removeFile(index)}
                          className="text-red-600 hover:text-red-800 text-xs font-mono ml-2"
                        >
                          remove
                        </button>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>

            {/* Submit Status */}
            {submitStatus === 'success' && (
              <div className="mb-6 p-4 bg-green-50 border border-green-200 rounded-md">
                <div className="space-y-2">
                  <div className="flex items-center space-x-2">
                    <div className="w-2 h-2 rounded-full bg-green-500"></div>
                    <p className="text-sm text-green-700 font-mono">
                      Message prepared for transmission.
                    </p>
                  </div>
                  {ticketId && (
                    <p className="text-xs text-green-600 font-mono">
                      Ticket ID: {ticketId}
                    </p>
                  )}
                </div>
              </div>
            )}

            {submitStatus === 'error' && (
              <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-md">
                <div className="flex items-center space-x-2">
                  <div className="w-2 h-2 rounded-full bg-red-500"></div>
                  <p className="text-sm text-red-700 font-mono">
                    Transmission failed. Please try again.
                  </p>
                </div>
              </div>
            )}

            {/* Submit Button */}
            <button
              type="submit"
              disabled={!isFormValid || isSubmitting}
              className={`w-full py-3 px-6 font-mono text-sm uppercase tracking-wide transition-all duration-200 border-2 ${
                isFormValid && !isSubmitting
                  ? 'bg-transparent text-neutral-900 border-neutral-300 hover:bg-neutral-900 hover:text-white hover:border-neutral-900 hover:shadow-lg transform hover:-translate-y-0.5'
                  : 'bg-neutral-200 text-neutral-500 border-neutral-200 cursor-not-allowed'
              }`}
            >
              {isSubmitting ? 'transmitting...' : 'send message'}
            </button>
          </form>

          {/* Footer Links */}
          <div className="text-center mt-6 space-y-2">
            <p className="text-sm text-neutral-500 font-mono">
              <Link 
                href="/" 
                className="hover:text-neutral-700 transition-all duration-200"
              >
                ‚Üê return home
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

// === END app/correspondence/page.tsx ===


============================================================
DIRECTORY: app/database
============================================================

// === app/database/page.tsx ===
'use client';

import { useState, useEffect, useMemo } from 'react';
import GalwayIdCard from '@/components/GalwayIdCard'; // Import the real component
import { Role } from '@/lib/types';
import { OLIVE_BRANCH_BG_COLOR } from '@/lib/oliveGenerator';

interface InventoryItem {
  id: string;
  type: 'seed' | 'branch';
  data?: any;
  createdAt: string;
  quantity?: number;
  rarity?: {
    count: string;
    type: string;
    countPercentage: number;
    typePercentage: number;
  };
}

interface DatabaseUser {
  username: string;
  role: Role;
  onset: string;
  idNo: string;
  bio: string;
  oliveBranch: any;
  birthday?: string;
  country?: string;
  city?: string;
  inventory?: InventoryItem[];
  inventoryPublic: boolean;
  lastSeen: string;
  joinDate: string;
}

// Olive Branch Generator (simplified)
const oliveColors = {
  greenOlives: ['#6B8E23', '#808000', '#9ACD32', '#7CFC00', '#ADFF2F'],
  blackOlives: ['#2F2F2F', '#404040', '#1C1C1C', '#36454F', '#28282B'],
  brownOlives: ['#8B4513', '#A0522D', '#CD853F', '#D2691E', '#BC9A6A'],
  purpleOlives: ['#663399', '#4B0082', '#800080', '#9932CC', '#8B008B'],
  ripeMixed: ['#6B8E23', '#2F2F2F', '#663399', '#8B4513']
};

const branchColors = ['#8B7355', '#A0522D', '#CD853F', '#DEB887'];
const leafColors = ['#228B22', '#32CD32', '#00FF00', '#7CFC00'];

const oliveCountWeights = {
  1: { weight: 0.33, rarity: 'Common' },
  2: { weight: 0.28, rarity: 'Common' },
  3: { weight: 0.19, rarity: 'Uncommon' },
  4: { weight: 0.12, rarity: 'Rare' },
  5: { weight: 0.08, rarity: 'Very Rare' }
};

const oliveTypeWeights = {
  greenOlives: { weight: 0.30, rarity: 'Common', displayName: 'Green Olives' },
  blackOlives: { weight: 0.25, rarity: 'Common', displayName: 'Black Olives' },
  brownOlives: { weight: 0.20, rarity: 'Uncommon', displayName: 'Brown Olives' },
  purpleOlives: { weight: 0.15, rarity: 'Rare', displayName: 'Purple Olives' },
  ripeMixed: { weight: 0.10, rarity: 'Very Rare', displayName: 'Mixed Ripe Olives' }
};

function getRandomColor(colorArray: string[]): string {
  return colorArray[Math.floor(Math.random() * colorArray.length)];
}

function generateWeightedOliveCount(): { count: number; rarity: string; percentage: number } {
  const random = Math.random();
  let cumulative = 0;
  
  for (const [count, data] of Object.entries(oliveCountWeights)) {
    cumulative += data.weight;
    if (random <= cumulative) {
      return {
        count: parseInt(count),
        rarity: data.rarity,
        percentage: Math.round(data.weight * 100)
      };
    }
  }
  return { count: 1, rarity: 'Common', percentage: 33 };
}

function generateWeightedOliveType(): { type: string; color: string; rarity: string; displayName: string; percentage: number } {
  const random = Math.random();
  let cumulative = 0;
  
  for (const [type, data] of Object.entries(oliveTypeWeights)) {
    cumulative += data.weight;
    if (random <= cumulative) {
      const palette = oliveColors[type as keyof typeof oliveColors];
      return {
        type,
        color: getRandomColor(palette),
        rarity: data.rarity,
        displayName: data.displayName,
        percentage: Math.round(data.weight * 100)
      };
    }
  }
  return {
    type: 'greenOlives',
    color: getRandomColor(oliveColors.greenOlives),
    rarity: 'Common',
    displayName: 'Green Olives',
    percentage: 30
  };
}

function generateOlivePositions(count: number): Array<{x: number, y: number}> {
  const possiblePositions = [
    { x: 20, y: 32 }, { x: 40, y: 42 }, { x: 26, y: 49 }, 
    { x: 48, y: 35 }, { x: 22, y: 45 }
  ];
  const shuffled = possiblePositions.sort(() => 0.5 - Math.random());
  return shuffled.slice(0, count);
}

function generateOliveBranch(): any {
  const oliveCountData = generateWeightedOliveCount();
  const oliveTypeData = generateWeightedOliveType();
  const branchColor = getRandomColor(branchColors);
  const leafColor = getRandomColor(leafColors);
  const bgColor = `${OLIVE_BRANCH_BG_COLOR}`;

  const olivePositions = generateOlivePositions(oliveCountData.count);

  let oliveElements = '';
  olivePositions.forEach(pos => {
    oliveElements += `<rect x="${pos.x}" y="${pos.y}" width="4" height="4" fill="${oliveTypeData.color}"/>`;
  });

  const svg = `<svg width="100%" height="100%" viewBox="0 0 70 70" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="70" height="70" fill="${bgColor}"/>
<rect x="33" y="20" width="4" height="30" fill="${branchColor}"/>
<rect x="24" y="27" width="12" height="4" fill="${branchColor}"/>
<rect x="34" y="37" width="12" height="4" fill="${branchColor}"/>
<rect x="24" y="44" width="12" height="4" fill="${branchColor}"/>
<rect x="18" y="25" width="8" height="4" fill="${leafColor}"/>
<rect x="20" y="29" width="8" height="4" fill="${leafColor}"/>
<rect x="42" y="35" width="8" height="4" fill="${leafColor}"/>
<rect x="44" y="39" width="8" height="4" fill="${leafColor}"/>
<rect x="18" y="42" width="8" height="4" fill="${leafColor}"/>
<rect x="20" y="46" width="8" height="4" fill="${leafColor}"/>
${oliveElements}
</svg>`;

  return {
    svg,
    colors: { 
      olive: oliveTypeData.color, 
      branch: branchColor, 
      leaf: leafColor 
    },
    oliveCount: oliveCountData.count,
    oliveType: oliveTypeData.displayName,
    rarity: {
      count: oliveCountData.rarity,
      type: oliveTypeData.rarity,
      countPercentage: oliveCountData.percentage,
      typePercentage: oliveTypeData.percentage
    },
    id: Date.now() + Math.random()
  };
}

// Mock user data generator
const generateMockUsers = (): DatabaseUser[] => {
  // Reddit-style username components
  const adjectives = [
    'ancient', 'cosmic', 'digital', 'epic', 'frozen', 'golden', 'hidden', 'infinite', 'jolly', 'kinetic',
    'lunar', 'mystic', 'neon', 'omega', 'plasma', 'quantum', 'radiant', 'stellar', 'turbo', 'ultra',
    'vivid', 'wild', 'xenon', 'young', 'zesty', 'broken', 'cursed', 'dank', 'edgy', 'final'
  ];
  
  const nouns = [
    'wizard', 'phoenix', 'dragon', 'knight', 'raven', 'wolf', 'tiger', 'eagle', 'shark', 'bear',
    'viper', 'falcon', 'lion', 'cobra', 'hawk', 'panther', 'fox', 'owl', 'badger', 'lynx',
    'spider', 'mantis', 'scorpion', 'wasp', 'beetle', 'moth', 'butterfly', 'dragonfly', 'cricket', 'firefly'
  ];
  
  const numbers = ['69', '420', '1337', '2025', '404', '007', '360', '888', '999', '123', '789', '666'];
  
  const roles: Role[] = ['operative', 'contributor', 'beta-tester', 'moderator'];
  
  const countries = [
    'United States', 'Canada', 'United Kingdom', 'Germany', 'France', 'Japan', 'Australia', 'Brazil', 
    'India', 'Netherlands', 'Sweden', 'Norway', 'Denmark', 'Finland', 'South Korea', 'Singapore',
    'New Zealand', 'Switzerland', 'Austria', 'Belgium', 'Ireland', 'Portugal', 'Spain', 'Italy'
  ];
  
  const cities = [
    'New York', 'Toronto', 'London', 'Berlin', 'Paris', 'Tokyo', 'Sydney', 'S√£o Paulo', 'Mumbai', 'Amsterdam',
    'Stockholm', 'Oslo', 'Copenhagen', 'Helsinki', 'Seoul', 'Singapore', 'Auckland', 'Zurich', 'Vienna',
    'Brussels', 'Dublin', 'Lisbon', 'Madrid', 'Rome', 'Barcelona', 'Milan', 'Prague', 'Warsaw', 'Budapest'
  ];
  
  const bioPhrases = [
    'Studying quantum botany and temporal leaf patterns...',
    'Researching olive cultivation in extreme environments...',
    'Analyzing botanical signatures for authentication protocols...',
    'Investigating plant-based data encryption methods...',
    'Documenting rare olive varieties across dimensions...',
    'Examining the correlation between olive rarity and magnetic fields...',
    'Developing bio-computational models using olive branch structures...',
    'Cataloging temporal variations in botanical specimens...',
    'Researching the acoustic properties of olive leaves...',
    'Studying olive branch growth patterns in zero gravity...',
    'Working on photosynthetic efficiency optimization...',
    'Investigating olive oil composition across parallel timelines...',
    'Analyzing the fractal geometry of olive branch formations...',
    'Documenting olive cultivation techniques from ancient manuscripts...',
    'Researching the therapeutic properties of rare olive varieties...',
    'Exploring hydroponics systems for space agriculture...',
    'Mapping genetic sequences in synthetic plant matter...',
    'Testing soil composition effects on botanical growth rates...',
    'Developing AI models for predicting harvest yields...',
    'Investigating symbiotic relationships in controlled ecosystems...',
    'Analyzing photosynthetic efficiency under artificial lighting...',
    'Studying plant behavior in electromagnetic field environments...',
    'Researching cellular regeneration in damaged plant tissue...',
    'Documenting evolutionary adaptations in lab specimens...',
    'Investigating the effects of sound frequencies on plant growth...',
    'Analyzing root system networks using graph theory...',
    'Studying plant memory and learning behaviors...',
    'Researching bioluminescent properties in modified organisms...',
    'Developing sustainable cultivation methods for urban environments...',
    'Investigating time-dilated growth patterns in controlled chambers...'
  ];

  const generateRedditUsername = (): string => {
    const patterns = [
      () => `${adjectives[Math.floor(Math.random() * adjectives.length)]}_${nouns[Math.floor(Math.random() * nouns.length)]}`,
      () => `${nouns[Math.floor(Math.random() * nouns.length)]}_${adjectives[Math.floor(Math.random() * adjectives.length)]}`,
      () => `${adjectives[Math.floor(Math.random() * adjectives.length)]}${nouns[Math.floor(Math.random() * nouns.length)]}${numbers[Math.floor(Math.random() * numbers.length)]}`,
      () => `${nouns[Math.floor(Math.random() * nouns.length)]}${numbers[Math.floor(Math.random() * numbers.length)]}`,
      () => `x${adjectives[Math.floor(Math.random() * adjectives.length)]}_${nouns[Math.floor(Math.random() * nouns.length)]}x`,
      () => `${adjectives[Math.floor(Math.random() * adjectives.length)]}${nouns[Math.floor(Math.random() * nouns.length)]}_${Math.floor(Math.random() * 9999)}`,
      () => `i_am_${adjectives[Math.floor(Math.random() * adjectives.length)]}`,
      () => `${nouns[Math.floor(Math.random() * nouns.length)]}_lord_${numbers[Math.floor(Math.random() * numbers.length)]}`,
      () => `${adjectives[Math.floor(Math.random() * adjectives.length)]}_${nouns[Math.floor(Math.random() * nouns.length)]}_${Math.floor(Math.random() * 99)}`,
      () => `the_${adjectives[Math.floor(Math.random() * adjectives.length)]}_${nouns[Math.floor(Math.random() * nouns.length)]}`
    ];
    
    const pattern = patterns[Math.floor(Math.random() * patterns.length)];
    return pattern();
  };

  const users: DatabaseUser[] = [];

  // Generate 30 users
  for (let i = 0; i < 30; i++) {
    const role = roles[Math.floor(Math.random() * roles.length)];
    const oliveBranch = generateOliveBranch();
    const hasInventory = Math.random() > 0.25; // 75% chance of having inventory
    const inventoryPublic = Math.random() > 0.3; // 70% chance of public inventory
    
    let inventory: InventoryItem[] = [];
    if (hasInventory) {
      const numItems = Math.floor(Math.random() * 12) + 1; // 1-12 items
      let totalSeeds = 0; // Track total seeds to consolidate
      
      for (let j = 0; j < numItems; j++) {
        if (Math.random() > 0.65) { // 35% chance of seeds
          totalSeeds += Math.floor(Math.random() * 8) + 1; // Add to total seed count
        } else { // 65% chance of branches
          const branchData = generateOliveBranch();
          inventory.push({
            id: `branch_${Date.now()}_${i}_${j}`,
            type: 'branch',
            data: branchData,
            rarity: branchData.rarity,
            createdAt: new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000).toISOString(),
          });
        }
      }
      
      // Add consolidated seeds as a single stack if any were generated
      if (totalSeeds > 0) {
        inventory.unshift({ // Add at beginning so seeds appear first
          id: `seed_${Date.now()}_${i}_consolidated`,
          type: 'seed',
          quantity: totalSeeds,
          createdAt: new Date(Date.now() - Math.random() * 60 * 24 * 60 * 60 * 1000).toISOString(),
        });
      }
    }

    const joinDate = new Date(Date.now() - Math.random() * 730 * 24 * 60 * 60 * 1000); // Up to 2 years ago
    const lastSeen = new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000); // Up to 30 days ago

    users.push({
      username: generateRedditUsername(),
      role,
      onset: `${(joinDate.getMonth() + 1).toString().padStart(2, '0')}/${joinDate.getDate().toString().padStart(2, '0')}/${joinDate.getFullYear()}`,
      idNo: Math.floor(100000 + Math.random() * 900000).toString(),
      bio: bioPhrases[Math.floor(Math.random() * bioPhrases.length)],
      oliveBranch,
      birthday: Math.random() > 0.5 ? `${Math.floor(Math.random() * 12) + 1}/${Math.floor(Math.random() * 28) + 1}/${1980 + Math.floor(Math.random() * 25)}` : undefined,
      country: Math.random() > 0.2 ? countries[Math.floor(Math.random() * countries.length)] : undefined, // 80% chance of having a country
      city: Math.random() > 0.4 ? cities[Math.floor(Math.random() * cities.length)] : undefined,
      inventory,
      inventoryPublic,
      joinDate: joinDate.toISOString(),
      lastSeen: lastSeen.toISOString(),
    });
  }

  return users.sort((a, b) => a.username.localeCompare(b.username));
};

export default function DatabasePage() {
  const [searchTerm, setSearchTerm] = useState('');
  const [roleFilter, setRoleFilter] = useState<Role | 'all'>('all');
  const [selectedUser, setSelectedUser] = useState<DatabaseUser | null>(null);
  const [users] = useState<DatabaseUser[]>(generateMockUsers());
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    setTimeout(() => setIsLoading(false), 800);
  }, []);

  const filteredUsers = useMemo(() => {
    return users.filter(user => {
      const matchesSearch = user.username.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesRole = roleFilter === 'all' || user.role === roleFilter;
      return matchesSearch && matchesRole;
    });
  }, [users, searchTerm, roleFilter]);

  const roleStats = useMemo(() => {
    const stats = users.reduce((acc, user) => {
      acc[user.role] = (acc[user.role] || 0) + 1;
      return acc;
    }, {} as Record<Role, number>);
    return stats;
  }, [users]);

  const formatLastSeen = (lastSeenDate: string) => {
    const date = new Date(lastSeenDate);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffHours / 24);

    if (diffHours < 1) return 'Active now';
    if (diffHours < 24) return `${diffHours}h ago`;
    if (diffDays < 7) return `${diffDays}d ago`;
    return date.toLocaleDateString();
  };

  const getRoleColor = (role: Role) => {
    const colors = {
      guest: 'rgb(57, 57, 57)',
      operative: '#DB52F4',
      contributor: '#D5B504',
      'beta-tester': '#0D7F10',
      moderator: '#D40684'
    };
    return colors[role];
  };

  const getFlagUrl = (country?: string) => {
    if (!country) return null;
    
    // Country code mapping for flags - using flagcdn.com instead
    const countryFlags = {
      'United States': 'us',
      'Canada': 'ca',
      'United Kingdom': 'gb',
      'Germany': 'de',
      'France': 'fr',
      'Japan': 'jp',
      'Australia': 'au',
      'Brazil': 'br',
      'India': 'in',
      'Netherlands': 'nl',
      'Sweden': 'se',
      'Norway': 'no',
      'Denmark': 'dk',
      'Finland': 'fi',
      'South Korea': 'kr',
      'Singapore': 'sg',
      'New Zealand': 'nz',
      'Switzerland': 'ch',
      'Austria': 'at',
      'Belgium': 'be',
      'Ireland': 'ie',
      'Portugal': 'pt',
      'Spain': 'es',
      'Italy': 'it'
    };
    
    const countryCode = countryFlags[country as keyof typeof countryFlags];
    if (!countryCode) return null;
    return `https://flagcdn.com/16x12/${countryCode}.png`;
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150 flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-2 border-neutral-300 border-t-neutral-900 rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-neutral-600 font-mono animate-pulse text-sm lowercase">accessing database...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150">
      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-semibold text-neutral-900 mb-2">User Database</h1>
            <p className="text-sm text-neutral-600 font-mono">
              {filteredUsers.length} of {users.length} operatives indexed
            </p>
          </div>
          <button 
            onClick={() => window.history.back()}
            className="px-4 py-2 font-mono text-sm border border-neutral-300 hover:bg-neutral-100 transition-colors duration-200 lowercase"
          >
            ‚Üê back to home
          </button>
        </div>

        {/* Search and Filters */}
        <div className="bg-white rounded-lg p-6 mb-6 border border-neutral-200">
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0 lg:space-x-6">
            {/* Search */}
            <div className="flex-1 max-w-md">
              <label htmlFor="search" className="block text-sm font-medium text-neutral-700 mb-2 font-mono">
                search users
              </label>
              <div className="relative">
                <input
                  type="text"
                  id="search"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full px-4 py-3 pl-10 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
                  placeholder="bot_apple, bot_banana..."
                />
                <svg className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-neutral-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
            </div>

            {/* Role Filter */}
            <div>
              <label htmlFor="roleFilter" className="block text-sm font-medium text-neutral-700 mb-2 font-mono">
                filter by role
              </label>
              <select
                id="roleFilter"
                value={roleFilter}
                onChange={(e) => setRoleFilter(e.target.value as Role | 'all')}
                className="px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
              >
                <option value="all">all roles ({users.length})</option>
                <option value="operative">operative ({roleStats.operative || 0})</option>
                <option value="contributor">contributor ({roleStats.contributor || 0})</option>
                <option value="beta-tester">beta-tester ({roleStats['beta-tester'] || 0})</option>
                <option value="moderator">moderator ({roleStats.moderator || 0})</option>
              </select>
            </div>
          </div>
        </div>

        {/* User List */}
        <div className="bg-white rounded-lg border border-neutral-200">
          <div className="divide-y divide-neutral-100">
            {filteredUsers.map((user) => (
              <div
                key={user.username}
                className="p-4 hover:bg-neutral-50 transition-all duration-200 cursor-pointer group"
                onClick={() => setSelectedUser(user)}
              >
                <div className="flex items-center justify-between">
                  {/* Username */}
                  <div className="flex items-center space-x-3">
                    {user.country && getFlagUrl(user.country) && (
                      <img 
                        src={getFlagUrl(user.country)!} 
                        alt={`${user.country} flag`}
                        className="w-4 h-3 object-cover border border-neutral-300"
                        onError={(e) => {
                          console.log(`Failed to load flag for ${user.country}: ${getFlagUrl(user.country)}`);
                          const target = e.target as HTMLImageElement;
                          target.style.display = 'none';
                        }}
                        onLoad={() => {
                          console.log(`Successfully loaded flag for ${user.country}`);
                        }}
                      />
                    )}
                    <h3 
                      className="font-mono text-lg font-medium group-hover:underline"
                      style={{ color: getRoleColor(user.role) }}
                    >
                      {user.username}
                    </h3>
                    <span className="text-xs text-neutral-500 font-mono uppercase tracking-wide">
                      {user.role === 'beta-tester' ? 'beta-tester' : user.role}
                    </span>
                  </div>

                  {/* Quick Info */}
                  <div className="flex items-center space-x-6 text-xs font-mono text-neutral-500">
                    {user.inventoryPublic && user.inventory && (
                      <div className="text-right">
                        <div className="text-neutral-900">{user.inventory.length} items</div>
                      </div>
                    )}
                    <svg className="w-4 h-4 text-neutral-400 group-hover:text-neutral-600 group-hover:translate-x-1 transition-all duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* No Results */}
        {filteredUsers.length === 0 && (
          <div className="text-center py-12">
            <div className="text-neutral-400 mb-4">
              <svg className="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <p className="text-neutral-600 font-mono text-sm">
              No users found matching your search criteria.
            </p>
            <button
              onClick={() => {
                setSearchTerm('');
                setRoleFilter('all');
              }}
              className="mt-4 px-4 py-2 bg-neutral-900 text-white font-mono text-sm rounded hover:bg-neutral-700 transition-colors duration-200"
            >
              Clear filters
            </button>
          </div>
        )}
      </div>

      {/* User Detail Modal */}
      {selectedUser && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            {/* Modal Header */}
            <div className="flex items-center justify-between p-6 border-b border-neutral-200">
              <h2 className="text-xl font-semibold text-neutral-900 font-mono">
                User Profile: {selectedUser.username}
              </h2>
              <button
                onClick={() => setSelectedUser(null)}
                className="p-2 text-neutral-400 hover:text-neutral-600 transition-colors duration-200"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            {/* Modal Content */}
            <div className="p-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {/* Left Column - ID Card and Basic Info */}
                <div className="space-y-6">
                  {/* ID Card - Now using the real component with modal context! */}
                  <div className="flex justify-center">
                    <div className="w-64">
                      <GalwayIdCard
                        role={selectedUser.role}
                        username={selectedUser.username}
                        onset={selectedUser.onset}
                        idNo={selectedUser.idNo}
                        bio={selectedUser.bio}
                        oliveBranch={selectedUser.oliveBranch}
                        followMouse={true}
                        size="large"
                        context="modal"
                      />
                    </div>
                  </div>

                  {/* Basic Stats */}
                  <div className="bg-neutral-50 rounded-lg p-4">
                    <h3 className="font-mono text-sm font-medium text-neutral-900 mb-3 uppercase tracking-wide">
                      Account Information
                    </h3>
                    <div className="space-y-2 text-sm font-mono">
                      <div className="flex justify-between">
                        <span className="text-neutral-600">Joined:</span>
                        <span className="text-neutral-900">{new Date(selectedUser.joinDate).toLocaleDateString()}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-neutral-600">Last seen:</span>
                        <span className="text-neutral-900">{formatLastSeen(selectedUser.lastSeen)}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-neutral-600">Role:</span>
                        <span style={{ color: getRoleColor(selectedUser.role) }}>
                          {selectedUser.role === 'beta-tester' ? 'beta-tester' : selectedUser.role}
                        </span>
                      </div>
                      {selectedUser.country && (
                        <div className="flex justify-between">
                          <span className="text-neutral-600">Country:</span>
                          <span className="text-neutral-900">{selectedUser.country}</span>
                        </div>
                      )}
                      {selectedUser.city && (
                        <div className="flex justify-between">
                          <span className="text-neutral-600">City:</span>
                          <span className="text-neutral-900">{selectedUser.city}</span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>

                {/* Right Column - Olive Branch Details and Inventory */}
                <div className="space-y-6">
                  {/* Olive Branch Details */}
                  <div className="bg-neutral-50 rounded-lg p-4">
                    <h3 className="font-mono text-sm font-medium text-neutral-900 mb-3 uppercase tracking-wide">
                      Botanical Signature
                    </h3>
                    <div className="space-y-2 text-sm font-mono">
                      <div className="flex justify-between">
                        <span className="text-neutral-600">Olive count:</span>
                        <span className="text-neutral-900">{selectedUser.oliveBranch.oliveCount}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-neutral-600">Olive type:</span>
                        <span className="text-neutral-900">{selectedUser.oliveBranch.oliveType?.toLowerCase()}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-neutral-600">Count rarity:</span>
                        <span className={`${
                          selectedUser.oliveBranch.rarity?.count === 'Very Rare' ? 'text-red-600' :
                          selectedUser.oliveBranch.rarity?.count === 'Rare' ? 'text-purple-600' :
                          selectedUser.oliveBranch.rarity?.count === 'Uncommon' ? 'text-blue-600' : 'text-green-600'
                        }`}>
                          {selectedUser.oliveBranch.rarity?.count?.toLowerCase()} ({selectedUser.oliveBranch.rarity?.countPercentage}%)
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-neutral-600">Type rarity:</span>
                        <span className={`${
                          selectedUser.oliveBranch.rarity?.type === 'Very Rare' ? 'text-red-600' :
                          selectedUser.oliveBranch.rarity?.type === 'Rare' ? 'text-purple-600' :
                          selectedUser.oliveBranch.rarity?.type === 'Uncommon' ? 'text-blue-600' : 'text-green-600'
                        }`}>
                          {selectedUser.oliveBranch.rarity?.type?.toLowerCase()} ({selectedUser.oliveBranch.rarity?.typePercentage}%)
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-neutral-600">Branch ID:</span>
                        <span className="text-neutral-500">#{selectedUser.oliveBranch.id.toString().slice(-6)}</span>
                      </div>
                    </div>
                  </div>

                  {/* Inventory */}
                  <div className="bg-neutral-50 rounded-lg p-4">
                    <h3 className="font-mono text-sm font-medium text-neutral-900 mb-3 uppercase tracking-wide">
                      Inventory
                    </h3>
                    {selectedUser.inventoryPublic ? (
                      selectedUser.inventory && selectedUser.inventory.length > 0 ? (
                        <div className="grid grid-cols-4 gap-2">
                          {selectedUser.inventory.slice(0, 8).map((item, index) => (
                            <div
                              key={item.id}
                              className="aspect-square border border-neutral-200 rounded-lg p-1 bg-white relative"
                            >
                              {item.type === 'seed' ? (
                                <div className="w-full h-full relative">
                                  <div 
                                    className="w-full h-full rounded"
                                    dangerouslySetInnerHTML={{ 
                                      __html: `<svg width="100%" height="100%" viewBox="0 0 70 70" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <rect width="70" height="70" fill="${OLIVE_BRANCH_BG_COLOR}"/>
                                        <rect x="28" y="28" width="4" height="4" fill="#D2B48C"/>
                                        <rect x="32" y="30" width="4" height="4" fill="#CD853F"/>
                                        <rect x="36" y="32" width="4" height="4" fill="#DEB887"/>
                                        <rect x="30" y="34" width="4" height="4" fill="#F5DEB3"/>
                                        <rect x="34" y="36" width="4" height="4" fill="#D2B48C"/>
                                        <rect x="38" y="34" width="4" height="4" fill="#CD853F"/>
                                      </svg>` 
                                    }}
                                  />
                                  {item.quantity && item.quantity > 1 && (
                                    <div className="absolute -top-1 -right-1 bg-blue-500 text-white text-xs font-mono rounded-full w-4 h-4 flex items-center justify-center">
                                      {item.quantity}
                                    </div>
                                  )}
                                </div>
                              ) : (
                                <div 
                                  className="w-full h-full rounded"
                                  dangerouslySetInnerHTML={{ __html: item.data?.svg || '' }}
                                />
                              )}
                              {item.type === 'branch' && item.rarity && (
                                <div className="absolute bottom-0 left-0 text-xs font-mono">
                                  <span className={`px-1 py-0.5 rounded text-white text-[8px] ${
                                    item.rarity.count === 'Very Rare' ? 'bg-red-500' :
                                    item.rarity.count === 'Rare' ? 'bg-purple-500' :
                                    item.rarity.count === 'Uncommon' ? 'bg-blue-500' : 'bg-green-500'
                                  }`}>
                                    {item.rarity.count[0]}
                                  </span>
                                </div>
                              )}
                            </div>
                          ))}
                          {selectedUser.inventory.length > 8 && (
                            <div className="aspect-square border border-neutral-200 rounded-lg bg-neutral-100 flex items-center justify-center">
                              <span className="text-xs font-mono text-neutral-500">
                                +{selectedUser.inventory.length - 8}
                              </span>
                            </div>
                          )}
                        </div>
                      ) : (
                        <p className="text-sm font-mono text-neutral-500">No items in inventory</p>
                      )
                    ) : (
                      <p className="text-sm font-mono text-neutral-500">
                        üîí Inventory is private
                      </p>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// === END app/database/page.tsx ===


============================================================
DIRECTORY: app/forum
============================================================

// === app/forum/page.tsx ===
'use client';

import { useState, useEffect } from 'react';
import { useAuth } from '@/lib/auth';
import Link from 'next/link';
import { OLIVE_BRANCH_BG_COLOR } from '@/lib/oliveGenerator';

interface ForumThread {
  id: string;
  category: 'research' | 'general';
  title: string;
  content: string;
  author: {
    username: string;
    role: string;
    oliveBranch: any;
  };
  createdAt: string;
  updatedAt: string;
  likes: string[]; // Array of usernames who liked
  replyCount: number;
  lastReply?: {
    author: string;
    timestamp: string;
  };
  isReported: boolean;
}

interface ForumReply {
  id: string;
  threadId: string;
  content: string;
  author: {
    username: string;
    role: string;
    oliveBranch: any;
  };
  createdAt: string;
  likes: string[];
  isReported: boolean;
}

type CategoryType = 'research' | 'general';
type SortType = 'newest' | 'oldest' | 'most-liked' | 'most-replies';

const BANNED_WORDS = [
  // Add banned words here - keeping it simple for demo
  'spam', 'test-banned-word'
];

// Mock forum data generator
const generateMockForumData = () => {
  const threads: ForumThread[] = [
    {
      id: 'thread-a1b2c3',
      category: 'research',
      title: "Rit Dye's Study: Effectiveness? Alternatives?",
      content: "Hello everyone, I've been dying my clothing for a while now with Rit Dyes and I would like to share my findings. After extensive testing with various fabric types, I've discovered that cotton blends respond significantly better than pure synthetic materials. The color retention varies dramatically based on water temperature and pH levels...",
      author: {
        username: 'dye_researcher_42',
        role: 'operative',
        oliveBranch: {
          svg: `<svg width="100%" height="100%" viewBox="0 0 70 70" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="70" height="70" fill="${OLIVE_BRANCH_BG_COLOR}"/>
<rect x="33" y="20" width="4" height="30" fill="#8B7355"/>
<rect x="24" y="27" width="12" height="4" fill="#8B7355"/>
<rect x="34" y="37" width="12" height="4" fill="#8B7355"/>
<rect x="24" y="44" width="12" height="4" fill="#8B7355"/>
<rect x="18" y="25" width="8" height="4" fill="#228B22"/>
<rect x="20" y="29" width="8" height="4" fill="#228B22"/>
<rect x="42" y="35" width="8" height="4" fill="#228B22"/>
<rect x="44" y="39" width="8" height="4" fill="#228B22"/>
<rect x="18" y="42" width="8" height="4" fill="#228B22"/>
<rect x="20" y="46" width="8" height="4" fill="#228B22"/>
<rect x="20" y="32" width="4" height="4" fill="#6B8E23"/>
<rect x="40" y="42" width="4" height="4" fill="#6B8E23"/>
<rect x="26" y="49" width="4" height="4" fill="#6B8E23"/>
</svg>`
        }
      },
      createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
      updatedAt: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),
      likes: ['textile_expert', 'color_scientist'],
      replyCount: 8,
      lastReply: {
        author: 'textile_expert',
        timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString()
      },
      isReported: false
    },
    {
      id: 'thread-d4e5f6',
      category: 'research',
      title: 'Quantum Botany: Temporal Leaf Pattern Analysis',
      content: 'I have been researching the correlation between quantum field fluctuations and botanical growth patterns. My preliminary findings suggest that certain plant species exhibit temporal variance in their cellular structure when exposed to controlled electromagnetic fields...',
      author: {
        username: 'quantum_botanist',
        role: 'contributor',
        oliveBranch: {
          svg: `<svg width="100%" height="100%" viewBox="0 0 70 70" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="70" height="70" fill="${OLIVE_BRANCH_BG_COLOR}"/>
<rect x="33" y="20" width="4" height="30" fill="#A0522D"/>
<rect x="24" y="27" width="12" height="4" fill="#A0522D"/>
<rect x="34" y="37" width="12" height="4" fill="#A0522D"/>
<rect x="24" y="44" width="12" height="4" fill="#A0522D"/>
<rect x="18" y="25" width="8" height="4" fill="#32CD32"/>
<rect x="20" y="29" width="8" height="4" fill="#32CD32"/>
<rect x="42" y="35" width="8" height="4" fill="#32CD32"/>
<rect x="44" y="39" width="8" height="4" fill="#32CD32"/>
<rect x="18" y="42" width="8" height="4" fill="#32CD32"/>
<rect x="20" y="46" width="8" height="4" fill="#32CD32"/>
<rect x="20" y="32" width="4" height="4" fill="#663399"/>
<rect x="40" y="42" width="4" height="4" fill="#663399"/>
</svg>`
        }
      },
      createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
      updatedAt: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),
      likes: ['physics_student', 'plant_whisperer', 'dye_researcher_42'],
      replyCount: 12,
      lastReply: {
        author: 'plant_whisperer',
        timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString()
      },
      isReported: false
    },
    {
      id: 'thread-g7h8i9',
      category: 'general',
      title: 'Welcome New Operatives - Introduce Yourself!',
      content: 'Hello everyone! This is a space for new operatives to introduce themselves to the community. Share a bit about your background, research interests, or what brought you to the Galway Research Institute. Remember to keep personal information minimal and focus on your academic or research pursuits.',
      author: {
        username: 'institute_moderator',
        role: 'moderator',
        oliveBranch: {
          svg: `<svg width="100%" height="100%" viewBox="0 0 70 70" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="70" height="70" fill="${OLIVE_BRANCH_BG_COLOR}"/>
<rect x="33" y="20" width="4" height="30" fill="#C0C0C0"/>
<rect x="24" y="27" width="12" height="4" fill="#C0C0C0"/>
<rect x="34" y="37" width="12" height="4" fill="#C0C0C0"/>
<rect x="24" y="44" width="12" height="4" fill="#C0C0C0"/>
<rect x="18" y="25" width="8" height="4" fill="#9ACD32"/>
<rect x="20" y="29" width="8" height="4" fill="#9ACD32"/>
<rect x="42" y="35" width="8" height="4" fill="#9ACD32"/>
<rect x="44" y="39" width="8" height="4" fill="#9ACD32"/>
<rect x="18" y="42" width="8" height="4" fill="#9ACD32"/>
<rect x="20" y="46" width="8" height="4" fill="#9ACD32"/>
<rect x="20" y="32" width="4" height="4" fill="#2F2F2F"/>
<rect x="40" y="42" width="4" height="4" fill="#2F2F2F"/>
<rect x="26" y="49" width="4" height="4" fill="#2F2F2F"/>
<rect x="48" y="35" width="4" height="4" fill="#2F2F2F"/>
<rect x="22" y="45" width="4" height="4" fill="#2F2F2F"/>
</svg>`
        }
      },
      createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
      updatedAt: new Date(Date.now() - 30 * 60 * 1000).toISOString(),
      likes: ['new_operative_1', 'fresh_researcher', 'quantum_botanist'],
      replyCount: 23,
      lastReply: {
        author: 'fresh_researcher',
        timestamp: new Date(Date.now() - 30 * 60 * 1000).toISOString()
      },
      isReported: false
    }
  ];

  return { threads, replies: [] as ForumReply[] };
};

export default function ForumPage() {
  const { isLoggedIn, user } = useAuth();
  const [activeCategory, setActiveCategory] = useState<CategoryType>('research');
  const [sortBy, setSortBy] = useState<SortType>('newest');
  const [forumData, setForumData] = useState<{ threads: ForumThread[], replies: ForumReply[] }>({ threads: [], replies: [] });
  const [showNewThreadModal, setShowNewThreadModal] = useState(false);
  const [newThreadTitle, setNewThreadTitle] = useState('');
  const [newThreadContent, setNewThreadContent] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState('');
  const [lastPostTime, setLastPostTime] = useState<number | null>(null);
  const [cooldownCounter, setCooldownCounter] = useState<string | null>(null);

  // Load forum data
  useEffect(() => {
    const storedData = localStorage.getItem('galwayForumData');
    if (storedData) {
      try {
        setForumData(JSON.parse(storedData));
      } catch (error) {
        console.error('Failed to parse forum data:', error);
        const mockData = generateMockForumData();
        setForumData(mockData);
        localStorage.setItem('galwayForumData', JSON.stringify(mockData));
      }
    } else {
      const mockData = generateMockForumData();
      setForumData(mockData);
      localStorage.setItem('galwayForumData', JSON.stringify(mockData));
    }
  }, []);

  // Get role color
  const getRoleColor = (role: string) => {
    const colors = {
      guest: 'rgb(57, 57, 57)',
      operative: '#DB52F4',
      contributor: '#D5B504',
      'beta-tester': '#0D7F10',
      moderator: '#D40684'
    };
    return colors[role as keyof typeof colors] || colors.guest;
  };

  // Format time
  const formatTime = (timestamp: string) => {
    const date = new Date(timestamp);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffHours / 24);

    if (diffHours < 1) return 'just now';
    if (diffHours < 24) return `${diffHours}h ago`;
    if (diffDays < 7) return `${diffDays}d ago`;
    return date.toLocaleDateString();
  };

  // Check if user can post (email verified)
  const canPost = () => {
    if (!isLoggedIn || !user) return false;
    const userData = localStorage.getItem('galwayUser');
    if (userData) {
      const parsed = JSON.parse(userData);
      return parsed.isEmailVerified === true;
    }
    return false;
  };

  // Check posting cooldown
  const canPostNow = () => {
    if (!lastPostTime) return true;
    const cooldownMs = 10 * 60 * 1000; // 10 minutes
    const now = Date.now();
    return (now - lastPostTime) > cooldownMs;
  };

  // Live cooldown counter
  useEffect(() => {
    if (!lastPostTime) {
      setCooldownCounter(null);
      return;
    }

    const updateCounter = () => {
      const cooldownMs = 10 * 60 * 1000; // 10 minutes
      const now = Date.now();
      const timeLeft = cooldownMs - (now - lastPostTime);
      
      if (timeLeft <= 0) {
        setCooldownCounter(null);
        return;
      }
      
      const minutes = Math.floor(timeLeft / 60000);
      const seconds = Math.floor((timeLeft % 60000) / 1000);
      setCooldownCounter(`${minutes}:${seconds.toString().padStart(2, '0')}`);
    };

    updateCounter(); // Initial update
    const interval = setInterval(updateCounter, 1000); // Update every second

    return () => clearInterval(interval);
  }, [lastPostTime]);

  // Check for banned words
  const containsBannedWords = (text: string) => {
    const lowercaseText = text.toLowerCase();
    return BANNED_WORDS.some(word => lowercaseText.includes(word.toLowerCase()));
  };

  // Filter and sort threads
  const getFilteredThreads = () => {
    let filtered = forumData.threads.filter(thread => thread.category === activeCategory);
    
    switch (sortBy) {
      case 'oldest':
        filtered.sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());
        break;
      case 'most-liked':
        filtered.sort((a, b) => b.likes.length - a.likes.length);
        break;
      case 'most-replies':
        filtered.sort((a, b) => b.replyCount - a.replyCount);
        break;
      case 'newest':
      default:
        filtered.sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime());
        break;
    }
    
    return filtered;
  };

  // Handle new thread submission
  const handleNewThreadSubmit = async () => {
    if (!canPost() || !user || isSubmitting) return;
    
    setSubmitError('');
    
    // Validation
    if (newThreadTitle.trim().length < 3) {
      setSubmitError('Title must be at least 3 characters');
      return;
    }
    if (newThreadTitle.trim().length > 120) {
      setSubmitError('Title must be 120 characters or less');
      return;
    }
    if (newThreadContent.trim().length < 10) {
      setSubmitError('Content must be at least 10 characters');
      return;
    }
    if (newThreadContent.trim().length > 10000) {
      setSubmitError('Content must be 10,000 characters or less');
      return;
    }
    
    // Check banned words
    if (containsBannedWords(newThreadTitle) || containsBannedWords(newThreadContent)) {
      setSubmitError('Your post contains prohibited content. If you believe this is an error, please contact support.');
      return;
    }
    
                // Check cooldown
    if (!canPostNow()) {
      const timeLeft = Math.ceil((10 * 60 * 1000 - (Date.now() - (lastPostTime || 0))) / 60000);
      setSubmitError(`Thread creation on cooldown`);
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      // Simulate posting delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Generate thread ID
      const threadId = `thread-${Math.random().toString(36).substr(2, 6)}`;
      
      // Get user data for author info
      const userData = JSON.parse(localStorage.getItem('galwayUser') || '{}');
      
      const newThread: ForumThread = {
        id: threadId,
        category: activeCategory,
        title: newThreadTitle.trim(),
        content: newThreadContent.trim(),
        author: {
          username: user.username,
          role: user.role,
          oliveBranch: userData.oliveBranch || user.oliveBranch
        },
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        likes: [],
        replyCount: 0,
        isReported: false
      };
      
      const updatedData = {
        ...forumData,
        threads: [newThread, ...forumData.threads]
      };
      
      setForumData(updatedData);
      localStorage.setItem('galwayForumData', JSON.stringify(updatedData));
      setLastPostTime(Date.now());
      
      // Reset form
      setNewThreadTitle('');
      setNewThreadContent('');
      setShowNewThreadModal(false);
      
    } catch (error) {
      setSubmitError('Failed to create thread. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!isLoggedIn) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150 flex items-center justify-center">
        <div className="text-center max-w-md mx-auto px-4">
          <div className="mb-6">
            <svg className="w-16 h-16 mx-auto text-neutral-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
            </svg>
            <h1 className="text-2xl font-semibold text-neutral-900 mb-2">Forum Access Required</h1>
            <p className="text-neutral-600 font-mono text-sm leading-relaxed">
              You must be logged in to view the research forum. Please sign in or register for an operative account.
            </p>
          </div>
          <div className="space-y-3">
            <Link 
              href="/login?redirect=/forum"
              className="block w-full py-3 px-6 bg-neutral-900 text-white font-mono text-sm rounded hover:bg-neutral-700 transition-colors duration-200 uppercase tracking-wide"
            >
              Sign In
            </Link>
            <Link 
              href="/register"
              className="block w-full py-3 px-6 border border-neutral-300 text-neutral-700 font-mono text-sm rounded hover:bg-neutral-50 transition-colors duration-200 uppercase tracking-wide"
            >
              Register
            </Link>
          </div>
        </div>
      </div>
    );
  }

  const filteredThreads = getFilteredThreads();

  return (
    <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150">
      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex flex-col sm:flex-row sm:items-center justify-between mb-6 sm:mb-8 space-y-4 sm:space-y-0">
          <div>
            <h1 className="text-2xl sm:text-3xl font-semibold text-neutral-900 mb-1 sm:mb-2">Research Forum</h1>
            <p className="text-xs sm:text-sm text-neutral-600 font-mono">
              Collaborative research discussions and findings
            </p>
          </div>
          <div className="flex items-center justify-end space-x-2 sm:space-x-3">
            {cooldownCounter && (
              <div className="text-[10px] sm:text-xs font-mono text-orange-600 bg-orange-50 px-1.5 sm:px-2 py-1 rounded border border-orange-200">
                <span className="hidden sm:inline">Next thread: </span>{cooldownCounter}
              </div>
            )}
            {canPost() && (
              <button
                onClick={() => setShowNewThreadModal(true)}
                disabled={!canPostNow()}
                className={`px-3 sm:px-4 py-2 font-mono text-xs sm:text-sm rounded transition-colors duration-200 uppercase tracking-wide ${
                  canPostNow()
                    ? 'bg-neutral-900 text-white hover:bg-neutral-700'
                    : 'bg-neutral-300 text-neutral-500 cursor-not-allowed'
                }`}
              >
                <span className="hidden sm:inline">New Thread</span>
                <span className="sm:hidden">New</span>
              </button>
            )}
          </div>
        </div>

        {/* Email verification warning */}
        {isLoggedIn && !canPost() && (
          <div className="mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-md">
            <div className="flex items-start space-x-2">
              <svg className="w-5 h-5 text-yellow-600 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 18.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
              <div>
                <p className="text-sm font-medium text-yellow-800 font-mono">Email Verification Required</p>
                <p className="text-sm text-yellow-700 mt-1 font-mono">
                  You must verify your email address to create threads or post replies. Check your inbox for a verification link.
                </p>
              </div>
            </div>
          </div>
        )}

        {/* Category Tabs and Controls */}
        <div className="bg-white rounded-lg border border-neutral-200 mb-4 sm:mb-6">
          <div className="border-b border-neutral-200">
            <nav className="flex space-x-0" aria-label="Categories">
              <button
                onClick={() => setActiveCategory('research')}
                className={`flex-1 px-3 sm:px-6 py-3 sm:py-4 text-xs sm:text-sm font-medium font-mono transition-all duration-200 border-b-2 ${
                  activeCategory === 'research'
                    ? 'border-neutral-900 text-neutral-900 bg-neutral-50'
                    : 'border-transparent text-neutral-500 hover:text-neutral-700 hover:border-neutral-300'
                }`}
              >
                RESEARCH ({forumData.threads.filter(t => t.category === 'research').length})
              </button>
              <button
                onClick={() => setActiveCategory('general')}
                className={`flex-1 px-3 sm:px-6 py-3 sm:py-4 text-xs sm:text-sm font-medium font-mono transition-all duration-200 border-b-2 ${
                  activeCategory === 'general'
                    ? 'border-neutral-900 text-neutral-900 bg-neutral-50'
                    : 'border-transparent text-neutral-500 hover:text-neutral-700 hover:border-neutral-300'
                }`}
              >
                GENERAL ({forumData.threads.filter(t => t.category === 'general').length})
              </button>
            </nav>
          </div>
          
          {/* Sort Controls */}
          <div className="p-3 sm:p-4">
            <div className="flex items-center justify-between">
              <span className="text-xs sm:text-sm font-mono text-neutral-700">Sort by:</span>
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value as SortType)}
                className="px-2 sm:px-3 py-1 border border-neutral-300 rounded font-mono text-xs sm:text-sm focus:ring-2 focus:ring-neutral-900 focus:border-transparent"
              >
                <option value="newest">Newest</option>
                <option value="oldest">Oldest</option>
                <option value="most-liked">Most Liked</option>
                <option value="most-replies">Most Replies</option>
              </select>
            </div>
          </div>
        </div>

        {/* Thread List */}
        <div className="space-y-4">
          {filteredThreads.length > 0 ? (
            filteredThreads.map((thread) => (
              <div
                key={thread.id}
                className="bg-white rounded-lg border border-neutral-200 p-3 sm:p-6 hover:border-neutral-300 transition-all duration-200"
              >
                <div className="flex items-start space-x-2 sm:space-x-4">
                  {/* Author Avatar */}
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 sm:w-12 sm:h-12 border border-neutral-200 rounded-lg overflow-hidden bg-neutral-50">
                      {thread.author.oliveBranch?.svg && (
                        <div 
                          className="w-full h-full"
                          dangerouslySetInnerHTML={{ __html: thread.author.oliveBranch.svg }}
                        />
                      )}
                    </div>
                  </div>

                  {/* Thread Content */}
                  <div className="flex-1 min-w-0">
                    <div className="flex flex-col sm:flex-row sm:items-center sm:space-x-2 mb-1 sm:mb-2">
                      <span 
                        className="font-mono text-xs sm:text-sm font-medium truncate"
                        style={{ color: getRoleColor(thread.author.role) }}
                      >
                        {thread.author.username}
                      </span>
                      <div className="flex items-center space-x-1 sm:space-x-2 text-[10px] sm:text-xs text-neutral-500 font-mono">
                        <span>{formatTime(thread.createdAt)}</span>
                        {thread.lastReply && (
                          <>
                            <span className="hidden sm:inline">‚Ä¢</span>
                            <span className="hidden sm:inline">last reply {formatTime(thread.lastReply.timestamp)}</span>
                          </>
                        )}
                      </div>
                    </div>

                    <Link 
                      href={`/forum/${thread.category[0]}/${thread.id}`}
                      className="block group"
                    >
                      <h3 className="text-sm sm:text-lg font-medium text-neutral-900 mb-1 sm:mb-2 group-hover:text-neutral-700 transition-colors line-clamp-2">
                        {thread.title}
                      </h3>
                      <p className="text-xs sm:text-sm text-neutral-600 leading-relaxed line-clamp-2">
                        {thread.content.substring(0, 80)}
                        {thread.content.length > 80 && '...'}
                      </p>
                    </Link>

                    {/* Thread Stats */}
                    <div className="flex items-center space-x-3 sm:space-x-4 mt-2 sm:mt-4 text-[10px] sm:text-xs font-mono text-neutral-500">
                      <span className="flex items-center space-x-1">
                        <svg className="w-3 h-3 sm:w-4 sm:h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                        </svg>
                        <span>{thread.likes.length}</span>
                      </span>
                      <span className="flex items-center space-x-1">
                        <svg className="w-3 h-3 sm:w-4 sm:h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                        </svg>
                        <span>{thread.replyCount}</span>
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            ))
          ) : (
            <div className="text-center py-12">
              <div className="text-neutral-400 mb-4">
                <svg className="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                </svg>
              </div>
              <p className="text-neutral-600 font-mono text-sm">
                No threads in this category yet.
              </p>
              {canPost() && (
                <button
                  onClick={() => setShowNewThreadModal(true)}
                  className="mt-4 px-4 py-2 bg-neutral-900 text-white font-mono text-sm rounded hover:bg-neutral-700 transition-colors duration-200"
                >
                  Start the first discussion
                </button>
              )}
            </div>
          )}
        </div>
      </div>

      {/* New Thread Modal */}
      {showNewThreadModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-neutral-200">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold text-neutral-900 font-mono">
                  Create New Thread - {activeCategory.charAt(0).toUpperCase() + activeCategory.slice(1)}
                </h2>
                <button
                  onClick={() => {
                    setShowNewThreadModal(false);
                    setNewThreadTitle('');
                    setNewThreadContent('');
                    setSubmitError('');
                  }}
                  className="p-2 text-neutral-400 hover:text-neutral-600 transition-colors duration-200"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>

            <div className="p-6">
              {submitError && (
                <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-md">
                  <p className="text-sm text-red-700 font-mono">{submitError}</p>
                </div>
              )}

              <div className="space-y-4">
                {/* Title */}
                <div>
                  <label className="block text-sm font-medium text-neutral-700 mb-2 font-mono uppercase">
                    Title
                  </label>
                  <input
                    type="text"
                    value={newThreadTitle}
                    onChange={(e) => setNewThreadTitle(e.target.value)}
                    maxLength={120}
                    className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
                    placeholder="Brief, descriptive title for your thread"
                  />
                  <p className="text-xs text-neutral-500 mt-1 font-mono">
                    {newThreadTitle.length}/120 characters
                  </p>
                </div>

                {/* Content */}
                <div>
                  <label className="block text-sm font-medium text-neutral-700 mb-2 font-mono uppercase">
                    Content
                  </label>
                  <textarea
                    value={newThreadContent}
                    onChange={(e) => setNewThreadContent(e.target.value)}
                    maxLength={10000}
                    rows={12}
                    className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm resize-vertical"
                    placeholder="Share your research, findings, questions, or discussion topic..."
                  />
                  <p className="text-xs text-neutral-500 mt-1 font-mono">
                    {newThreadContent.length}/10,000 characters
                  </p>
                </div>
              </div>

              <div className="flex space-x-3 mt-6">
                <button
                  onClick={() => {
                    setShowNewThreadModal(false);
                    setNewThreadTitle('');
                    setNewThreadContent('');
                    setSubmitError('');
                  }}
                  className="flex-1 px-4 py-3 bg-neutral-200 text-neutral-700 rounded font-mono text-sm hover:bg-neutral-300 transition-colors duration-200 uppercase tracking-wide"
                >
                  Cancel
                </button>
                <div className="flex items-center space-x-2">
                  {cooldownCounter && (
                    <div className="text-[10px] sm:text-xs font-mono text-orange-600 bg-orange-50 px-1.5 sm:px-2 py-1 rounded border border-orange-200 whitespace-nowrap">
                      <span className="hidden sm:inline">Cooldown: </span>{cooldownCounter}
                    </div>
                  )}
                  <button
                    onClick={handleNewThreadSubmit}
                    disabled={isSubmitting || !newThreadTitle.trim() || !newThreadContent.trim() || !canPostNow()}
                    className="px-4 py-3 bg-neutral-900 text-white rounded font-mono text-sm hover:bg-neutral-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200 uppercase tracking-wide"
                  >
                    {isSubmitting ? 'Posting...' : 'Create Thread'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// === END app/forum/page.tsx ===


============================================================
DIRECTORY: app/forum/[category]/[threadId]
============================================================

// === app/forum/[category]/[threadId]/page.tsx ===
'use client';

import { useState, useEffect } from 'react';
import { useAuth } from '@/lib/auth';
import Link from 'next/link';
import { useParams, useRouter } from 'next/navigation';
import { OLIVE_BRANCH_BG_COLOR } from '@/lib/oliveGenerator';

interface ForumThread {
  id: string;
  category: 'research' | 'general';
  title: string;
  content: string;
  author: {
    username: string;
    role: string;
    oliveBranch: any;
  };
  createdAt: string;
  updatedAt: string;
  likes: string[];
  replyCount: number;
  lastReply?: {
    author: string;
    timestamp: string;
  };
  isReported: boolean;
}

interface ForumReply {
  id: string;
  threadId: string;
  content: string;
  author: {
    username: string;
    role: string;
    oliveBranch: any;
  };
  createdAt: string;
  likes: string[];
  isReported: boolean;
}

const BANNED_WORDS = [
  'spam', 'test-banned-word'
];

const REPLIES_PER_PAGE = 10;

export default function ThreadPage() {
  const { isLoggedIn, user } = useAuth();
  const params = useParams();
  const router = useRouter();
  const threadId = params?.threadId as string;
  const category = params?.category as string;

  const [thread, setThread] = useState<ForumThread | null>(null);
  const [replies, setReplies] = useState<ForumReply[]>([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [newReply, setNewReply] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState('');
  const [lastReplyTime, setLastReplyTime] = useState<number | null>(null);
  const [replyCooldownCounter, setReplyCooldownCounter] = useState<string | null>(null);
  const [showReportModal, setShowReportModal] = useState(false);
  const [reportTarget, setReportTarget] = useState<{ type: 'thread' | 'reply', id: string } | null>(null);
  const [reportReason, setReportReason] = useState('');

  // Load thread and replies
  useEffect(() => {
    if (!threadId) return;

    const storedData = localStorage.getItem('galwayForumData');
    if (storedData) {
      try {
        const forumData = JSON.parse(storedData);
        const foundThread = forumData.threads.find((t: ForumThread) => t.id === threadId);
        
        if (!foundThread) {
          router.push('/forum');
          return;
        }
        
        setThread(foundThread);
        
        // Filter replies for this thread
        const threadReplies = forumData.replies.filter((r: ForumReply) => r.threadId === threadId);
        threadReplies.sort((a: ForumReply, b: ForumReply) => 
          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
        );
        setReplies(threadReplies);
        
        // Generate some mock replies if none exist
        if (threadReplies.length === 0 && foundThread.replyCount > 0) {
          generateMockReplies(foundThread);
        }
      } catch (error) {
        console.error('Failed to load thread:', error);
        router.push('/forum');
      }
    }
  }, [threadId, router]);

  // Generate mock replies for demo
  const generateMockReplies = (thread: ForumThread) => {
    const mockReplies: ForumReply[] = [];
    
    if (thread.id === 'thread-a1b2c3') {
      // Rit Dye thread replies
      mockReplies.push(
        {
          id: 'reply-001',
          threadId: thread.id,
          content: "Great research! I've been experimenting with natural dyes lately and found that cotton pre-treatment with mordants significantly improves color fastness. Have you tried using iron or copper mordants?",
          author: {
            username: 'textile_expert',
            role: 'contributor',
            oliveBranch: {
              svg: `<svg width="100%" height="100%" viewBox="0 0 70 70" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="70" height="70" fill="${OLIVE_BRANCH_BG_COLOR}"/>
<rect x="33" y="20" width="4" height="30" fill="#CD853F"/>
<rect x="24" y="27" width="12" height="4" fill="#CD853F"/>
<rect x="34" y="37" width="12" height="4" fill="#CD853F"/>
<rect x="24" y="44" width="12" height="4" fill="#CD853F"/>
<rect x="18" y="25" width="8" height="4" fill="#006400"/>
<rect x="20" y="29" width="8" height="4" fill="#006400"/>
<rect x="42" y="35" width="8" height="4" fill="#006400"/>
<rect x="44" y="39" width="8" height="4" fill="#006400"/>
<rect x="18" y="42" width="8" height="4" fill="#006400"/>
<rect x="20" y="46" width="8" height="4" fill="#006400"/>
<rect x="20" y="32" width="4" height="4" fill="#8B4513"/>
<rect x="40" y="42" width="4" height="4" fill="#8B4513"/>
</svg>`
            }
          },
          createdAt: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(),
          likes: ['dye_researcher_42', 'color_scientist'],
          isReported: false
        },
        {
          id: 'reply-002',
          threadId: thread.id,
          content: "Interesting findings! What water temperature did you use for testing? I've noticed that hotter water (around 140¬∞F) gives better initial saturation but cooler water (100¬∞F) might preserve the fabric integrity better over time.",
          author: {
            username: 'color_scientist',
            role: 'operative',
            oliveBranch: {
              svg: `<svg width="100%" height="100%" viewBox="0 0 70 70" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="70" height="70" fill="${OLIVE_BRANCH_BG_COLOR}"/>
<rect x="33" y="20" width="4" height="30" fill="#DEB887"/>
<rect x="24" y="27" width="12" height="4" fill="#DEB887"/>
<rect x="34" y="37" width="12" height="4" fill="#DEB887"/>
<rect x="24" y="44" width="12" height="4" fill="#DEB887"/>
<rect x="18" y="25" width="8" height="4" fill="#2E8B57"/>
<rect x="20" y="29" width="8" height="4" fill="#2E8B57"/>
<rect x="42" y="35" width="8" height="4" fill="#2E8B57"/>
<rect x="44" y="39" width="8" height="4" fill="#2E8B57"/>
<rect x="18" y="42" width="8" height="4" fill="#2E8B57"/>
<rect x="20" y="46" width="8" height="4" fill="#2E8B57"/>
<rect x="20" y="32" width="4" height="4" fill="#2F2F2F"/>
<rect x="40" y="42" width="4" height="4" fill="#2F2F2F"/>
<rect x="26" y="49" width="4" height="4" fill="#2F2F2F"/>
<rect x="48" y="35" width="4" height="4" fill="#2F2F2F"/>
</svg>`
            }
          },
          createdAt: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),
          likes: ['textile_expert'],
          isReported: false
        }
      );
    }
    
    if (mockReplies.length > 0) {
      const storedData = localStorage.getItem('galwayForumData');
      if (storedData) {
        const forumData = JSON.parse(storedData);
        forumData.replies = [...forumData.replies, ...mockReplies];
        localStorage.setItem('galwayForumData', JSON.stringify(forumData));
        setReplies(mockReplies);
      }
    }
  };

  // Get role color
  const getRoleColor = (role: string) => {
    const colors = {
      guest: 'rgb(57, 57, 57)',
      operative: '#DB52F4',
      contributor: '#D5B504',
      'beta-tester': '#0D7F10',
      moderator: '#D40684'
    };
    return colors[role as keyof typeof colors] || colors.guest;
  };

  // Format time
  const formatTime = (timestamp: string) => {
    const date = new Date(timestamp);
    return date.toLocaleDateString() + ' at ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  // Check if user can post
  const canPost = () => {
    if (!isLoggedIn || !user) return false;
    const userData = localStorage.getItem('galwayUser');
    if (userData) {
      const parsed = JSON.parse(userData);
      return parsed.isEmailVerified === true;
    }
    return false;
  };

  // Check reply cooldown
  const canReplyNow = () => {
    if (!lastReplyTime) return true;
    const cooldownMs = 60 * 1000; // 1 minute
    const now = Date.now();
    return (now - lastReplyTime) > cooldownMs;
  };

  // Live reply cooldown counter
  useEffect(() => {
    if (!lastReplyTime) {
      setReplyCooldownCounter(null);
      return;
    }

    const updateCounter = () => {
      const cooldownMs = 60 * 1000; // 1 minute
      const now = Date.now();
      const timeLeft = cooldownMs - (now - lastReplyTime);
      
      if (timeLeft <= 0) {
        setReplyCooldownCounter(null);
        return;
      }
      
      const seconds = Math.ceil(timeLeft / 1000);
      setReplyCooldownCounter(`${seconds}s`);
    };

    updateCounter(); // Initial update
    const interval = setInterval(updateCounter, 1000); // Update every second

    return () => clearInterval(interval);
  }, [lastReplyTime]);

  // Check for banned words
  const containsBannedWords = (text: string) => {
    const lowercaseText = text.toLowerCase();
    return BANNED_WORDS.some(word => lowercaseText.includes(word.toLowerCase()));
  };

  // Handle like toggle
  const handleLike = (type: 'thread' | 'reply', id: string) => {
    if (!canPost() || !user) return;

    const storedData = localStorage.getItem('galwayForumData');
    if (storedData) {
      const forumData = JSON.parse(storedData);
      
      if (type === 'thread' && thread) {
        const threadIndex = forumData.threads.findIndex((t: ForumThread) => t.id === id);
        if (threadIndex !== -1) {
          const isLiked = forumData.threads[threadIndex].likes.includes(user.username);
          if (isLiked) {
            forumData.threads[threadIndex].likes = forumData.threads[threadIndex].likes.filter((u: string) => u !== user.username);
          } else {
            forumData.threads[threadIndex].likes.push(user.username);
          }
          setThread(forumData.threads[threadIndex]);
        }
      } else if (type === 'reply') {
        const replyIndex = forumData.replies.findIndex((r: ForumReply) => r.id === id);
        if (replyIndex !== -1) {
          const isLiked = forumData.replies[replyIndex].likes.includes(user.username);
          if (isLiked) {
            forumData.replies[replyIndex].likes = forumData.replies[replyIndex].likes.filter((u: string) => u !== user.username);
          } else {
            forumData.replies[replyIndex].likes.push(user.username);
          }
          // Update local state
          setReplies(prev => prev.map(r => r.id === id ? forumData.replies[replyIndex] : r));
        }
      }
      
      localStorage.setItem('galwayForumData', JSON.stringify(forumData));
    }
  };

  // Handle reply submission
  const handleReplySubmit = async () => {
    if (!canPost() || !user || !thread || isSubmitting) return;
    
    setSubmitError('');
    
    // Validation
    if (newReply.trim().length < 3) {
      setSubmitError('Reply must be at least 3 characters');
      return;
    }
    if (newReply.trim().length > 5000) {
      setSubmitError('Reply must be 5,000 characters or less');
      return;
    }
    
    // Check banned words
    if (containsBannedWords(newReply)) {
      setSubmitError('Your reply contains prohibited content. If you believe this is an error, please contact support.');
      return;
    }
    
    // Check cooldown
    if (!canReplyNow()) {
      setSubmitError('Reply on cooldown');
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const replyId = `reply-${Math.random().toString(36).substr(2, 6)}`;
      const userData = JSON.parse(localStorage.getItem('galwayUser') || '{}');
      
      const newReplyObj: ForumReply = {
        id: replyId,
        threadId: thread.id,
        content: newReply.trim(),
        author: {
          username: user.username,
          role: user.role,
          oliveBranch: userData.oliveBranch || user.oliveBranch
        },
        createdAt: new Date().toISOString(),
        likes: [],
        isReported: false
      };
      
      const storedData = localStorage.getItem('galwayForumData');
      if (storedData) {
        const forumData = JSON.parse(storedData);
        forumData.replies.push(newReplyObj);
        
        // Update thread reply count and last reply
        const threadIndex = forumData.threads.findIndex((t: ForumThread) => t.id === thread.id);
        if (threadIndex !== -1) {
          forumData.threads[threadIndex].replyCount += 1;
          forumData.threads[threadIndex].lastReply = {
            author: user.username,
            timestamp: new Date().toISOString()
          };
          forumData.threads[threadIndex].updatedAt = new Date().toISOString();
          setThread(forumData.threads[threadIndex]);
        }
        
        localStorage.setItem('galwayForumData', JSON.stringify(forumData));
        setReplies(prev => [...prev, newReplyObj]);
        setLastReplyTime(Date.now());
        setNewReply('');
        
        // Navigate to last page if needed
        const totalPages = Math.ceil((replies.length + 1) / REPLIES_PER_PAGE);
        if (currentPage < totalPages) {
          setCurrentPage(totalPages);
        }
      }
      
    } catch (error) {
      setSubmitError('Failed to post reply. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Handle report submission
  const handleReport = () => {
    if (!reportTarget || !reportReason.trim()) return;
    
    // In a real app, this would send to a moderation queue
    console.log('Report submitted:', { target: reportTarget, reason: reportReason });
    
    setShowReportModal(false);
    setReportTarget(null);
    setReportReason('');
  };

  // Pagination
  const totalPages = Math.ceil(replies.length / REPLIES_PER_PAGE);
  const startIndex = (currentPage - 1) * REPLIES_PER_PAGE;
  const endIndex = startIndex + REPLIES_PER_PAGE;
  const currentReplies = replies.slice(startIndex, endIndex);

  if (!isLoggedIn) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150 flex items-center justify-center">
        <div className="text-center max-w-md mx-auto px-4">
          <h1 className="text-2xl font-semibold text-neutral-900 mb-4">Login Required</h1>
          <p className="text-neutral-600 font-mono text-sm mb-6">
            You must be logged in to view forum threads.
          </p>
          <Link 
            href={`/login?redirect=${encodeURIComponent(`/forum/${category}/${threadId}`)}`}
            className="px-4 py-2 bg-neutral-900 text-white font-mono text-sm rounded hover:bg-neutral-700 transition-colors duration-200"
          >
            Sign In
          </Link>
        </div>
      </div>
    );
  }

  if (!thread) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150 flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-2 border-neutral-300 border-t-neutral-900 rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-neutral-600 font-mono text-sm">Loading thread...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150">
      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Breadcrumb */}
        <div className="flex items-center space-x-2 mb-6 text-sm font-mono text-neutral-600">
          <Link href="/forum" className="hover:text-neutral-900 transition-colors">
            Forum
          </Link>
          <span>‚Ä∫</span>
          <span className="capitalize">{thread.category}</span>
        </div>

        {/* Thread Header */}
        <div className="bg-white rounded-lg border border-neutral-200 p-6 mb-6">
          <div className="flex items-start space-x-4 mb-4">
            {/* Author Avatar */}
            <div className="flex-shrink-0">
              <div className="w-12 h-12 border border-neutral-200 rounded-lg overflow-hidden bg-neutral-50">
                {thread.author.oliveBranch?.svg && (
                  <div 
                    className="w-full h-full"
                    dangerouslySetInnerHTML={{ __html: thread.author.oliveBranch.svg }}
                  />
                )}
              </div>
            </div>

            <div className="flex-1 min-w-0">
              <div className="flex items-center space-x-2 mb-2">
                <span 
                  className="font-mono text-sm font-medium flex items-center space-x-1"
                  style={{ color: getRoleColor(thread.author.role) }}
                >
                  <span>{thread.author.username}</span>
                  <svg className="w-4 h-4 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                  </svg>
                  <span className="text-xs text-neutral-500">OP</span>
                </span>
                <span className="text-xs text-neutral-500 font-mono">
                  {formatTime(thread.createdAt)}
                </span>
              </div>

              <h1 className="text-2xl font-semibold text-neutral-900 mb-4">{thread.title}</h1>
              <div className="prose prose-sm max-w-none">
                <p className="text-neutral-700 leading-relaxed whitespace-pre-wrap">{thread.content}</p>
              </div>

              {/* Thread Actions */}
              <div className="flex items-center space-x-4 mt-4">
                <button
                  onClick={() => handleLike('thread', thread.id)}
                  disabled={!canPost()}
                  className={`flex items-center space-x-1 text-xs font-mono transition-colors duration-200 ${
                    canPost() && user && thread.likes.includes(user.username)
                      ? 'text-red-600 hover:text-red-700'
                      : 'text-neutral-500 hover:text-neutral-700'
                  } ${!canPost() ? 'cursor-not-allowed opacity-50' : ''}`}
                >
                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clipRule="evenodd" />
                  </svg>
                  <span>{thread.likes.length}</span>
                </button>
                
                <button
                  onClick={() => {
                    setReportTarget({ type: 'thread', id: thread.id });
                    setShowReportModal(true);
                  }}
                  className="text-xs font-mono text-neutral-500 hover:text-red-600 transition-colors duration-200"
                >
                  Report
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Email Verification Warning */}
        {isLoggedIn && !canPost() && (
          <div className="mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-md">
            <p className="text-sm text-yellow-800 font-mono">
              Email verification required to like posts or post replies.
            </p>
          </div>
        )}

        {/* Replies */}
        {replies.length > 0 && (
          <div className="mb-6">
            <h2 className="text-lg font-semibold text-neutral-900 mb-4 font-mono">
              Replies ({replies.length})
            </h2>
            
            <div className="space-y-4">
              {currentReplies.map((reply) => (
                <div key={reply.id} className="bg-white rounded-lg border border-neutral-200 p-4">
                  <div className="flex items-start space-x-3">
                    {/* Author Avatar */}
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 border border-neutral-200 rounded overflow-hidden bg-neutral-50">
                        {reply.author.oliveBranch?.svg && (
                          <div 
                            className="w-full h-full"
                            dangerouslySetInnerHTML={{ __html: reply.author.oliveBranch.svg }}
                          />
                        )}
                      </div>
                    </div>

                    <div className="flex-1 min-w-0">
                      <div className="flex items-center space-x-2 mb-2">
                        <span 
                          className="font-mono text-sm font-medium"
                          style={{ color: getRoleColor(reply.author.role) }}
                        >
                          {reply.author.username}
                        </span>
                        <span className="text-xs text-neutral-500 font-mono">
                          {formatTime(reply.createdAt)}
                        </span>
                      </div>

                      <p className="text-sm text-neutral-700 leading-relaxed whitespace-pre-wrap mb-3">
                        {reply.content}
                      </p>

                      {/* Reply Actions */}
                      <div className="flex items-center space-x-4">
                        <button
                          onClick={() => handleLike('reply', reply.id)}
                          disabled={!canPost()}
                          className={`flex items-center space-x-1 text-xs font-mono transition-colors duration-200 ${
                            canPost() && user && reply.likes.includes(user.username)
                              ? 'text-red-600 hover:text-red-700'
                              : 'text-neutral-500 hover:text-neutral-700'
                          } ${!canPost() ? 'cursor-not-allowed opacity-50' : ''}`}
                        >
                          <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clipRule="evenodd" />
                          </svg>
                          <span>{reply.likes.length}</span>
                        </button>
                        
                        <button
                          onClick={() => {
                            setReportTarget({ type: 'reply', id: reply.id });
                            setShowReportModal(true);
                          }}
                          className="text-xs font-mono text-neutral-500 hover:text-red-600 transition-colors duration-200"
                        >
                          Report
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
              <div className="flex items-center justify-center space-x-2 mt-6">
                <button
                  onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                  disabled={currentPage === 1}
                  className="px-3 py-1 text-sm font-mono border border-neutral-300 rounded disabled:opacity-50 disabled:cursor-not-allowed hover:bg-neutral-50"
                >
                  ‚Üê
                </button>
                
                <div className="flex space-x-1">
                  {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
                    <button
                      key={page}
                      onClick={() => setCurrentPage(page)}
                      className={`w-8 h-8 text-sm font-mono rounded ${
                        currentPage === page
                          ? 'bg-neutral-900 text-white'
                          : 'border border-neutral-300 hover:bg-neutral-50'
                      }`}
                    >
                      {page}
                    </button>
                  ))}
                </div>
                
                <button
                  onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                  disabled={currentPage === totalPages}
                  className="px-3 py-1 text-sm font-mono border border-neutral-300 rounded disabled:opacity-50 disabled:cursor-not-allowed hover:bg-neutral-50"
                >
                  ‚Üí
                </button>
              </div>
            )}
          </div>
        )}

        {/* Reply Form */}
        {canPost() && (
          <div className="bg-white rounded-lg border border-neutral-200 p-6">
            <h3 className="text-lg font-semibold text-neutral-900 mb-4 font-mono">Post Reply</h3>
            
            {submitError && (
              <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-md">
                <p className="text-sm text-red-700 font-mono">{submitError}</p>
              </div>
            )}

            <div className="space-y-4">
              <textarea
                value={newReply}
                onChange={(e) => setNewReply(e.target.value)}
                maxLength={5000}
                rows={6}
                className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm resize-vertical"
                placeholder="Share your thoughts, research findings, or contribute to the discussion..."
              />
              <div className="flex items-center justify-between">
                <p className="text-xs text-neutral-500 font-mono">
                  {newReply.length}/5,000 characters
                </p>
                <div className="flex items-center space-x-2">
                  {replyCooldownCounter && (
                    <div className="text-xs font-mono text-orange-600 bg-orange-50 px-2 py-1 rounded border border-orange-200">
                      {replyCooldownCounter}
                    </div>
                  )}
                  <button
                    onClick={handleReplySubmit}
                    disabled={isSubmitting || !newReply.trim() || newReply.trim().length < 3 || !canReplyNow()}
                    className="px-4 py-2 bg-neutral-900 text-white font-mono text-sm rounded hover:bg-neutral-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200 uppercase tracking-wide"
                  >
                    {isSubmitting ? 'Posting...' : 'Post Reply'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Back to Forum */}
        <div className="mt-8 text-center">
          <Link 
            href="/forum"
            className="text-neutral-600 hover:text-neutral-800 transition-colors duration-200 font-mono text-sm"
          >
            ‚Üê Back to Forum
          </Link>
        </div>
      </div>

      {/* Report Modal */}
      {showReportModal && reportTarget && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-md w-full">
            <div className="p-6 border-b border-neutral-200">
              <div className="flex items-center justify-between">
                <h2 className="text-lg font-semibold text-neutral-900 font-mono">
                  Report {reportTarget.type === 'thread' ? 'Thread' : 'Reply'}
                </h2>
                <button
                  onClick={() => {
                    setShowReportModal(false);
                    setReportTarget(null);
                    setReportReason('');
                  }}
                  className="p-2 text-neutral-400 hover:text-neutral-600 transition-colors duration-200"
                >
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>

            <div className="p-6">
              <div className="mb-4">
                <label className="block text-sm font-medium text-neutral-700 mb-2 font-mono uppercase">
                  Reason for Report
                </label>
                <select
                  value={reportReason}
                  onChange={(e) => setReportReason(e.target.value)}
                  className="w-full px-3 py-2 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent font-mono text-sm"
                >
                  <option value="">Select a reason...</option>
                  <option value="spam">Spam or repetitive content</option>
                  <option value="harassment">Harassment or bullying</option>
                  <option value="inappropriate">Inappropriate content</option>
                  <option value="misinformation">False or misleading information</option>
                  <option value="off-topic">Off-topic or irrelevant</option>
                  <option value="other">Other (contact moderators)</option>
                </select>
              </div>

              <div className="bg-yellow-50 border border-yellow-200 rounded-md p-3 mb-4">
                <p className="text-xs text-yellow-800 font-mono">
                  Reports are reviewed by moderators. False reports may result in account restrictions.
                </p>
              </div>

              <div className="flex space-x-3">
                <button
                  onClick={() => {
                    setShowReportModal(false);
                    setReportTarget(null);
                    setReportReason('');
                  }}
                  className="flex-1 px-4 py-2 bg-neutral-200 text-neutral-700 rounded font-mono text-sm hover:bg-neutral-300 transition-colors duration-200"
                >
                  Cancel
                </button>
                <button
                  onClick={handleReport}
                  disabled={!reportReason}
                  className="flex-1 px-4 py-2 bg-red-600 text-white rounded font-mono text-sm hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
                >
                  Submit Report
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// === END app/forum/[category]/[threadId]/page.tsx ===


============================================================
DIRECTORY: app/generate-olive-branch
============================================================

// === app/generate-olive-branch/page.tsx ===
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/lib/auth';
import { OLIVE_BRANCH_BG_COLOR } from '@/lib/oliveGenerator';

interface OliveBranchData {
  svg: string;
  colors: {
    olive: string;
    branch: string;
    leaf: string;
  };
  oliveCount: number;
  oliveType: string;
  id: number;
}

interface UserData {
  username: string;
  email: string;
  password: string;
  role: string;
  onset: string;
  isEmailVerified: boolean;
  registrationStep: string;
  accountCreated: string;
  deletionWarningDate?: string;
}

// Enhanced olive generation with rarity system
const OLIVE_RARITY_DATA = {
  counts: {
    1: { weight: 0.33, rarity: 'Common' },
    2: { weight: 0.28, rarity: 'Common' },
    3: { weight: 0.19, rarity: 'Uncommon' },
    4: { weight: 0.12, rarity: 'Rare' },
    5: { weight: 0.08, rarity: 'Very Rare' }
  },
  types: {
    greenOlives: { weight: 0.30, rarity: 'Common', displayName: 'Green Olives' },
    blackOlives: { weight: 0.25, rarity: 'Common', displayName: 'Black Olives' },
    brownOlives: { weight: 0.20, rarity: 'Uncommon', displayName: 'Brown Olives' },
    purpleOlives: { weight: 0.15, rarity: 'Rare', displayName: 'Purple Olives' },
    ripeMixed: { weight: 0.10, rarity: 'Very Rare', displayName: 'Mixed Ripe Olives' }
  }
};

const oliveColors = {
  greenOlives: ['#6B8E23', '#808000', '#9ACD32', '#7CFC00', '#ADFF2F'],
  blackOlives: ['#2F2F2F', '#404040', '#1C1C1C', '#36454F', '#28282B'],
  purpleOlives: ['#663399', '#4B0082', '#800080', '#9932CC', '#8B008B'],
  brownOlives: ['#8B4513', '#A0522D', '#CD853F', '#D2691E', '#BC9A6A'],
  ripeMixed: ['#6B8E23', '#2F2F2F', '#663399', '#8B4513']
};

const branchColors = {
  youngBranch: ['#8FBC8F', '#90EE90', '#98FB98', '#7CFC00'],
  matureBranch: ['#556B2F', '#6B8E23', '#808000', '#9ACD32'],
  brownBranch: ['#8B7355', '#A0522D', '#CD853F', '#DEB887'],
  silverBranch: ['#C0C0C0', '#D3D3D3', '#DCDCDC', '#F5F5F5']
};

const leafColors = {
  freshLeaves: ['#228B22', '#32CD32', '#00FF00', '#7CFC00'],
  matureLeaves: ['#006400', '#228B22', '#2E8B57', '#3CB371'],
  silverLeaves: ['#9ACD32', '#C0C0C0', '#D3D3D3', '#E6E6FA'],
  dryLeaves: ['#6B8E23', '#808000', '#BDB76B', '#F0E68C']
};

function getRandomColor(colorArray: string[]): string {
  return colorArray[Math.floor(Math.random() * colorArray.length)];
}

// Weighted random selection
function weightedRandomSelection(items: any): string {
  const totalWeight = Object.values(items).reduce((sum: number, item: any) => sum + item.weight, 0);
  let random = Math.random() * totalWeight;
  
  for (const [key, item] of Object.entries(items)) {
    random -= (item as any).weight;
    if (random <= 0) return key;
  }
  
  return Object.keys(items)[0]; // fallback
}

function generateOliveCount(): number {
  const selectedKey = weightedRandomSelection(OLIVE_RARITY_DATA.counts);
  return parseInt(selectedKey);
}

function generateOliveType(): string {
  return weightedRandomSelection(OLIVE_RARITY_DATA.types);
}

function getRandomOliveColor(oliveType: string): string {
  const colors = oliveColors[oliveType as keyof typeof oliveColors];
  return getRandomColor(colors);
}

function getRandomBranchColor(): string {
  const palettes = Object.values(branchColors);
  const randomPalette = palettes[Math.floor(Math.random() * palettes.length)];
  return getRandomColor(randomPalette);
}

function getRandomLeafColor(): string {
  const palettes = Object.values(leafColors);
  const randomPalette = palettes[Math.floor(Math.random() * palettes.length)];
  return getRandomColor(randomPalette);
}

function generateOlivePositions(count: number): Array<{x: number, y: number}> {
  const possiblePositions = [
    { x: 20, y: 32 }, { x: 40, y: 42 }, { x: 26, y: 49 }, 
    { x: 48, y: 35 }, { x: 22, y: 45 }
  ];
  const shuffled = possiblePositions.sort(() => 0.5 - Math.random());
  return shuffled.slice(0, count);
}

function createSystematicOliveBranch(): OliveBranchData {
  const oliveType = generateOliveType();
  const oliveColor = getRandomOliveColor(oliveType);
  const branchColor = getRandomBranchColor();
  const leafColor = getRandomLeafColor();
  const bgColor = `${OLIVE_BRANCH_BG_COLOR}`;
  const oliveCount = generateOliveCount();
  const olivePositions = generateOlivePositions(oliveCount);

  let oliveElements = '';
  olivePositions.forEach(pos => {
    oliveElements += `<rect x="${pos.x}" y="${pos.y}" width="4" height="4" fill="${oliveColor}"/>`;
  });

  const svg = `<svg width="100%" height="100%" viewBox="0 0 70 70" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="70" height="70" fill="${bgColor}"/>
<!-- Main Stem -->
<rect x="33" y="20" width="4" height="30" fill="${branchColor}"/>
<!-- Branches -->
<rect x="24" y="27" width="12" height="4" fill="${branchColor}"/>
<rect x="34" y="37" width="12" height="4" fill="${branchColor}"/>
<rect x="24" y="44" width="12" height="4" fill="${branchColor}"/>
<!-- Leaves -->
<rect x="18" y="25" width="8" height="4" fill="${leafColor}"/>
<rect x="20" y="29" width="8" height="4" fill="${leafColor}"/>
<rect x="42" y="35" width="8" height="4" fill="${leafColor}"/>
<rect x="44" y="39" width="8" height="4" fill="${leafColor}"/>
<rect x="18" y="42" width="8" height="4" fill="${leafColor}"/>
<rect x="20" y="46" width="8" height="4" fill="${leafColor}"/>
<!-- Olives -->
${oliveElements}
</svg>`;

  return {
    svg: svg,
    colors: { olive: oliveColor, branch: branchColor, leaf: leafColor },
    oliveCount: oliveCount,
    oliveType: OLIVE_RARITY_DATA.types[oliveType as keyof typeof OLIVE_RARITY_DATA.types].displayName,
    id: Date.now() + Math.random()
  };
}

function calculateRarity(oliveCount: number, oliveType: string) {
  const countRarity = OLIVE_RARITY_DATA.counts[oliveCount as keyof typeof OLIVE_RARITY_DATA.counts];
  const typeRarity = OLIVE_RARITY_DATA.types[oliveType as keyof typeof OLIVE_RARITY_DATA.types];
  
  return {
    count: countRarity.rarity,
    type: typeRarity.rarity,
    countPercentage: Math.round(countRarity.weight * 100),
    typePercentage: Math.round(typeRarity.weight * 100)
  };
}

export default function GenerateOliveBranchPage() {
  const router = useRouter();
  const { login } = useAuth();
  const [userData, setUserData] = useState<UserData | null>(null);
  const [currentBranch, setCurrentBranch] = useState<OliveBranchData | null>(null);
  const [generationsUsed, setGenerationsUsed] = useState(0);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isConfirming, setIsConfirming] = useState(false);
  const [showDescription, setShowDescription] = useState(1);
  
  const maxGenerations = 3;

  useEffect(() => {
    // Check for verified user data
    const verifiedUser = localStorage.getItem('galwayUserVerified');
    const pendingUser = localStorage.getItem('galwayUserPending');
    
    if (verifiedUser) {
      setUserData(JSON.parse(verifiedUser));
    } else if (pendingUser) {
      setUserData(JSON.parse(pendingUser));
    } else {
      router.push('/register');
    }
  }, [router]);

  const handleGenerate = async () => {
    if (generationsUsed >= maxGenerations || isGenerating) return;
    
    setIsGenerating(true);
    
    // Simulate generation delay for better UX
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    const newBranch = createSystematicOliveBranch();
    setCurrentBranch(newBranch);
    setGenerationsUsed(prev => prev + 1);
    setIsGenerating(false);
  };

  const handleRegenerate = async () => {
    if (generationsUsed >= maxGenerations) return;
    
    setCurrentBranch(null);
    await handleGenerate();
  };

  const handleConfirm = async () => {
    if (!currentBranch || !userData || isConfirming) return;
    
    setIsConfirming(true);
    
    // Simulate confirmation processing
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Determine olive type key for rarity calculation
    const oliveTypeKey = Object.keys(OLIVE_RARITY_DATA.types).find(key => 
      OLIVE_RARITY_DATA.types[key as keyof typeof OLIVE_RARITY_DATA.types].displayName === currentBranch.oliveType
    ) || 'greenOlives';
    
    // Calculate rarity
    const rarity = calculateRarity(currentBranch.oliveCount, oliveTypeKey);
    
    // Create inventory item
    const branchInventoryItem = {
      id: `branch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type: 'branch' as const,
      data: currentBranch,
      createdAt: new Date().toISOString(),
      rarity: rarity
    };
    
    // Create final user data with olive branch
    const finalUserData = {
      username: userData.username,
      email: userData.email,
      role: userData.role as 'operative',
      roles: ['operative'],
      onset: userData.onset,
      idNo: Math.floor(100000 + Math.random() * 900000).toString(),
      bio: 'New operative. Studies pending assignment...',
      isEmailVerified: userData.isEmailVerified,
      oliveBranch: currentBranch,
      inventory: [branchInventoryItem],
      activeOliveBranchId: branchInventoryItem.id,
      registrationComplete: true,
      twoFactor: {
        sms: { enabled: false },
        email: { enabled: false }
      }
    };
    
    // Clean up temporary storage
    localStorage.removeItem('galwayUserVerified');
    localStorage.removeItem('galwayUserPending');
    
    // Log the user in with complete profile
    login({
      username: finalUserData.username,
      role: finalUserData.role,
      onset: finalUserData.onset,
      idNo: finalUserData.idNo,
      bio: finalUserData.bio,
      oliveBranch: currentBranch
    });
    
    // Store complete user data
    localStorage.setItem('galwayUser', JSON.stringify(finalUserData));
    
    // Redirect to homepage (now logged in)
    router.push('/');
  };

  const renderCounterDots = () => {
    return Array.from({ length: maxGenerations }, (_, index) => (
      <div
        key={index}
        className={`w-2 h-2 rounded-full transition-all duration-300 ${
          index < generationsUsed 
            ? 'bg-neutral-400' 
            : 'bg-green-600'
        }`}
      />
    ));
  };

  if (!userData) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-2 border-neutral-300 border-t-neutral-900 rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-neutral-600 font-mono animate-pulse text-sm uppercase">loading botanical protocol...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white">
      <div className="flex items-center justify-center p-4 pt-8 min-h-screen">
        <div className="max-w-2xl mx-auto w-full">
          <div className="bg-white rounded-lg p-6 border border-neutral-200 shadow-sm">
            {/* Description Toggle */}
            <h1 className="text-xl font-mono font-bold text-black mb-6 uppercase tracking-wide">
              Botanical Signature Protocol
            </h1>
            <div className="mb-6">
              <div className="text-sm font-mono text-neutral-700 leading-relaxed mb-4 min-h-[80px] flex items-center text-left">
                {showDescription === 1 ? (
                  <p>
                      This system generates <strong>unique</strong> Botanical Signatures using randomized olive branch elements.
                      Each operative receives a uniquely generated visual signature that authenticates their account across the platform.
                      We've provided one <strong>free seed</strong>, granting you three chances to plant a uniquely generated branch. Each generation is distinct.
                  </p>
                ) : (
                  <p>
                     Additional seeds may be earned through memberships and events, or purchased through our CATALOG to generate further branches. The moment one speaks to you, confirm it.
                    Follow your eyes and your judgment.
                  </p>
                )}
              </div>
              
              <div className="flex justify-center space-x-2">
                <button
                  onClick={() => setShowDescription(1)}
                  className={`w-8 h-8 text-xs font-mono border transition-all duration-200 ${
                    showDescription === 1
                      ? 'bg-black text-white border-black'
                      : 'bg-white text-neutral-600 border-neutral-300 hover:border-black hover:text-black'
                  }`}
                >
                  1
                </button>
                <button
                  onClick={() => setShowDescription(2)}
                  className={`w-8 h-8 text-xs font-mono border transition-all duration-200 ${
                    showDescription === 2
                      ? 'bg-black text-white border-black'
                      : 'bg-white text-neutral-600 border-neutral-300 hover:border-black hover:text-black'
                  }`}
                >
                  2
                </button>
              </div>
            </div>

            {/* Generation Parameters */}
            <div className="mb-6 text-xs font-mono text-neutral-600 text-left">
              <h3 className="text-black font-normal mb-3 uppercase tracking-wide text-sm">Generation Parameters</h3>
              <ul className="space-y-1 leading-relaxed list-none">
                <li className="relative pl-4 uppercase">
                  <span className="absolute left-0 text-green-600">‚Ä¢</span>
                  1‚Äì5 olives, algorithmically positioned
                </li>
                <li className="relative pl-4 uppercase">
                  <span className="absolute left-0 text-green-600">‚Ä¢</span>
                  coloration based on observed phenotypes
                </li>
                <li className="relative pl-4 uppercase">
                  <span className="absolute left-0 text-green-600">‚Ä¢</span>
                  branch/leaf tones sampled from natural pigments
                </li>
                <li className="relative pl-4 uppercase">
                  <span className="absolute left-0 text-green-600">‚Ä¢</span>
                  Up-to 3 <strong>free</strong> generation chances
                </li>
              </ul>
            </div>

            {/* Preview Area */}
            <div className="relative bg-neutral-50 border border-neutral-200 rounded-lg p-8 mb-6 min-h-[200px] flex items-center justify-center overflow-hidden">
              {/* Generation overlay */}
              {isGenerating && (
                <div className="absolute inset-0 bg-white/90 rounded-lg flex items-center justify-center z-10">
                  <div className="text-center">
                    <div className="text-sm font-mono text-neutral-600 animate-pulse uppercase">
                      cultivating botanical signature...
                    </div>
                  </div>
                </div>
              )}
              
              {!currentBranch && !isGenerating && (
                <div className="text-center text-neutral-500">
                  <p className="text-sm font-mono uppercase">
                    branch preview will appear here upon generation
                  </p>
                </div>
              )}
              
              {currentBranch && !isGenerating && (
                <div className="text-center">
                  <div className="relative group">
                    <div 
                      className="w-24 h-24 mx-auto mb-4 rounded-lg overflow-hidden border border-neutral-200 bg-white hover:scale-105 transition-transform duration-300"
                      dangerouslySetInnerHTML={{ __html: currentBranch.svg }}
                    />
                  </div>
                  
                  <div className="text-xs font-mono text-black leading-relaxed space-y-2 text-left uppercase">
                    {/* Olive count with color cube */}
                    <div className="flex items-center space-x-2">
                      <div className="w-3 h-3 border border-neutral-300 bg-black"></div>
                      <p>COUNT: {currentBranch.oliveCount} olive{currentBranch.oliveCount !== 1 ? 's' : ''}</p>
                    </div>
                    
                    {/* Fruit pigmentation */}
                    <div className="flex items-center space-x-2">
                      <div className="w-3 h-3 border border-neutral-300" style={{ backgroundColor: currentBranch.colors.olive }}></div>
                      <p>fruit: {currentBranch.colors.olive}</p>
                    </div>
                    
                    {/* Stem pigmentation */}
                    <div className="flex items-center space-x-2">
                      <div className="w-3 h-3 border border-neutral-300" style={{ backgroundColor: currentBranch.colors.branch }}></div>
                      <p>stem: {currentBranch.colors.branch}</p>
                    </div>
                    
                    {/* Foliage pigmentation */}
                    <div className="flex items-center space-x-2">
                      <div className="w-3 h-3 border border-neutral-300" style={{ backgroundColor: currentBranch.colors.leaf }}></div>
                      <p>foliage: {currentBranch.colors.leaf}</p>
                    </div>
                    
                    {/* Botanical ID */}
                    <div className="pt-1">
                      <p className="text-neutral-500 uppercase">botanical id: #{currentBranch.id.toString().slice(-6)}</p>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Generation Counter */}
            <div className="flex items-center justify-center space-x-4 mb-6">
              <span className="text-sm font-mono text-neutral-600 uppercase">seeds remaining:</span>
              <div className="flex space-x-1">
                {renderCounterDots()}
              </div>
            </div>

            {/* Action Buttons */}
            <div className="flex flex-col sm:flex-row gap-3">
              {!currentBranch ? (
                <button
                  onClick={handleGenerate}
                  disabled={generationsUsed >= maxGenerations || isGenerating}
                  className={`flex-1 py-3 px-6 font-mono text-sm uppercase tracking-wide transition-all duration-200 border-2 ${
                    generationsUsed < maxGenerations && !isGenerating
                      ? 'bg-white text-black border-black hover:bg-black hover:text-white'
                      : 'bg-neutral-200 text-neutral-500 border-neutral-200 cursor-not-allowed'
                  }`}
                >
                  {isGenerating ? 'cultivating...' : 'plant'}
                </button>
              ) : (
                <>
                  {generationsUsed < maxGenerations && (
                    <button
                      onClick={handleRegenerate}
                      disabled={isGenerating || isConfirming}
                      className="flex-1 py-3 px-6 font-mono text-sm uppercase tracking-wide transition-all duration-200 border-2 bg-white text-neutral-700 border-neutral-300 hover:bg-neutral-100 hover:border-neutral-400 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      re-plant
                    </button>
                  )}
                  <button
                    onClick={handleConfirm}
                    disabled={isGenerating || isConfirming}
                    className={`flex-1 py-3 px-6 font-mono text-sm uppercase tracking-wide transition-all duration-200 border-2 ${
                      !isConfirming
                        ? 'bg-white text-black border-black hover:bg-black hover:text-white'
                        : 'bg-black text-white border-black cursor-wait'
                    }`}
                  >
                    {isConfirming ? 'harvesting signature...' : 'confirm signature'}
                  </button>
                </>
              )}
            </div>

            {/* Exhausted generations warning */}
            {generationsUsed >= maxGenerations && !currentBranch && (
              <div className="mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-md">
                <div className="flex items-start space-x-2">
                  <svg className="w-4 h-4 text-yellow-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 18.5c-.77.833.192 2.5 1.732 2.5z" />
                  </svg>
                  <div>
                    <p className="text-sm font-mono text-yellow-800 font-medium lowercase">
                      All generations exhausted
                    </p>
                    <p className="text-sm font-mono text-yellow-700 mt-1 lowercase">
                      Contact institute administration for assistance or restart registration process.
                    </p>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Footer */}
          <div className="text-center mt-8">
          </div>
        </div>
      </div>
    </div>
  );
}

// === END app/generate-olive-branch/page.tsx ===


============================================================
DIRECTORY: app/institute
============================================================

// === app/institute/page.tsx ===
'use client';

import Link from 'next/link';
import { useState } from 'react';

interface TimelineEvent {
  year: string;
  title: string;
  description: string;
}

interface ResearchArea {
  title: string;
  description: string;
  icon: string;
}

interface TeamMember {
  name: string;
  role: string;
  department: string;
  bio: string;
}

export default function InstitutePage() {
  const [activeSection, setActiveSection] = useState<'overview' | 'history' | 'research' | 'team' | 'mission'>('overview');

  const timelineEvents: TimelineEvent[] = [
    {
      year: "1987",
      title: "Foundation",
      description: "Established as an independent research facility focusing on botanical and temporal studies in rural Ireland."
    },
    {
      year: "1993",
      title: "Digital Archives",
      description: "First implementation of digital record-keeping systems for field research data."
    },
    {
      year: "2001",
      title: "Expansion",
      description: "Construction of the Advanced Botanical Laboratory and expansion of field research capabilities."
    },
    {
      year: "2008",
      title: "Recognition",
      description: "Received international recognition for contributions to environmental research methodologies."
    },
    {
      year: "2015",
      title: "Network Integration",
      description: "Launch of collaborative research network connecting field operatives across multiple continents."
    },
    {
      year: "2023",
      title: "Digital Platform",
      description: "Implementation of comprehensive digital platform for research coordination and data sharing."
    }
  ];

  const researchAreas: ResearchArea[] = [
    {
      title: "Botanical Documentation",
      description: "Systematic cataloging and analysis of plant specimens with focus on environmental adaptation patterns.",
      icon: "üå±"
    },
    {
      title: "Field Research Methodology",
      description: "Development of evidence-based protocols for environmental data collection and analysis.",
      icon: "üî¨"
    },
    {
      title: "Temporal Data Analysis",
      description: "Long-term environmental monitoring and pattern recognition across multiple temporal scales.",
      icon: "üìä"
    },
    {
      title: "Collaborative Networks",
      description: "Coordination of distributed research teams and standardization of research protocols.",
      icon: "üåê"
    }
  ];

  const teamMembers: TeamMember[] = [
    {
      name: "Dr. Eleanor Fitzgerald",
      role: "Director of Research",
      department: "Administration",
      bio: "Leading environmental research for over 25 years, specializing in ecosystem adaptation studies."
    },
    {
      name: "Prof. Marcus Chen",
      role: "Head of Field Operations",
      department: "Field Research",
      bio: "Coordinates global research network with expertise in botanical documentation protocols."
    },
    {
      name: "Dr. Sarah O'Brien",
      role: "Data Systems Manager",
      department: "Technical",
      bio: "Develops and maintains digital infrastructure for research data management and analysis."
    },
    {
      name: "Dr. James Murphy",
      role: "Senior Researcher",
      department: "Research",
      bio: "Environmental scientist with focus on long-term ecological monitoring and pattern analysis."
    }
  ];

  const sections = [
    { id: 'overview' as const, name: 'Overview' },
    { id: 'history' as const, name: 'History' },
    { id: 'research' as const, name: 'Research' },
    { id: 'team' as const, name: 'Team' },
    { id: 'mission' as const, name: 'Mission' }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150 relative overflow-hidden">
      {/* Background pattern */}
      <div className="absolute inset-0 opacity-[0.02]">
        <div className="absolute inset-0" style={{
          backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23000000' fill-opacity='0.4'%3E%3Ccircle cx='7' cy='7' r='1'/%3E%3Ccircle cx='53' cy='53' r='1'/%3E%3Ccircle cx='30' cy='30' r='1'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`,
        }} />
      </div>

      <div className="relative z-10 max-w-6xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-semibold text-neutral-900 mb-4 leading-tight">
            Galway Research Institute
          </h1>
          <p className="text-lg text-neutral-600 font-mono leading-relaxed max-w-3xl mx-auto">
            Field-tested research. Evidence-based iteration.
          </p>
          <div className="mt-6 text-sm text-neutral-500 font-mono">
            Independent Research Facility ‚Ä¢ Established 2018 ‚Ä¢ Canada
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="bg-white rounded-lg shadow-lg border border-neutral-200 mb-8">
          <div className="flex flex-wrap border-b border-neutral-200">
            {sections.map((section) => (
              <button
                key={section.id}
                onClick={() => setActiveSection(section.id)}
                className={`px-6 py-4 font-mono text-sm uppercase tracking-wide transition-all duration-200 border-b-2 ${
                  activeSection === section.id
                    ? 'border-neutral-900 text-neutral-900 bg-neutral-50'
                    : 'border-transparent text-neutral-600 hover:text-neutral-900 hover:bg-neutral-50'
                }`}
              >
                {section.name}
              </button>
            ))}
          </div>

          <div className="p-8">
            {/* Overview Section */}
            {activeSection === 'overview' && (
              <div className="space-y-8">
                <div>
                  <h2 className="text-2xl font-semibold text-neutral-900 mb-4 font-mono">About the Institute</h2>
                  <div className="prose prose-neutral max-w-none">
                    <p className="text-neutral-700 leading-relaxed mb-4">
                      The Galway Research Institute operates as an independent research facility dedicated to 
                      environmental studies, botanical documentation, and field research methodology development. 
                      Established in 1987, we maintain a commitment to rigorous scientific standards and 
                      evidence-based research practices.
                    </p>
                    <p className="text-neutral-700 leading-relaxed mb-4">
                      Our work focuses on long-term environmental monitoring, systematic botanical cataloging, 
                      and the development of collaborative research networks. We prioritize field-tested methodologies 
                      and maintain extensive databases of environmental data collected across multiple continents.
                    </p>
                    <p className="text-neutral-700 leading-relaxed">
                      The Institute operates with a distributed network of field operatives and researchers, 
                      coordinating efforts through our digital platform to ensure consistent data collection 
                      standards and collaborative analysis capabilities.
                    </p>
                  </div>
                </div>

                {/* Quick Stats */}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-6 pt-6 border-t border-neutral-200">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-neutral-900 font-mono">36+</div>
                    <div className="text-sm text-neutral-600 font-mono">Years of Research</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-neutral-900 font-mono">15k+</div>
                    <div className="text-sm text-neutral-600 font-mono">Documented Specimens</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-neutral-900 font-mono">200+</div>
                    <div className="text-sm text-neutral-600 font-mono">Active Operatives</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-neutral-900 font-mono">12</div>
                    <div className="text-sm text-neutral-600 font-mono">Countries</div>
                  </div>
                </div>
              </div>
            )}

            {/* History Section */}
            {activeSection === 'history' && (
              <div>
                <h2 className="text-2xl font-semibold text-neutral-900 mb-6 font-mono">Institute Timeline</h2>
                <div className="space-y-6">
                  {timelineEvents.map((event, index) => (
                    <div key={index} className="flex">
                      <div className="flex-shrink-0 w-20">
                        <div className="text-lg font-bold text-neutral-900 font-mono">{event.year}</div>
                      </div>
                      <div className="flex-1 ml-6">
                        <h3 className="text-lg font-semibold text-neutral-900 mb-2">{event.title}</h3>
                        <p className="text-neutral-700 leading-relaxed">{event.description}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Research Section */}
            {activeSection === 'research' && (
              <div>
                <h2 className="text-2xl font-semibold text-neutral-900 mb-6 font-mono">Research Areas</h2>
                <div className="grid md:grid-cols-2 gap-6">
                  {researchAreas.map((area, index) => (
                    <div key={index} className="bg-neutral-50 rounded-lg p-6 border border-neutral-200">
                      <div className="flex items-start space-x-4">
                        <div className="text-2xl">{area.icon}</div>
                        <div>
                          <h3 className="text-lg font-semibold text-neutral-900 mb-2">{area.title}</h3>
                          <p className="text-neutral-700 leading-relaxed text-sm">{area.description}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                <div className="mt-8 pt-6 border-t border-neutral-200">
                  <h3 className="text-lg font-semibold text-neutral-900 mb-4 font-mono">Current Projects</h3>
                  <div className="space-y-4">
                    <div className="bg-white rounded p-4 border border-neutral-200">
                      <h4 className="font-medium text-neutral-900 mb-2">Global Botanical Network Expansion</h4>
                      <p className="text-sm text-neutral-700">Coordinating research efforts across 12 countries to establish standardized botanical documentation protocols.</p>
                    </div>
                    <div className="bg-white rounded p-4 border border-neutral-200">
                      <h4 className="font-medium text-neutral-900 mb-2">Long-term Environmental Monitoring</h4>
                      <p className="text-sm text-neutral-700">35-year longitudinal study tracking environmental changes and ecosystem adaptation patterns.</p>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Team Section */}
            {activeSection === 'team' && (
              <div>
                <h2 className="text-2xl font-semibold text-neutral-900 mb-6 font-mono">Leadership Team</h2>
                <div className="grid md:grid-cols-2 gap-6">
                  {teamMembers.map((member, index) => (
                    <div key={index} className="bg-white rounded-lg p-6 border border-neutral-200">
                      <div className="mb-4">
                        <h3 className="text-lg font-semibold text-neutral-900">{member.name}</h3>
                        <div className="text-sm text-neutral-600 font-mono">{member.role}</div>
                        <div className="text-xs text-neutral-500 font-mono">{member.department}</div>
                      </div>
                      <p className="text-sm text-neutral-700 leading-relaxed">{member.bio}</p>
                    </div>
                  ))}
                </div>

                <div className="mt-8 pt-6 border-t border-neutral-200">
                  <h3 className="text-lg font-semibold text-neutral-900 mb-4 font-mono">Join Our Team</h3>
                  <p className="text-neutral-700 mb-4">
                    We regularly seek qualified researchers and field operatives to join our distributed research network. 
                    Positions range from field data collection to laboratory analysis and systems coordination.
                  </p>
                  <Link 
                    href="/correspondence"
                    className="inline-block px-6 py-3 bg-neutral-900 text-white font-mono text-sm uppercase tracking-wide hover:bg-neutral-700 transition-colors duration-200"
                  >
                    Contact Us About Opportunities
                  </Link>
                </div>
              </div>
            )}

            {/* Mission Section */}
            {activeSection === 'mission' && (
              <div className="space-y-8">
                <div>
                  <h2 className="text-2xl font-semibold text-neutral-900 mb-4 font-mono">Mission Statement</h2>
                  <div className="bg-neutral-50 rounded-lg p-6 border border-neutral-200">
                    <p className="text-lg text-neutral-700 leading-relaxed font-mono italic">
                      "To advance environmental understanding through rigorous field research, systematic documentation, 
                      and collaborative scientific methodology, while maintaining the highest standards of data integrity 
                      and research transparency."
                    </p>
                  </div>
                </div>

                <div>
                  <h3 className="text-xl font-semibold text-neutral-900 mb-4 font-mono">Core Values</h3>
                  <div className="grid md:grid-cols-3 gap-6">
                    <div className="text-center">
                      <div className="w-16 h-16 bg-neutral-200 rounded-full flex items-center justify-center mx-auto mb-4">
                        <span className="text-2xl">üî¨</span>
                      </div>
                      <h4 className="font-semibold text-neutral-900 mb-2">Scientific Rigor</h4>
                      <p className="text-sm text-neutral-700">Evidence-based methodology and peer-reviewed standards.</p>
                    </div>
                    <div className="text-center">
                      <div className="w-16 h-16 bg-neutral-200 rounded-full flex items-center justify-center mx-auto mb-4">
                        <span className="text-2xl">üåç</span>
                      </div>
                      <h4 className="font-semibold text-neutral-900 mb-2">Global Collaboration</h4>
                      <p className="text-sm text-neutral-700">Coordinated international research networks.</p>
                    </div>
                    <div className="text-center">
                      <div className="w-16 h-16 bg-neutral-200 rounded-full flex items-center justify-center mx-auto mb-4">
                        <span className="text-2xl">üìö</span>
                      </div>
                      <h4 className="font-semibold text-neutral-900 mb-2">Data Integrity</h4>
                      <p className="text-sm text-neutral-700">Transparent documentation and open research practices.</p>
                    </div>
                  </div>
                </div>

                <div>
                  <h3 className="text-xl font-semibold text-neutral-900 mb-4 font-mono">Research Philosophy</h3>
                  <div className="prose prose-neutral max-w-none">
                    <p className="text-neutral-700 leading-relaxed mb-4">
                      Our approach emphasizes long-term perspective and systematic methodology. We believe that 
                      meaningful environmental research requires sustained observation, careful documentation, 
                      and collaborative analysis across multiple temporal and geographical scales.
                    </p>
                    <p className="text-neutral-700 leading-relaxed">
                      We prioritize field-tested approaches over theoretical models, while maintaining rigorous 
                      standards for data collection and analysis. Our work contributes to broader scientific 
                      understanding while serving practical applications in environmental monitoring and conservation.
                    </p>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Contact Section */}
        <div className="bg-white rounded-lg p-6 border border-neutral-200 text-center">
          <h3 className="text-lg font-semibold text-neutral-900 mb-4 font-mono">Contact the Institute</h3>
          <p className="text-neutral-700 mb-4">
            For research inquiries, collaboration proposals, or general information about our work.
          </p>
          <div className="flex flex-col sm:flex-row gap-3 justify-center">
            <Link
              href="/correspondence"
              className="px-6 py-3 bg-transparent text-neutral-900 font-mono text-sm uppercase tracking-wide hover:bg-neutral-900 hover:text-white transition-all duration-200 border-2 border-neutral-300 hover:border-neutral-900"
            >
              Send Message
            </Link>
            <Link
              href="/"
              className="px-6 py-3 bg-neutral-100 text-neutral-700 font-mono text-sm uppercase tracking-wide hover:bg-neutral-200 transition-all duration-200 border-2 border-neutral-200"
            >
              Return Home
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}

// === END app/institute/page.tsx ===


============================================================
DIRECTORY: app/inventory
============================================================

// === app/inventory/page.tsx ===
'use client';

import { useState, useEffect } from 'react';
import { useAuth } from '@/lib/auth';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { generateOliveBranch } from '@/lib/oliveGenerator';
import { OLIVE_BRANCH_BG_COLOR } from '@/lib/oliveGenerator';

interface InventoryItem {
  id: string;
  type: 'seed' | 'branch';
  data?: any; // For olive branch data
  createdAt: string;
  quantity?: number; // For stacking seeds
  rarity?: {
    count: string;
    type: string;
    countPercentage: number;
    typePercentage: number;
  };
}

interface UserData {
  username: string;
  email: string;
  role: string;
  onset: string;
  idNo: string;
  bio: string;
  isEmailVerified: boolean;
  oliveBranch?: any;
  activeOliveBranchId?: string;
  inventory?: InventoryItem[];
  seedCount?: number;
}

type SortType = 'newest' | 'oldest' | 'rarity';

const ITEMS_PER_PAGE = 16; // 4x4 grid
const MAX_PAGES = 5;
const MAX_ITEMS = 80;

// Generic seed SVG
const SEED_SVG = `<svg width="100%" height="100%" viewBox="0 0 70 70" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="70" height="70" fill="${OLIVE_BRANCH_BG_COLOR}"/>
<!-- Seed cluster -->
<rect x="28" y="28" width="4" height="4" fill="#D2B48C"/>
<rect x="32" y="30" width="4" height="4" fill="#CD853F"/>
<rect x="36" y="32" width="4" height="4" fill="#DEB887"/>
<rect x="30" y="34" width="4" height="4" fill="#F5DEB3"/>
<rect x="34" y="36" width="4" height="4" fill="#D2B48C"/>
<rect x="38" y="34" width="4" height="4" fill="#CD853F"/>
</svg>`;

export default function InventoryPage() {
  const { isLoggedIn, user } = useAuth();
  const router = useRouter();
  
  const [userData, setUserData] = useState<UserData | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [sortType, setSortType] = useState<SortType>('newest');
  const [isPlanting, setIsPlanting] = useState(false);
  const [showPlantModal, setShowPlantModal] = useState(false);
  const [plantingBranch, setPlantingBranch] = useState<any>(null);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [itemToDelete, setItemToDelete] = useState<string | null>(null);
  const [deleteQuantity, setDeleteQuantity] = useState(1);
  const [maxDeleteQuantity, setMaxDeleteQuantity] = useState(1);

  // Load user data
  useEffect(() => {
    if (!isLoggedIn) {
      router.push('/login');
      return;
    }

    const storedUser = localStorage.getItem('galwayUser');
    if (storedUser) {
      try {
        const parsed = JSON.parse(storedUser);
        // Demo: Add registration branch to inventory if none exist
        if (!parsed.inventory || parsed.inventory.length === 0) {
          const inventoryItems: InventoryItem[] = [];
          
          // Add registration olive branch if it exists
          if (parsed.oliveBranch) {
            const registrationBranch: InventoryItem = {
              id: parsed.activeOliveBranchId || `branch_registration_${Date.now()}`,
              type: 'branch',
              data: parsed.oliveBranch,
              createdAt: new Date(parsed.accountCreated || Date.now()).toISOString(),
              rarity: parsed.oliveBranch.rarity
            };
            inventoryItems.push(registrationBranch);
            
            // Set active branch ID if not set
            if (!parsed.activeOliveBranchId) {
              parsed.activeOliveBranchId = registrationBranch.id;
            }
          }
          
          parsed.inventory = inventoryItems;
          parsed.seedCount = 0;
          localStorage.setItem('galwayUser', JSON.stringify(parsed));
        }
        
        // Ensure seedCount matches actual seed quantity in inventory
        const seedItem = parsed.inventory?.find((item: InventoryItem) => item.type === 'seed');
        if (seedItem && seedItem.quantity) {
          parsed.seedCount = seedItem.quantity;
        }
        
        setUserData(parsed);
      } catch (error) {
        console.error('Failed to parse user data:', error);
      }
    }
  }, [isLoggedIn, router]);

  // Get inventory items with sorting
  const getSortedInventory = (): InventoryItem[] => {
    if (!userData?.inventory) return [];
    
    let items = [...userData.inventory];
    
    switch (sortType) {
      case 'newest':
        items.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
        break;
      case 'oldest':
        items.sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());
        break;
      case 'rarity':
        const rarityOrder = { 'Very Rare': 4, 'Rare': 3, 'Uncommon': 2, 'Common': 1 };
        items.sort((a, b) => {
          if (a.type === 'seed' && b.type !== 'seed') return -1;
          if (b.type === 'seed' && a.type !== 'seed') return 1;
          if (a.type === 'seed' && b.type === 'seed') return 0;
          
          const aRarity = a.rarity ? (rarityOrder[a.rarity.count as keyof typeof rarityOrder] || 0) : 0;
          const bRarity = b.rarity ? (rarityOrder[b.rarity.count as keyof typeof rarityOrder] || 0) : 0;
          return bRarity - aRarity;
        });
        break;
    }
    
    // Always put seeds first regardless of sort
    const seeds = items.filter(item => item.type === 'seed');
    const branches = items.filter(item => item.type === 'branch');
    
    return [...seeds, ...branches];
  };

  // Paginate items
  const getPaginatedItems = () => {
    const sorted = getSortedInventory();
    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
    const endIndex = startIndex + ITEMS_PER_PAGE;
    return sorted.slice(startIndex, endIndex);
  };

  // Get total pages needed
  const getTotalPages = () => {
    const totalItems = userData?.inventory?.length || 0;
    return Math.min(Math.ceil(totalItems / ITEMS_PER_PAGE), MAX_PAGES);
  };

  // Plant seed function
  const handlePlantSeed = async () => {
    if (!userData || isPlanting) return;
    
    setIsPlanting(true);
    
    try {
      // Generate new olive branch
      await new Promise(resolve => setTimeout(resolve, 2000));
      const newBranch = generateOliveBranch();
      
      // Create new inventory item
      const newItem: InventoryItem = {
        id: `branch_${Date.now()}`,
        type: 'branch',
        data: newBranch,
        createdAt: new Date().toISOString(),
        rarity: newBranch.rarity
      };
      
      // Update seed stack or remove if quantity becomes 0
      const currentInventory = userData.inventory || [];
      const seedIndex = currentInventory.findIndex(item => item.type === 'seed');
      
      let updatedInventory;
      if (seedIndex !== -1) {
        const seedStack = currentInventory[seedIndex];
        const newQuantity = (seedStack.quantity || 1) - 1;
        
        if (newQuantity > 0) {
          // Update seed stack quantity
          updatedInventory = [
            ...currentInventory.slice(0, seedIndex),
            { ...seedStack, quantity: newQuantity },
            ...currentInventory.slice(seedIndex + 1),
            newItem
          ];
        } else {
          // Remove seed stack if quantity reaches 0
          updatedInventory = [
            ...currentInventory.slice(0, seedIndex),
            ...currentInventory.slice(seedIndex + 1),
            newItem
          ];
        }
      } else {
        updatedInventory = [...currentInventory, newItem];
      }
      
      // Update seed count
      const newSeedCount = Math.max(0, (userData.seedCount || 0) - 1);
      
      const updatedUserData = {
        ...userData,
        inventory: updatedInventory,
        seedCount: newSeedCount
      };
      
      localStorage.setItem('galwayUser', JSON.stringify(updatedUserData));
      setUserData(updatedUserData);
      setPlantingBranch(newBranch);
      
    } catch (error) {
      console.error('Failed to plant seed:', error);
    } finally {
      setIsPlanting(false);
    }
  };

  // Delete item function
  const handleDeleteItem = async (itemId: string, quantityToDelete: number = 1) => {
    if (!userData) return;
    
    const currentInventory = userData.inventory || [];
    const itemIndex = currentInventory.findIndex(item => item.id === itemId);
    
    if (itemIndex === -1) return;
    
    const item = currentInventory[itemIndex];
    let updatedInventory;
    
    if (item.type === 'seed' && item.quantity && item.quantity > 1) {
      // Update seed stack quantity
      const newQuantity = item.quantity - quantityToDelete;
      
      if (newQuantity > 0) {
        updatedInventory = [
          ...currentInventory.slice(0, itemIndex),
          { ...item, quantity: newQuantity },
          ...currentInventory.slice(itemIndex + 1)
        ];
      } else {
        // Remove seed stack if quantity reaches 0
        updatedInventory = [
          ...currentInventory.slice(0, itemIndex),
          ...currentInventory.slice(itemIndex + 1)
        ];
      }
      
      // Update seed count
      const newSeedCount = Math.max(0, (userData.seedCount || 0) - quantityToDelete);
      
      const updatedUserData = {
        ...userData,
        inventory: updatedInventory,
        seedCount: newSeedCount
      };
      
      localStorage.setItem('galwayUser', JSON.stringify(updatedUserData));
      setUserData(updatedUserData);
    } else {
      // Remove single item (branch or single seed)
      updatedInventory = currentInventory.filter(item => item.id !== itemId);
      
      const updatedUserData = {
        ...userData,
        inventory: updatedInventory
      };
      
      localStorage.setItem('galwayUser', JSON.stringify(updatedUserData));
      setUserData(updatedUserData);
    }
    
    setShowDeleteModal(false);
    setItemToDelete(null);
    setDeleteQuantity(1);
  };

  // Add demo seeds function
  const handleAddDemoSeeds = () => {
    if (!userData) return;
    
    const currentInventory = userData.inventory || [];
    const seedIndex = currentInventory.findIndex(item => item.type === 'seed');
    
    let updatedInventory;
    if (seedIndex !== -1) {
      // Update existing seed stack
      const existingSeeds = currentInventory[seedIndex];
      const newQuantity = (existingSeeds.quantity || 1) + 10;
      
      updatedInventory = [
        ...currentInventory.slice(0, seedIndex),
        { ...existingSeeds, quantity: newQuantity },
        ...currentInventory.slice(seedIndex + 1)
      ];
    } else {
      // Create new seed stack
      const newSeedStack: InventoryItem = {
        id: `seed_stack_${Date.now()}`,
        type: 'seed',
        quantity: 10,
        createdAt: new Date().toISOString(),
      };
      
      updatedInventory = [newSeedStack, ...currentInventory];
    }
    
    const newSeedCount = (userData.seedCount || 0) + 10;
    
    const updatedUserData = {
      ...userData,
      inventory: updatedInventory,
      seedCount: newSeedCount
    };
    
    localStorage.setItem('galwayUser', JSON.stringify(updatedUserData));
    setUserData(updatedUserData);
  };

  const renderInventorySlot = (item: InventoryItem | null, index: number) => {
    const isActive = item?.type === 'branch' && item.id === userData?.activeOliveBranchId;
    
    return (
      <div
        key={item?.id || `empty_${index}`}
        className={`aspect-square border-2 rounded-lg relative group transition-all duration-200 ${
          item 
            ? 'border-neutral-300 bg-white hover:border-neutral-400 cursor-pointer' 
            : 'border-neutral-200 bg-neutral-50 border-dashed'
        } ${isActive ? 'ring-2 ring-blue-500 border-blue-500' : ''}`}
      >
        {item ? (
          <>
            {/* Item content */}
            <div className="w-full h-full p-2">
              {item.type === 'seed' ? (
                <div className="relative w-full h-full">
                  <div 
                    className="w-full h-full rounded"
                    dangerouslySetInnerHTML={{ __html: SEED_SVG }}
                  />
                  {/* Quantity indicator */}
                  {item.quantity && item.quantity > 1 && (
                    <div className="absolute -top-1 -right-1 bg-blue-500 text-white text-xs font-mono rounded-full w-5 h-5 flex items-center justify-center">
                      {item.quantity}
                    </div>
                  )}
                </div>
              ) : (
                <div 
                  className="w-full h-full rounded"
                  dangerouslySetInnerHTML={{ __html: item.data?.svg || '' }}
                />
              )}
            </div>
            
            {/* Item actions */}
            <div className="absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex space-x-1">
              <button
                onClick={() => {
                  const foundItem = userData?.inventory?.find(i => i.id === item.id);
                  if (foundItem?.type === 'seed' && foundItem.quantity && foundItem.quantity > 1) {
                    setMaxDeleteQuantity(foundItem.quantity);
                    setDeleteQuantity(1);
                  }
                  setItemToDelete(item.id);
                  setShowDeleteModal(true);
                }}
                className="w-6 h-6 bg-red-500 text-white rounded text-xs hover:bg-red-600"
                title={item.type === 'seed' ? 'Discard seed' : 'Burn branch'}
              >
                ‚úï
              </button>
            </div>
            
            {/* Rarity indicator for branches */}
            {item.type === 'branch' && item.rarity && (
              <div className="absolute bottom-1 left-1 text-xs font-mono">
                <span className={`px-1 py-0.5 rounded text-white text-[10px] ${
                  item.rarity.count === 'Very Rare' ? 'bg-red-500' :
                  item.rarity.count === 'Rare' ? 'bg-purple-500' :
                  item.rarity.count === 'Uncommon' ? 'bg-blue-500' : 'bg-green-500'
                }`}>
                  {item.rarity.count[0]}
                </span>
              </div>
            )}
          </>
        ) : (
          <div className="w-full h-full flex items-center justify-center text-neutral-400">
            <div className="w-4 h-4 border-2 border-dashed border-current rounded"></div>
          </div>
        )}
      </div>
    );
  };

  if (!userData) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150 flex items-center justify-center">
        <div className="text-center">
          <p className="text-neutral-600 font-mono">Loading inventory...</p>
        </div>
      </div>
    );
  }

  const paginatedItems = getPaginatedItems();
  const totalPages = getTotalPages();
  const seedCount = userData.seedCount || 0;
  const inventoryCount = userData.inventory?.length || 0;

  return (
    <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150">
      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-2xl font-semibold text-neutral-900 mb-2">Inventory</h1>
            <p className="text-sm text-neutral-600 font-mono">
              {inventoryCount}/{MAX_ITEMS} slots used ‚Ä¢ {seedCount} seeds available
            </p>
          </div>
          <Link 
            href="/"
            className="px-4 py-2 font-mono text-sm border border-neutral-300 hover:bg-neutral-100 transition-colors duration-200 lowercase"
          >
            ‚Üê back to home
          </Link>
        </div>

        {/* Controls */}
        <div className="bg-white rounded-lg p-4 mb-6 border border-neutral-200">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0">
            {/* Sorting */}
            <div className="flex items-center space-x-4">
              <span className="text-sm font-mono text-neutral-700">sort by:</span>
              <select
                value={sortType}
                onChange={(e) => setSortType(e.target.value as SortType)}
                className="px-3 py-1 border border-neutral-300 rounded font-mono text-sm focus:ring-2 focus:ring-neutral-900 focus:border-transparent"
              >
                <option value="newest">newest</option>
                <option value="oldest">oldest</option>
                <option value="rarity">rarity</option>
              </select>
            </div>

            {/* Action buttons */}
            <div className="flex space-x-3">
              {/* Demo add seeds button */}
              <button
                onClick={handleAddDemoSeeds}
                className="px-4 py-2 bg-blue-500 text-white font-mono text-sm rounded hover:bg-blue-600 transition-colors duration-200 lowercase"
              >
                demo: +10 seeds
              </button>
              
              {/* Plant seed button */}
              {seedCount > 0 && (
                <button
                  onClick={() => setShowPlantModal(true)}
                  className="px-4 py-2 bg-green-500 text-white font-mono text-sm rounded hover:bg-green-600 transition-colors duration-200 lowercase"
                >
                  plant seed ({seedCount})
                </button>
              )}
            </div>
          </div>
        </div>

        {/* Inventory Grid */}
        <div className="bg-white rounded-lg p-6 border border-neutral-200 mb-6">
          <div className="grid grid-cols-4 gap-4 mb-6">
            {Array.from({ length: ITEMS_PER_PAGE }, (_, index) => {
              const item = paginatedItems[index] || null;
              return renderInventorySlot(item, index);
            })}
          </div>

          {/* Pagination */}
          {totalPages > 1 && (
            <div className="flex items-center justify-center space-x-2">
              <button
                onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                disabled={currentPage === 1}
                className="px-3 py-1 text-sm font-mono border border-neutral-300 rounded disabled:opacity-50 disabled:cursor-not-allowed hover:bg-neutral-50"
              >
                ‚Üê
              </button>
              
              <div className="flex space-x-1">
                {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
                  <button
                    key={page}
                    onClick={() => setCurrentPage(page)}
                    className={`w-8 h-8 text-sm font-mono rounded ${
                      currentPage === page
                        ? 'bg-neutral-900 text-white'
                        : 'border border-neutral-300 hover:bg-neutral-50'
                    }`}
                  >
                    {page}
                  </button>
                ))}
              </div>
              
              <button
                onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                disabled={currentPage === totalPages}
                className="px-3 py-1 text-sm font-mono border border-neutral-300 rounded disabled:opacity-50 disabled:cursor-not-allowed hover:bg-neutral-50"
              >
                ‚Üí
              </button>
            </div>
          )}
        </div>

        {/* Empty state */}
        {inventoryCount === 0 && (
          <div className="text-center py-12">
            <div className="text-neutral-400 mb-4">
              <svg className="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
              </svg>
            </div>
            <p className="text-neutral-600 font-mono text-sm">
              Your inventory is empty. Visit the shop to purchase seeds.
            </p>
            <Link 
              href="/cart"
              className="inline-block mt-4 px-4 py-2 bg-neutral-900 text-white font-mono text-sm rounded hover:bg-neutral-700 transition-colors duration-200"
            >
              visit shop
            </Link>
          </div>
        )}
      </div>

      {/* Plant Seed Modal */}
      {showPlantModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-lg font-semibold text-neutral-900 mb-4 font-mono">Plant Seed</h3>
            <p className="text-sm text-neutral-600 mb-6 font-mono">
              This will consume one seed and generate a new olive branch for your inventory.
            </p>
            
            <div className="flex space-x-3">
              <button
                onClick={() => setShowPlantModal(false)}
                className="flex-1 px-4 py-2 bg-neutral-200 text-neutral-700 rounded hover:bg-neutral-300 transition-colors duration-200 font-mono text-sm"
              >
                Cancel
              </button>
              <button
                onClick={() => {
                  setShowPlantModal(false);
                  handlePlantSeed();
                }}
                disabled={isPlanting}
                className="flex-1 px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50 transition-colors duration-200 font-mono text-sm"
              >
                {isPlanting ? 'Planting...' : 'Plant'}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Planting Result Modal */}
      {plantingBranch && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-md w-full text-center">
            <h3 className="text-lg font-semibold text-neutral-900 mb-4 font-mono">Seed Planted!</h3>
            
            <div className="w-24 h-24 mx-auto mb-4 border border-neutral-200 rounded-lg overflow-hidden">
              <div 
                className="w-full h-full"
                dangerouslySetInnerHTML={{ __html: plantingBranch.svg }}
              />
            </div>
            
            <div className="text-xs font-mono text-neutral-600 space-y-1 mb-6">
              <p>{plantingBranch.oliveCount} {plantingBranch.oliveType.toLowerCase()}</p>
              <p>rarity: {plantingBranch.rarity.count.toLowerCase()} ({plantingBranch.rarity.countPercentage}%)</p>
            </div>
            
            <button
              onClick={() => setPlantingBranch(null)}
              className="px-4 py-2 bg-neutral-900 text-white rounded hover:bg-neutral-700 transition-colors duration-200 font-mono text-sm"
            >
              Continue
            </button>
          </div>
        </div>
      )}

      {/* Delete Confirmation Modal */}
      {showDeleteModal && itemToDelete && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-lg font-semibold text-red-800 mb-4 font-mono">Confirm Deletion</h3>
            
            {(() => {
              const item = userData?.inventory?.find(i => i.id === itemToDelete);
              const isStackedSeeds = item?.type === 'seed' && item.quantity && item.quantity > 1;
              
              return isStackedSeeds ? (
                <div className="space-y-4">
                  <p className="text-sm text-neutral-600 font-mono">
                    How many seeds would you like to discard? (You have {item.quantity} seeds)
                  </p>
                  
                  <div className="space-y-3">
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 mb-2 font-mono">
                        Quantity to discard:
                      </label>
                      <input
                        type="number"
                        min="1"
                        max={item.quantity}
                        value={deleteQuantity}
                        onChange={(e) => setDeleteQuantity(Math.min(Math.max(1, parseInt(e.target.value) || 1), item.quantity || 1))}
                        className="w-full px-3 py-2 border border-neutral-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent font-mono text-sm"
                      />
                    </div>
                    
                    <div className="flex space-x-2">
                      <button
                        onClick={() => setDeleteQuantity(1)}
                        className="px-2 py-1 text-xs bg-neutral-100 text-neutral-600 rounded hover:bg-neutral-200 font-mono"
                      >
                        1
                      </button>
                      <button
                        onClick={() => setDeleteQuantity(Math.floor((item.quantity || 1) / 2))}
                        className="px-2 py-1 text-xs bg-neutral-100 text-neutral-600 rounded hover:bg-neutral-200 font-mono"
                      >
                        Half
                      </button>
                      <button
                        onClick={() => setDeleteQuantity(item.quantity || 1)}
                        className="px-2 py-1 text-xs bg-neutral-100 text-neutral-600 rounded hover:bg-neutral-200 font-mono"
                      >
                        All
                      </button>
                    </div>
                  </div>
                </div>
              ) : (
                <p className="text-sm text-neutral-600 mb-6 font-mono">
                  Are you sure you want to {item?.type === 'seed' ? 'discard this seed' : 'burn this branch'}? This action cannot be undone.
                </p>
              );
            })()}
            
            <div className="flex space-x-3 mt-6">
              <button
                onClick={() => {
                  setShowDeleteModal(false);
                  setItemToDelete(null);
                  setDeleteQuantity(1);
                }}
                className="flex-1 px-4 py-2 bg-neutral-200 text-neutral-700 rounded hover:bg-neutral-300 transition-colors duration-200 font-mono text-sm"
              >
                Cancel
              </button>
              <button
                onClick={() => handleDeleteItem(itemToDelete, deleteQuantity)}
                className="flex-1 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors duration-200 font-mono text-sm"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// === END app/inventory/page.tsx ===


============================================================
DIRECTORY: app/login
============================================================

// === app/login/page.tsx ===
'use client';

import { useState, useEffect, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { useAuth } from '@/lib/auth';
import Link from 'next/link';

function LoginContent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { login, isLoggedIn } = useAuth();
  
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  
  // Get redirect parameter
  const redirectTo = searchParams?.get('redirect') || '/';

  // Redirect if already logged in
  useEffect(() => {
    if (isLoggedIn) {
      router.push(redirectTo);
    }
  }, [isLoggedIn, router, redirectTo]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    try {
      // Check if user exists in localStorage
      const storedUser = localStorage.getItem('galwayUser');
      if (storedUser) {
        const userData = JSON.parse(storedUser);
        
        // Check username/email and password
        const usernameMatch = userData.username.toLowerCase() === username.toLowerCase() || 
                            userData.email.toLowerCase() === username.toLowerCase();
        const passwordMatch = userData.password === password;
        
        if (usernameMatch && passwordMatch) {
          // Successful login
          login({
            username: userData.username,
            role: userData.role,
            onset: userData.onset,
            idNo: userData.idNo,
            bio: userData.bio,
            oliveBranch: userData.oliveBranch
          });
          
          // Redirect to intended page
          router.push(redirectTo);
          return;
        }
      }
      
      // If no stored user or credentials don't match, show error
      setError('Invalid username/email or password');
      
    } catch (error) {
      console.error('Login error:', error);
      setError('Login failed. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  if (isLoggedIn) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150 flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-2 border-neutral-300 border-t-neutral-900 rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-neutral-600 font-mono text-sm">Redirecting...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white">
      <div className="flex items-center justify-center p-4 pt-8 min-h-screen">
        <div className="max-w-md mx-auto w-full">
          <div className="text-center mb-8">
            <h1 className="text-xl font-mono font-normal text-black mb-3 uppercase tracking-wide">
              Operative Sign-In
            </h1>
          </div>

          <form onSubmit={handleSubmit} className="bg-white rounded-lg p-6 border border-neutral-200 shadow-sm">
            {error && (
              <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-md">
                <p className="text-sm text-red-700 font-mono">{error}</p>
              </div>
            )}

            {/* Show redirect notice */}
            {redirectTo !== '/' && (
              <div className="mb-6 p-3 bg-green-50 border border-green-200 rounded-md">
                <p className="text-xs text-green-700 font-mono">
                  You'll be redirected to {redirectTo} after signing in
                </p>
              </div>
            )}

            <div className="space-y-6">
              {/* Username/Email */}
              <div>
                <label htmlFor="username" className="block text-sm font-medium text-black mb-2 font-mono uppercase tracking-wide">
                  Username or Email
                </label>
                <input
                  type="text"
                  id="username"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-black focus:border-transparent transition-all duration-200 font-mono text-sm"
                  placeholder="operative_username"
                  required
                  disabled={isLoading}
                />
              </div>

              {/* Password */}
              <div>
                <label htmlFor="password" className="block text-sm font-medium text-black mb-2 font-mono uppercase tracking-wide">
                  Password
                </label>
                <div className="relative">
                  <input
                    type={showPassword ? 'text' : 'password'}
                    id="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="w-full px-4 py-3 pr-12 border border-neutral-300 rounded-md focus:ring-2 focus:ring-black focus:border-transparent transition-all duration-200 font-mono text-sm"
                    placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                    required
                    disabled={isLoading}
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute inset-y-0 right-0 pr-3 flex items-center text-neutral-400 hover:text-neutral-600 transition-colors duration-200"
                    disabled={isLoading}
                  >
                    {showPassword ? (
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21" />
                      </svg>
                    ) : (
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                      </svg>
                    )}
                  </button>
                </div>
              </div>
            </div>

            {/* Submit Button */}
            <button
              type="submit"
              disabled={isLoading || !username.trim() || !password.trim()}
              className={`w-full mt-8 py-3 px-6 font-mono text-sm uppercase tracking-wide transition-all duration-200 border-2 ${
                !isLoading && username.trim() && password.trim()
                  ? 'bg-white text-black border-black hover:bg-black hover:text-white'
                  : 'bg-neutral-200 text-neutral-500 border-neutral-200 cursor-not-allowed'
              }`}
            >
              {isLoading ? 'Authenticating...' : 'Sign In'}
            </button>
          </form>

          {/* Footer Links */}
          <div className="text-center mt-6 space-y-2">
            <p className="text-sm text-neutral-600 font-mono">
              Don't have an account?{' '}
              <Link 
                href="/register" 
                className="text-black hover:underline transition-all duration-200"
              >
                register
              </Link>
            </p>
            <p className="text-sm text-neutral-500 font-mono">
              <Link 
                href="/" 
                className="hover:text-neutral-700 transition-all duration-200"
              >
                ‚Üê back to home
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

export default function LoginPage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-2 border-neutral-300 border-t-neutral-900 rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-neutral-600 font-mono text-sm">Loading...</p>
        </div>
      </div>
    }>
      <LoginContent />
    </Suspense>
  );
}

// === END app/login/page.tsx ===


============================================================
DIRECTORY: app/olive-rarity
============================================================

// === app/olive-rarity/page.tsx ===
'use client';

import Link from 'next/link';
import { useState } from 'react';
import { OLIVE_BRANCH_BG_COLOR } from '@/lib/oliveGenerator';

// Import the rarity data (you'd import this from your actual generator file)
const OLIVE_RARITY_DATA = {
  counts: {
    1: { weight: 0.33, rarity: 'Common' },
    2: { weight: 0.28, rarity: 'Common' },
    3: { weight: 0.19, rarity: 'Uncommon' },
    4: { weight: 0.12, rarity: 'Rare' },
    5: { weight: 0.08, rarity: 'Very Rare' }
  },
  types: {
    greenOlives: { weight: 0.30, rarity: 'Common', displayName: 'Green Olives' },
    blackOlives: { weight: 0.25, rarity: 'Common', displayName: 'Black Olives' },
    brownOlives: { weight: 0.20, rarity: 'Uncommon', displayName: 'Brown Olives' },
    purpleOlives: { weight: 0.15, rarity: 'Rare', displayName: 'Purple Olives' },
    ripeMixed: { weight: 0.10, rarity: 'Very Rare', displayName: 'Mixed Ripe Olives' }
  },
  colors: {
    greenOlives: ['#6B8E23', '#808000', '#9ACD32', '#7CFC00', '#ADFF2F'],
    blackOlives: ['#2F2F2F', '#404040', '#1C1C1C', '#36454F', '#28282B'],
    brownOlives: ['#8B4513', '#A0522D', '#CD853F', '#D2691E', '#BC9A6A'],
    purpleOlives: ['#663399', '#4B0082', '#800080', '#9932CC', '#8B008B'],
    ripeMixed: ['#6B8E23', '#2F2F2F', '#663399', '#8B4513']
  }
};

export default function OliveRarityPage() {
  const [activeTab, setActiveTab] = useState<'counts' | 'types'>('counts');

  const getRarityColor = (rarity: string) => {
    switch (rarity) {
      case 'Common': return 'text-green-600';
      case 'Uncommon': return 'text-blue-600';
      case 'Rare': return 'text-purple-600';
      case 'Very Rare': return 'text-red-600';
      default: return 'text-neutral-600';
    }
  };

  const getRarityBgColor = (rarity: string) => {
    switch (rarity) {
      case 'Common': return 'bg-green-50 border-green-200';
      case 'Uncommon': return 'bg-blue-50 border-blue-200';
      case 'Rare': return 'bg-purple-50 border-purple-200';
      case 'Very Rare': return 'bg-red-50 border-red-200';
      default: return 'bg-neutral-50 border-neutral-200';
    }
  };

  const generateSampleOlive = (type: string, colorIndex: number = 0) => {
    const colors = OLIVE_RARITY_DATA.colors[type as keyof typeof OLIVE_RARITY_DATA.colors];
    const oliveColor = colors[colorIndex];
    
    return `<svg width="60" height="60" viewBox="0 0 70 70" fill="none" xmlns="http://www.w3.org/2000/svg">
      <rect width="70" height="70" fill="${OLIVE_BRANCH_BG_COLOR}"/>
      <rect x="33" y="20" width="4" height="30" fill="#8B7355"/>
      <rect x="24" y="27" width="12" height="4" fill="#8B7355"/>
      <rect x="34" y="37" width="12" height="4" fill="#8B7355"/>
      <rect x="24" y="44" width="12" height="4" fill="#8B7355"/>
      <rect x="18" y="25" width="8" height="4" fill="#228B22"/>
      <rect x="20" y="29" width="8" height="4" fill="#228B22"/>
      <rect x="42" y="35" width="8" height="4" fill="#228B22"/>
      <rect x="44" y="39" width="8" height="4" fill="#228B22"/>
      <rect x="18" y="42" width="8" height="4" fill="#228B22"/>
      <rect x="20" y="46" width="8" height="4" fill="#228B22"/>
      <rect x="20" y="32" width="4" height="4" fill="${oliveColor}"/>
      <rect x="40" y="42" width="4" height="4" fill="${oliveColor}"/>
      <rect x="26" y="49" width="4" height="4" fill="${oliveColor}"/>
    </svg>`;
  };

  const generateCountSample = (count: number) => {
    const positions = [
      { x: 20, y: 32 }, { x: 40, y: 42 }, { x: 26, y: 49 }, 
      { x: 48, y: 35 }, { x: 22, y: 45 }
    ];
    
    let oliveElements = '';
    for (let i = 0; i < count; i++) {
      const pos = positions[i];
      oliveElements += `<rect x="${pos.x}" y="${pos.y}" width="4" height="4" fill="#6B8E23"/>`;
    }
    
    return `<svg width="60" height="60" viewBox="0 0 70 70" fill="none" xmlns="http://www.w3.org/2000/svg">
      <rect width="70" height="70" fill="${OLIVE_BRANCH_BG_COLOR}"/>
      <rect x="33" y="20" width="4" height="30" fill="#8B7355"/>
      <rect x="24" y="27" width="12" height="4" fill="#8B7355"/>
      <rect x="34" y="37" width="12" height="4" fill="#8B7355"/>
      <rect x="24" y="44" width="12" height="4" fill="#8B7355"/>
      <rect x="18" y="25" width="8" height="4" fill="#228B22"/>
      <rect x="20" y="29" width="8" height="4" fill="#228B22"/>
      <rect x="42" y="35" width="8" height="4" fill="#228B22"/>
      <rect x="44" y="39" width="8" height="4" fill="#228B22"/>
      <rect x="18" y="42" width="8" height="4" fill="#228B22"/>
      <rect x="20" y="46" width="8" height="4" fill="#228B22"/>
      ${oliveElements}
    </svg>`;
  };

  return (
    <div className="min-h-screen bg-neutral-50">
      {/* Header */}
      <div className="bg-white border-b border-neutral-200">
        <div className="max-w-4xl mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-mono font-semibold text-neutral-900 lowercase">
                Olive Branch Rarity Guide
              </h1>
              <p className="text-sm font-mono text-neutral-600 mt-1 lowercase">
                botanical signature system distribution rates
              </p>
            </div>
            <Link 
              href="/"
              className="px-4 py-2 font-mono text-sm border border-neutral-300 hover:bg-neutral-100 transition-colors duration-200 lowercase"
            >
              ‚Üê back to home
            </Link>
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Tab Navigation */}
        <div className="flex space-x-1 mb-8 bg-neutral-200 p-1 rounded-lg">
          <button
            onClick={() => setActiveTab('counts')}
            className={`flex-1 py-3 px-4 font-mono text-sm lowercase transition-all duration-200 rounded-md ${
              activeTab === 'counts'
                ? 'bg-white text-neutral-900 shadow-sm'
                : 'text-neutral-600 hover:text-neutral-900'
            }`}
          >
            olive counts
          </button>
          <button
            onClick={() => setActiveTab('types')}
            className={`flex-1 py-3 px-4 font-mono text-sm lowercase transition-all duration-200 rounded-md ${
              activeTab === 'types'
                ? 'bg-white text-neutral-900 shadow-sm'
                : 'text-neutral-600 hover:text-neutral-900'
            }`}
          >
            olive types
          </button>
        </div>

        {/* Olive Counts Tab */}
        {activeTab === 'counts' && (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h2 className="text-xl font-mono font-medium text-neutral-900 lowercase mb-2">
                Olive Count Distribution
              </h2>
              <p className="text-sm font-mono text-neutral-600 lowercase">
                the number of olives on your botanical signature determines its rarity
              </p>
            </div>

            <div className="grid gap-4">
              {Object.entries(OLIVE_RARITY_DATA.counts).map(([count, data]) => (
                <div
                  key={count}
                  className={`p-6 rounded-lg border ${getRarityBgColor(data.rarity)}`}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <div 
                        className="w-16 h-16 rounded-lg overflow-hidden border border-neutral-200 bg-white"
                        dangerouslySetInnerHTML={{ __html: generateCountSample(parseInt(count)) }}
                      />
                      <div>
                        <div className="font-mono text-lg font-medium text-neutral-900 lowercase">
                          {count} {parseInt(count) === 1 ? 'olive' : 'olives'}
                        </div>
                        <div className={`font-mono text-sm lowercase ${getRarityColor(data.rarity)}`}>
                          {data.rarity}
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="font-mono text-xl font-semibold text-neutral-900">
                        {Math.round(data.weight * 100)}%
                      </div>
                      <div className="font-mono text-xs text-neutral-500 lowercase">
                        drop rate
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Olive Types Tab */}
        {activeTab === 'types' && (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h2 className="text-xl font-mono font-medium text-neutral-900 lowercase mb-2">
                Olive Type Distribution
              </h2>
              <p className="text-sm font-mono text-neutral-600 lowercase">
                different olive varieties have varying rarity levels based on real-world frequency
              </p>
            </div>

            <div className="grid gap-4">
              {Object.entries(OLIVE_RARITY_DATA.types).map(([type, data]) => (
                <div
                  key={type}
                  className={`p-6 rounded-lg border ${getRarityBgColor(data.rarity)}`}
                >
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center space-x-4">
                      <div 
                        className="w-16 h-16 rounded-lg overflow-hidden border border-neutral-200 bg-white"
                        dangerouslySetInnerHTML={{ __html: generateSampleOlive(type) }}
                      />
                      <div>
                        <div className="font-mono text-lg font-medium text-neutral-900 lowercase">
                          {data.displayName}
                        </div>
                        <div className={`font-mono text-sm lowercase ${getRarityColor(data.rarity)}`}>
                          {data.rarity}
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="font-mono text-xl font-semibold text-neutral-900">
                        {Math.round(data.weight * 100)}%
                      </div>
                      <div className="font-mono text-xs text-neutral-500 lowercase">
                        drop rate
                      </div>
                    </div>
                  </div>
                  
                  {/* Color Variations */}
                  <div className="space-y-2">
                    <div className="font-mono text-xs text-neutral-600 lowercase">color variations:</div>
                    <div className="flex space-x-2">
                      {OLIVE_RARITY_DATA.colors[type as keyof typeof OLIVE_RARITY_DATA.colors].map((color, index) => (
                        <div
                          key={color}
                          className="w-8 h-8 rounded border border-neutral-300"
                          style={{ backgroundColor: color }}
                          title={color}
                        />
                      ))}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Footer Info */}
        <div className="mt-12 p-6 bg-white rounded-lg border border-neutral-200">
          <h3 className="font-mono text-lg font-medium text-neutral-900 lowercase mb-3">
            Botanical Protocol Notes
          </h3>
          <div className="space-y-2 font-mono text-sm text-neutral-600 leading-relaxed">
            <p className="lowercase">
              ‚Ä¢ each operative receives a unique botanical signature during registration
            </p>
            <p className="lowercase">
              ‚Ä¢ olive count and type are determined independently using weighted randomization
            </p>
            <p className="lowercase">
              ‚Ä¢ signatures cannot be regenerated or modified once confirmed
            </p>
            <p className="lowercase">
              ‚Ä¢ rarity percentages are based on real-world olive cultivation patterns
            </p>
            <p className="lowercase">
              ‚Ä¢ the complete signature includes branch and leaf variations (not shown)
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

// === END app/olive-rarity/page.tsx ===


============================================================
DIRECTORY: app/register
============================================================

// === app/register/page.tsx ===
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';

interface ValidationResult {
  errors: string[];
  warnings: string[];
  isValid: boolean;
}

interface FormData {
  username: string;
  email: string;
  password: string;
  confirmPassword: string;
}

// Simulated existing usernames for testing
const existingUsernames = ['admin', 'test', 'user', 'galway_research', 'researcher01', 'guest_user'];

// Common weak passwords for warnings
const weakPasswords = ['password', '12345678', 'qwerty123', 'password123', 'admin123'];

export default function RegisterPage() {
  const router = useRouter();
  const [formData, setFormData] = useState<FormData>({
    username: '',
    email: '',
    password: '',
    confirmPassword: ''
  });
  
  const [validation, setValidation] = useState<{
    username: ValidationResult;
    email: ValidationResult;
    password: ValidationResult;
    confirmPassword: ValidationResult;
  }>({
    username: { errors: [], warnings: [], isValid: false },
    email: { errors: [], warnings: [], isValid: false },
    password: { errors: [], warnings: [], isValid: false },
    confirmPassword: { errors: [], warnings: [], isValid: false }
  });

  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Validation functions
  const validateUsername = (username: string): ValidationResult => {
    const errors: string[] = [];
    const warnings: string[] = [];
    
    // Convert to lowercase and trim
    const cleanUsername = username.toLowerCase().trim();
    
    if (cleanUsername.length === 0) {
      return { errors: [], warnings: [], isValid: false };
    }
    
    // Length check
    if (cleanUsername.length < 3) {
      errors.push('username must be at least 3 characters');
    } else if (cleanUsername.length > 20) {
      errors.push('username must be 20 characters or less');
    }
    
    // Instagram rules: letters, numbers, periods, underscores
    if (!/^[a-z0-9._]+$/.test(cleanUsername)) {
      errors.push('only letters, numbers, periods, and underscores allowed');
    }
    
    // Cannot start or end with period
    if (cleanUsername.startsWith('.') || cleanUsername.endsWith('.')) {
      errors.push('cannot start or end with a period');
    }
    
    // Cannot have consecutive periods
    if (cleanUsername.includes('..')) {
      errors.push('cannot have consecutive periods');
    }
    
    // Check against existing usernames
    if (existingUsernames.includes(cleanUsername)) {
      errors.push('username already taken');
    }
    
    // Reserved words
    if (['admin', 'galway', 'research', 'institute'].includes(cleanUsername)) {
      errors.push('username reserved by institute');
    }
    
    return { errors, warnings, isValid: errors.length === 0 };
  };

  const validateEmail = (email: string): ValidationResult => {
    const errors: string[] = [];
    const cleanEmail = email.toLowerCase().trim();
    
    if (cleanEmail.length === 0) {
      return { errors: [], warnings: [], isValid: false };
    }
    
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(cleanEmail)) {
      errors.push('please enter a valid email address');
    }
    
    if (cleanEmail.length > 254) {
      errors.push('email address too long');
    }
    
    return { errors, warnings: [], isValid: errors.length === 0 };
  };

  const validatePassword = (password: string): ValidationResult => {
    const errors: string[] = [];
    const warnings: string[] = [];
    
    if (password.length === 0) {
      return { errors: [], warnings: [], isValid: false };
    }
    
    if (password.length < 8) {
      errors.push('password must be at least 8 characters');
    }
    
    if (password.length > 128) {
      errors.push('password must be less than 128 characters');
    }
    
    // Check for weak passwords (warning only)
    if (weakPasswords.some(weak => password.toLowerCase().includes(weak.toLowerCase()))) {
      warnings.push('this password appears in common vulnerability databases');
    }
    
    return { errors, warnings, isValid: errors.length === 0 };
  };

  const validateConfirmPassword = (password: string, confirmPassword: string): ValidationResult => {
    const errors: string[] = [];
    
    if (confirmPassword.length === 0) {
      return { errors: [], warnings: [], isValid: false };
    }
    
    if (password !== confirmPassword) {
      errors.push('passwords do not match');
    }
    
    return { errors, warnings: [], isValid: errors.length === 0 };
  };

  // Real-time validation effects
  useEffect(() => {
    const result = validateUsername(formData.username);
    setValidation(prev => ({ ...prev, username: result }));
  }, [formData.username]);

  useEffect(() => {
    const result = validateEmail(formData.email);
    setValidation(prev => ({ ...prev, email: result }));
  }, [formData.email]);

  useEffect(() => {
    const result = validatePassword(formData.password);
    setValidation(prev => ({ ...prev, password: result }));
  }, [formData.password]);

  useEffect(() => {
    const result = validateConfirmPassword(formData.password, formData.confirmPassword);
    setValidation(prev => ({ ...prev, confirmPassword: result }));
  }, [formData.password, formData.confirmPassword]);

  // Handle input changes
  const handleInputChange = (field: keyof FormData, value: string) => {
    if (field === 'username' || field === 'email') {
      value = value.toLowerCase().trim();
    }
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  // Check if form is valid
  const isFormValid = Object.values(validation).every(v => v.isValid) && 
                     Object.values(formData).every(v => v.trim().length > 0);

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!isFormValid || isSubmitting) return;
    
    setIsSubmitting(true);
    
    try {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Create user data
      const today = new Date();
      const formattedDate = `${(today.getMonth() + 1).toString().padStart(2, '0')}/${today.getDate().toString().padStart(2, '0')}/${today.getFullYear()}`;
      
      const userData = {
        username: formData.username,
        email: formData.email,
        password: formData.password, // In real app, this would be hashed on backend
        role: 'operative' as const,
        onset: formattedDate,
        isEmailVerified: false,
        registrationStep: 'email_verification',
        accountCreated: new Date().toISOString(),
        deletionWarningDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString() // 7 days from now
      };
      
      // Store in localStorage for demo
      localStorage.setItem('galwayUserPending', JSON.stringify(userData));
      
      // Redirect to email verification
      router.push('/verify-email');
      
    } catch (error) {
      console.error('Registration failed:', error);
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150 relative overflow-hidden">
      {/* Subtle background pattern */}
      <div className="absolute inset-0 opacity-[0.02]">
        <div className="absolute inset-0" style={{
          backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23000000' fill-opacity='0.4'%3E%3Ccircle cx='7' cy='7' r='1'/%3E%3Ccircle cx='53' cy='53' r='1'/%3E%3Ccircle cx='30' cy='30' r='1'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`,
        }} />
      </div>

      <div className="relative z-10 flex items-center justify-center p-4 sm:p-6 pt-8 sm:pt-10 min-h-screen">
        <div className="max-w-md mx-auto w-full">
          <div className="text-center mb-8">
            <h1 className="text-2xl sm:text-3xl font-semibold text-neutral-900 mb-3 leading-tight">
              REGISTER OPERATIVE ID
            </h1>
               {/*<p className="text-neutral-600 text-xs sm:text-sm leading-relaxed max-w-md mx-auto">
                  Participate in Galway Research Institute initiatives!
              </p>*/}
          </div>

          <form onSubmit={handleSubmit} className="bg-white rounded-lg p-6 sm:p-8 shadow-lg border border-neutral-200">
            {/* Username Field */}
            <div className="mb-6">
              <label htmlFor="username" className="block text-sm font-medium text-neutral-700 mb-2 font-mono uppercase">
                username
              </label>
              <input
                type="text"
                id="username"
                value={formData.username}
                onChange={(e) => handleInputChange('username', e.target.value)}
                className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
                placeholder="your_operative_id"
                required
                autoComplete="username"
              />
              <p className="text-xs text-neutral-500 mt-1 font-mono">
                3-20 characters. letters, numbers, periods, and underscores only.
              </p>
              
              {/* Username validation messages */}
              {validation.username.errors.length > 0 && (
                <p className="text-xs text-red-600 mt-1 font-mono">
                  {validation.username.errors[0]}
                </p>
              )}
              {validation.username.isValid && formData.username.length > 0 && (
                <p className="text-xs text-green-600 mt-1 font-mono">
                  username available
                </p>
              )}
            </div>

            {/* Email Field */}
            <div className="mb-6">
              <label htmlFor="email" className="block text-sm font-medium text-neutral-700 mb-2 font-mono uppercase">
                email
              </label>
              <input
                type="email"
                id="email"
                value={formData.email}
                onChange={(e) => handleInputChange('email', e.target.value)}
                className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
                placeholder="operative@galwayresearch.org"
                required
                autoComplete="email"
              />
              <p className="text-xs text-neutral-500 mt-1 font-mono">
                confirmation email required to activate account.
              </p>
              
              {/* Email validation messages */}
              {validation.email.errors.length > 0 && (
                <p className="text-xs text-red-600 mt-1 font-mono">
                  {validation.email.errors[0]}
                </p>
              )}
              {validation.email.isValid && formData.email.length > 0 && (
                <p className="text-xs text-green-600 mt-1 font-mono">
                  valid email format
                </p>
              )}
            </div>

            {/* Password Field */}
            <div className="mb-6">
              <label htmlFor="password" className="block text-sm font-medium text-neutral-700 mb-2 font-mono uppercase">
                password
              </label>
              <div className="relative">
                <input
                  type={showPassword ? 'text' : 'password'}
                  id="password"
                  value={formData.password}
                  onChange={(e) => handleInputChange('password', e.target.value)}
                  className="w-full px-4 py-3 pr-12 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
                  placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                  required
                  autoComplete="new-password"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-neutral-500 hover:text-neutral-700 transition-colors duration-200"
                  aria-label="Toggle password visibility"
                >
                  {showPassword ? 
                    <img src="/eye-closed.png" alt="Hide password" className="w-7 h-7" /> : 
                    <img src="/eye-open.png" alt="Show password" className="w-7 h-7" />
                  }
                </button>
              </div>
              <p className="text-xs text-neutral-500 mt-1 font-mono">
                minimum 8 characters. password strength is your responsibility.
              </p>
              
              {/* Password validation messages */}
              {validation.password.errors.length > 0 && (
                <p className="text-xs text-red-600 mt-1 font-mono">
                  {validation.password.errors[0]}
                </p>
              )}
              {validation.password.warnings.length > 0 && validation.password.errors.length === 0 && (
                <p className="text-xs text-yellow-600 mt-1 font-mono">
                  advisory: {validation.password.warnings[0]}
                </p>
              )}
              {validation.password.isValid && validation.password.warnings.length === 0 && formData.password.length > 0 && (
                <p className="text-xs text-green-600 mt-1 font-mono">
                  adequate password length
                </p>
              )}
            </div>

            {/* Confirm Password Field */}
            <div className="mb-8">
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-neutral-700 mb-2 font-mono uppercase">
                confirm password
              </label>
              <div className="relative">
                <input
                  type={showConfirmPassword ? 'text' : 'password'}
                  id="confirmPassword"
                  value={formData.confirmPassword}
                  onChange={(e) => handleInputChange('confirmPassword', e.target.value)}
                  className="w-full px-4 py-3 pr-12 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
                  placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                  required
                  autoComplete="new-password"
                />
                <button
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-neutral-500 hover:text-neutral-700 transition-colors duration-200"
                  aria-label="Toggle password visibility"
                >
                  {showConfirmPassword ? 
                    <img src="/eye-closed.png" alt="Hide password" className="w-7 h-7" /> : 
                    <img src="/eye-open.png" alt="Show password" className="w-7 h-7" />
                  }
                </button>
              </div>
              
              {/* Confirm password validation messages */}
              {validation.confirmPassword.errors.length > 0 && (
                <p className="text-xs text-red-600 mt-1 font-mono">
                  {validation.confirmPassword.errors[0]}
                </p>
              )}
              {validation.confirmPassword.isValid && formData.confirmPassword.length > 0 && (
                <p className="text-xs text-green-600 mt-1 font-mono">
                  passwords match
                </p>
              )}
            </div>

            {/* Submit Button */}
            <button
              type="submit"
              disabled={!isFormValid || isSubmitting}
              className={`w-full py-3 px-6 font-mono text-sm uppercase tracking-wide transition-all duration-200 border-2 ${
                isFormValid && !isSubmitting
                  ? 'bg-transparent text-neutral-900 border-neutral-300 hover:bg-neutral-900 hover:text-white hover:border-neutral-900 hover:shadow-lg transform hover:-translate-y-0.5'
                  : 'bg-neutral-200 text-neutral-500 border-neutral-200 cursor-not-allowed'
              }`}
            >
              {isSubmitting ? 'processing...' : 'proceed to verification'}
            </button>
          </form>

          {/* Footer Links */}
          <div className="text-center mt-6 space-y-2">
            <p className="text-sm text-neutral-600 font-mono uppercase">
              Already registered?{' '}
              <Link 
                href="/login" 
                className="text-green-700 hover:underline transition-all duration-200"
              >
                log-in
              </Link>
            </p>
            <p className="text-sm text-neutral-500 font-mono">
              <Link 
                href="/" 
                className="hover:text-neutral-700 transition-all duration-200 uppercase"
              >
                ‚Üê back to home
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

// === END app/register/page.tsx ===


============================================================
DIRECTORY: app/settings
============================================================

// === app/settings/page.tsx ===
'use client';

import { useState, useEffect } from 'react';
import { useAuth } from '@/lib/auth';
import { useRouter } from 'next/navigation';
import Link from 'next/link';

interface UserData {
  username: string;
  email: string;
  password: string;
  role: string;
  roles: string[];
  onset: string;
  idNo: string;
  bio: string;
  isEmailVerified: boolean;
  inventory?: InventoryItem[];
  activeOliveBranchId?: string;
  oliveBranch?: any;
  lastUsernameChange?: string;
  birthday?: string;
  country?: string;
  city?: string;
  twoFactor: {
    sms: {
      enabled: boolean;
      phoneNumber?: string;
    };
    email: {
      enabled: boolean;
    };
  };
}

interface InventoryItem {
  id: string;
  type: 'seed' | 'branch';
  data?: any;
  createdAt: string;
  quantity?: number;
  rarity?: {
    count: string;
    type: string;
    countPercentage: number;
    typePercentage: number;
  };
}

interface ValidationResult {
  errors: string[];
  isValid: boolean;
}

type TabType = 'profile' | 'account' | 'security' | 'danger';

// Comprehensive country list
const COUNTRIES = [
  '', // Empty option
  'Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Australia', 'Austria',
  'Azerbaijan', 'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus', 'Belgium', 'Belize', 'Benin', 'Bhutan',
  'Bolivia', 'Bosnia and Herzegovina', 'Botswana', 'Brazil', 'Brunei', 'Bulgaria', 'Burkina Faso', 'Burundi', 'Cabo Verde', 'Cambodia',
  'Cameroon', 'Canada', 'Central African Republic', 'Chad', 'Chile', 'China', 'Colombia', 'Comoros', 'Congo', 'Costa Rica',
  'Croatia', 'Cuba', 'Cyprus', 'Czech Republic', 'Democratic Republic of the Congo', 'Denmark', 'Djibouti', 'Dominica', 'Dominican Republic', 'Ecuador',
  'Egypt', 'El Salvador', 'Equatorial Guinea', 'Eritrea', 'Estonia', 'Eswatini', 'Ethiopia', 'Fiji', 'Finland', 'France',
  'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Greece', 'Grenada', 'Guatemala', 'Guinea', 'Guinea-Bissau',
  'Guyana', 'Haiti', 'Honduras', 'Hungary', 'Iceland', 'India', 'Indonesia', 'Iran', 'Iraq', 'Ireland',
  'Israel', 'Italy', 'Jamaica', 'Japan', 'Jordan', 'Kazakhstan', 'Kenya', 'Kiribati', 'Kuwait', 'Kyrgyzstan',
  'Laos', 'Latvia', 'Lebanon', 'Lesotho', 'Liberia', 'Libya', 'Liechtenstein', 'Lithuania', 'Luxembourg', 'Madagascar',
  'Malawi', 'Malaysia', 'Maldives', 'Mali', 'Malta', 'Marshall Islands', 'Mauritania', 'Mauritius', 'Mexico', 'Micronesia',
  'Moldova', 'Monaco', 'Mongolia', 'Montenegro', 'Morocco', 'Mozambique', 'Myanmar', 'Namibia', 'Nauru', 'Nepal',
  'Netherlands', 'New Zealand', 'Nicaragua', 'Niger', 'Nigeria', 'North Korea', 'North Macedonia', 'Norway', 'Oman', 'Pakistan',
  'Palau', 'Palestine', 'Panama', 'Papua New Guinea', 'Paraguay', 'Peru', 'Philippines', 'Poland', 'Portugal', 'Qatar',
  'Romania', 'Russia', 'Rwanda', 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Vincent and the Grenadines', 'Samoa', 'San Marino', 'Sao Tome and Principe', 'Saudi Arabia',
  'Senegal', 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovakia', 'Slovenia', 'Solomon Islands', 'Somalia', 'South Africa',
  'South Korea', 'South Sudan', 'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Sweden', 'Switzerland', 'Syria', 'Taiwan',
  'Tajikistan', 'Tanzania', 'Thailand', 'Timor-Leste', 'Togo', 'Tonga', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Turkmenistan',
  'Tuvalu', 'Uganda', 'Ukraine', 'United Arab Emirates', 'United Kingdom', 'United States', 'Uruguay', 'Uzbekistan', 'Vanuatu', 'Vatican City',
  'Venezuela', 'Vietnam', 'Yemen', 'Zambia', 'Zimbabwe'
];

export default function SettingsPage() {
  const { isLoggedIn, user, logout, login } = useAuth();
  const router = useRouter();

  // Tab state
  const [activeTab, setActiveTab] = useState<TabType>('profile');

  // Form states
  const [userData, setUserData] = useState<UserData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [saveMessage, setSaveMessage] = useState('');

  // Live countdown state
  const [countdown, setCountdown] = useState<string | null>(null);

  // Individual form states
  const [newUsername, setNewUsername] = useState('');
  const [newEmail, setNewEmail] = useState('');
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [newBio, setNewBio] = useState('');
  const [selectedRole, setSelectedRole] = useState('');
  const [selectedOliveBranch, setSelectedOliveBranch] = useState<string | null>(null);
  const [newPhoneNumber, setNewPhoneNumber] = useState('');
  const [newBirthday, setNewBirthday] = useState('');
  const [newCountry, setNewCountry] = useState('');
  const [newCity, setNewCity] = useState('');

  // Validation states
  const [usernameValidation, setUsernameValidation] = useState<ValidationResult>({ errors: [], isValid: true });
  const [emailValidation, setEmailValidation] = useState<ValidationResult>({ errors: [], isValid: true });
  const [passwordValidation, setPasswordValidation] = useState<ValidationResult>({ errors: [], isValid: true });
  const [currentPasswordValid, setCurrentPasswordValid] = useState<boolean | null>(null);
  const [passwordsMatch, setPasswordsMatch] = useState<boolean | null>(null);

  // Modal states
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [showEmailVerification, setShowEmailVerification] = useState(false);
  const [emailVerificationCode, setEmailVerificationCode] = useState('');
  const [deleteConfirmUsername, setDeleteConfirmUsername] = useState('');
  const [deleteConfirmPassword, setDeleteConfirmPassword] = useState('');
  const [deleteValidationError, setDeleteValidationError] = useState('');

  // 2FA states
  const [smsEnabled, setSmsEnabled] = useState(false);
  const [emailTwoFactorEnabled, setEmailTwoFactorEnabled] = useState(false);
  const [showSmsSetup, setShowSmsSetup] = useState(false);
  const [smsVerificationCode, setSmsVerificationCode] = useState('');

  // Username change cooldown with live updates
  const getUsernameChangeTimeLeft = () => {
    if (!userData?.lastUsernameChange) return null;
    
    const lastChange = new Date(userData.lastUsernameChange);
    const cooldownEnd = new Date(lastChange.getTime() + 14 * 24 * 60 * 60 * 1000);
    const now = new Date();
    
    if (now >= cooldownEnd) return null;
    
    const timeLeft = cooldownEnd.getTime() - now.getTime();
    const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
    const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
    
    return `${days.toString().padStart(2, '0')}:${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  };

  const canChangeUsername = () => {
    return getUsernameChangeTimeLeft() === null;
  };

  // Live countdown timer
  useEffect(() => {
    const updateCountdown = () => {
      setCountdown(getUsernameChangeTimeLeft());
    };

    updateCountdown(); // Initial update
    const interval = setInterval(updateCountdown, 1000); // Update every second

    return () => clearInterval(interval);
  }, [userData?.lastUsernameChange]);

  // Load user data
  useEffect(() => {
    if (!isLoggedIn) {
      router.push('/login');
      return;
    }

    const storedUser = localStorage.getItem('galwayUser');
    if (storedUser) {
      try {
        const parsed = JSON.parse(storedUser);
        // Set default values for new fields
        const userData: UserData = {
          ...parsed,
          roles: parsed.roles || ['operative'],
          inventory: parsed.inventory || [],
          twoFactor: parsed.twoFactor || {
            sms: { enabled: false },
            email: { enabled: false }
          }
        };
        setUserData(userData);
        setNewUsername(userData.username);
        setNewEmail(userData.email);
        setNewBio(userData.bio || '');
        setSelectedRole(userData.role);
        setSelectedOliveBranch(userData.activeOliveBranchId || null);
        setSmsEnabled(userData.twoFactor.sms.enabled);
        setEmailTwoFactorEnabled(userData.twoFactor.email.enabled);
        setNewPhoneNumber(userData.twoFactor.sms.phoneNumber || '');
        setNewBirthday(userData.birthday || '');
        setNewCountry(userData.country || '');
        setNewCity(userData.city || '');
      } catch (error) {
        console.error('Failed to parse user data:', error);
      }
    }
    setIsLoading(false);
  }, [isLoggedIn, router]);

  // Validation functions
  const validateUsername = (username: string): ValidationResult => {
    const errors: string[] = [];
    const cleanUsername = username.toLowerCase().trim();
    
    if (cleanUsername.length < 3) {
      errors.push('username must be at least 3 characters');
    } else if (cleanUsername.length > 20) {
      errors.push('username must be 20 characters or less');
    }
    
    if (!/^[a-z0-9._]+$/.test(cleanUsername)) {
      errors.push('only letters, numbers, periods, and underscores allowed');
    }
    
    return { errors, isValid: errors.length === 0 };
  };

  const validateEmail = (email: string): ValidationResult => {
    const errors: string[] = [];
    const cleanEmail = email.toLowerCase().trim();
    
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(cleanEmail)) {
      errors.push('please enter a valid email address');
    }
    
    return { errors, isValid: errors.length === 0 };
  };

  const validatePassword = (password: string): ValidationResult => {
    const errors: string[] = [];
    
    if (password.length > 0 && password.length < 8) {
      errors.push('password must be at least 8 characters');
    }
    
    return { errors, isValid: errors.length === 0 };
  };

  // Real-time validation
  useEffect(() => {
    if (userData && newUsername !== userData.username) {
      setUsernameValidation(validateUsername(newUsername));
      setHasUnsavedChanges(true);
    } else {
      setUsernameValidation({ errors: [], isValid: true });
    }
  }, [newUsername, userData]);

  useEffect(() => {
    if (userData && newEmail !== userData.email) {
      setEmailValidation(validateEmail(newEmail));
      setHasUnsavedChanges(true);
    } else {
      setEmailValidation({ errors: [], isValid: true });
    }
  }, [newEmail, userData]);

  useEffect(() => {
    if (newPassword.length > 0) {
      setPasswordValidation(validatePassword(newPassword));
      setHasUnsavedChanges(true);
    } else {
      setPasswordValidation({ errors: [], isValid: true });
    }
  }, [newPassword]);

  // Current password validation
  useEffect(() => {
    if (currentPassword.length > 0 && userData) {
      setCurrentPasswordValid(currentPassword === userData.password);
    } else {
      setCurrentPasswordValid(null);
    }
  }, [currentPassword, userData]);

  // Password match validation
  useEffect(() => {
    if (confirmPassword.length > 0 && newPassword.length > 0) {
      setPasswordsMatch(newPassword === confirmPassword);
    } else {
      setPasswordsMatch(null);
    }
  }, [newPassword, confirmPassword]);

  // Check for other unsaved changes
  useEffect(() => {
    if (!userData) return;
    
    const hasChanges = 
      newBio !== userData.bio ||
      selectedRole !== userData.role ||
      selectedOliveBranch !== (userData.activeOliveBranchId || null) ||
      smsEnabled !== userData.twoFactor.sms.enabled ||
      emailTwoFactorEnabled !== userData.twoFactor.email.enabled ||
      (smsEnabled && newPhoneNumber !== userData.twoFactor.sms.phoneNumber) ||
      newBirthday !== (userData.birthday || '') ||
      newCountry !== (userData.country || '') ||
      newCity !== (userData.city || '');
    
    setHasUnsavedChanges(hasChanges);
  }, [newBio, selectedRole, selectedOliveBranch, smsEnabled, emailTwoFactorEnabled, newPhoneNumber, newBirthday, newCountry, newCity, userData]);

  // Save changes
  const handleSaveChanges = async () => {
    if (!userData || isSaving) return;
    
    setIsSaving(true);
    setSaveMessage('');
    
    try {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const updatedUserData: UserData = {
        ...userData,
        bio: newBio,
        role: selectedRole,
        birthday: newBirthday || undefined,
        country: newCountry || undefined,
        city: newCity || undefined,
        twoFactor: {
          sms: {
            enabled: smsEnabled,
            phoneNumber: smsEnabled ? newPhoneNumber : undefined
          },
          email: {
            enabled: emailTwoFactorEnabled
          }
        }
      };

      // Handle olive branch selection - FIXED: Added null check
      if (selectedOliveBranch !== userData.activeOliveBranchId) {
        const selectedBranch = userData.inventory?.find(item => item.id === selectedOliveBranch);
        if (selectedBranch && selectedOliveBranch) { // Added selectedOliveBranch check
          updatedUserData.activeOliveBranchId = selectedOliveBranch;
          updatedUserData.oliveBranch = selectedBranch.data;
        } else if (!selectedOliveBranch) {
          // Handle case where user is clearing the selection
          updatedUserData.activeOliveBranchId = undefined;
          updatedUserData.oliveBranch = undefined;
        }
      }

      // Handle username change
      if (newUsername !== userData.username && canChangeUsername()) {
        updatedUserData.username = newUsername;
        updatedUserData.lastUsernameChange = new Date().toISOString();
      }

      // Handle email change (requires verification)
      if (newEmail !== userData.email && emailValidation.isValid) {
        setShowEmailVerification(true);
        return;
      }

      // Handle password change
      if (newPassword && passwordValidation.isValid && newPassword === confirmPassword) {
        if (currentPassword === userData.password) {
          updatedUserData.password = newPassword;
          setCurrentPassword('');
          setNewPassword('');
          setConfirmPassword('');
        } else {
          setSaveMessage('Current password is incorrect');
          setIsSaving(false);
          return;
        }
      } else if (newPassword && currentPassword && newPassword !== confirmPassword) {
        setSaveMessage('New passwords do not match');
        setIsSaving(false);
        return;
      } else if (newPassword && currentPassword && currentPassword !== userData.password) {
        setSaveMessage('Current password is incorrect');
        setIsSaving(false);
        return;
      }

      localStorage.setItem('galwayUser', JSON.stringify(updatedUserData));
      setUserData(updatedUserData);
      
      // Update the auth context with new user data including the selected branch
      if (user) {
        const selectedBranch = updatedUserData.inventory?.find(item => item.id === updatedUserData.activeOliveBranchId);
        const updatedUser = {
          username: updatedUserData.username,
          role: updatedUserData.role as any,
          onset: updatedUserData.onset,
          idNo: updatedUserData.idNo,
          bio: updatedUserData.bio,
          birthday: updatedUserData.birthday,
          country: updatedUserData.country,
          city: updatedUserData.city,
          oliveBranch: selectedBranch?.data
        };
        // Update auth state by calling login with updated data
        login(updatedUser);
      }
      
      setHasUnsavedChanges(false);
      setSaveMessage('Settings saved successfully');
      
    } catch (error) {
      setSaveMessage('Failed to save settings');
    } finally {
      setIsSaving(false);
    }
  };

  // Email verification
  const handleEmailVerification = async () => {
    if (emailVerificationCode === '123456') {
      const updatedUserData = {
        ...userData!,
        email: newEmail,
        isEmailVerified: true
      };
      localStorage.setItem('galwayUser', JSON.stringify(updatedUserData));
      setUserData(updatedUserData);
      setShowEmailVerification(false);
      setEmailVerificationCode('');
      setSaveMessage('Email updated and verified successfully');
      setHasUnsavedChanges(false);
    } else {
      setSaveMessage('Invalid verification code');
    }
  };

  // Delete account
  const handleDeleteAccount = async () => {
    if (!userData) return;
    
    // Validate username and password
    if (deleteConfirmUsername !== userData.username) {
      setDeleteValidationError('Username does not match');
      return;
    }
    
    if (deleteConfirmPassword !== userData.password) {
      setDeleteValidationError('Password is incorrect');
      return;
    }
    
    // Clear validation error and proceed with deletion
    setDeleteValidationError('');
    localStorage.removeItem('galwayUser');
    logout();
    router.push('/');
  };

  const resetDeleteModal = () => {
    setShowDeleteConfirm(false);
    setDeleteConfirmUsername('');
    setDeleteConfirmPassword('');
    setDeleteValidationError('');
  };

  // SMS 2FA setup
  const handleSmsSetup = async () => {
    if (smsVerificationCode === '123456') {
      setSmsEnabled(true);
      setShowSmsSetup(false);
      setSmsVerificationCode('');
      setSaveMessage('SMS 2FA enabled successfully');
    } else {
      setSaveMessage('Invalid SMS verification code');
    }
  };

  // Tab definitions
  const tabs = [
    {
      id: 'profile' as TabType,
      name: 'Profile',
      icon: (
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
        </svg>
      )
    },
    {
      id: 'account' as TabType,
      name: 'Account',
      icon: (
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
      )
    },
    {
      id: 'security' as TabType,
      name: 'Security',
      icon: (
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
        </svg>
      )
    },
    {
      id: 'danger' as TabType,
      name: 'Danger Zone',
      icon: (
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 18.5c-.77.833.192 2.5 1.732 2.5z" />
        </svg>
      )
    }
  ];

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150 flex items-center justify-center">
        <div className="text-center">
          <p className="text-neutral-600 font-mono">Loading settings...</p>
        </div>
      </div>
    );
  }

  if (!userData) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150 flex items-center justify-center">
        <div className="text-center">
          <p className="text-neutral-600 font-mono">Please log in to access settings</p>
          <Link href="/login" className="text-neutral-900 hover:underline mt-2 inline-block">
            Go to login
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150 relative overflow-hidden">
      {/* Background pattern */}
      <div className="absolute inset-0 opacity-[0.02]">
        <div className="absolute inset-0" style={{
          backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23000000' fill-opacity='0.4'%3E%3Ccircle cx='7' cy='7' r='1'/%3E%3Ccircle cx='53' cy='53' r='1'/%3E%3Ccircle cx='30' cy='30' r='1'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`,
        }} />
      </div>

      {/* Unsaved changes warning */}
      {hasUnsavedChanges && (
        <div className="fixed top-20 left-1/2 transform -translate-x-1/2 bg-yellow-50 border border-yellow-200 rounded-md px-4 py-2 z-50">
          <p className="text-sm text-yellow-800 font-mono">You have unsaved changes</p>
        </div>
      )}

      <div className="relative z-10 max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-semibold text-neutral-900 mb-2">Account Settings</h1>
          <p className="text-neutral-600 text-sm font-mono">
            Manage your operative profile and security preferences
          </p>
        </div>

        {/* Save message */}
        {saveMessage && (
          <div className={`mb-6 p-3 rounded-md ${
            saveMessage.includes('success') 
              ? 'bg-green-50 border border-green-200 text-green-800'
              : 'bg-red-50 border border-red-200 text-red-800'
          }`}>
            <p className="text-sm font-mono">{saveMessage}</p>
          </div>
        )}

        <div className="bg-white rounded-lg shadow-lg border border-neutral-200 overflow-hidden">
          {/* Tab Navigation */}
          <div className="border-b border-neutral-200">
            <nav className="flex space-x-0" aria-label="Tabs">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`group flex items-center space-x-2 px-6 py-4 text-sm font-medium font-mono transition-all duration-200 border-b-2 ${
                    activeTab === tab.id
                      ? 'border-neutral-900 text-neutral-900 bg-neutral-50'
                      : 'border-transparent text-neutral-500 hover:text-neutral-700 hover:border-neutral-300'
                  } ${tab.id === 'danger' ? 'text-red-600 hover:text-red-700' : ''}`}
                >
                  <span className="group-hover:scale-110 transition-transform duration-200">
                    {tab.icon}
                  </span>
                  <span className="uppercase tracking-wide">{tab.name}</span>
                </button>
              ))}
            </nav>
          </div>

          {/* Tab Content */}
          <div className="p-6 sm:p-8">
            {/* Profile Tab */}
            {activeTab === 'profile' && (
              <div className="space-y-6 max-w-2xl">
                <div>
                  <h2 className="text-xl font-semibold text-neutral-900 mb-4">Profile Information</h2>
                  <p className="text-sm text-neutral-600 font-mono mb-6">
                    Update your public profile details and preferences.
                  </p>
                </div>

                {/* Username */}
                <div>
                  <label className="block text-sm font-medium text-neutral-700 mb-2 font-mono uppercase">
                    username
                  </label>
                  <input
                    type="text"
                    value={newUsername}
                    onChange={(e) => setNewUsername(e.target.value.toLowerCase())}
                    disabled={!canChangeUsername()}
                    className={`w-full px-4 py-3 border rounded-md font-mono text-sm transition-all duration-200 ${
                      canChangeUsername() 
                        ? 'border-neutral-300 focus:ring-2 focus:ring-neutral-900 focus:border-transparent'
                        : 'border-neutral-200 bg-neutral-50 text-neutral-500 cursor-not-allowed'
                    }`}
                  />
                  {!canChangeUsername() && (
                    <p className="text-xs text-orange-600 mt-1 font-mono">
                      Next change available in: {countdown}
                    </p>
                  )}
                  {usernameValidation.errors.length > 0 && (
                    <p className="text-xs text-red-600 mt-1 font-mono">
                      {usernameValidation.errors[0]}
                    </p>
                  )}
                </div>

                {/* Bio */}
                <div>
                  <label className="block text-sm font-medium text-neutral-700 mb-2 font-mono uppercase">
                    bio
                  </label>
                  <textarea
                    value={newBio}
                    onChange={(e) => setNewBio(e.target.value)}
                    className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
                    rows={3}
                    maxLength={120}
                    placeholder="Tell others about yourself..."
                  />
                  <p className="text-xs text-neutral-500 mt-1 font-mono">
                    {newBio.length}/120 characters
                  </p>
                </div>

                {/* Role Selection */}
                <div>
                  <label className="block text-sm font-medium text-neutral-700 mb-2 font-mono uppercase">
                    display role
                  </label>
                  <select
                    value={selectedRole}
                    onChange={(e) => setSelectedRole(e.target.value)}
                    className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
                  >
                    {userData.roles.map(role => (
                      <option key={role} value={role}>{role}</option>
                    ))}
                  </select>
                </div>

                {/* Olive Branch Selection */}
                <div>
                  <label className="block text-sm font-medium text-neutral-700 mb-2 font-mono uppercase">
                    active identifier
                  </label>
                  {userData.inventory && userData.inventory.filter(item => item.type === 'branch').length > 1 ? (
                    <div className="space-y-3">
                      <select
                        value={selectedOliveBranch || ''}
                        onChange={(e) => setSelectedOliveBranch(e.target.value || null)}
                        className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm uppercase"
                      >
                        <option value="">Select a branch...</option>
                        {userData.inventory
                          .filter(item => item.type === 'branch')
                          .map(branch => (
                            <option key={branch.id} value={branch.id}>
                              {branch.data?.oliveCount || 0}-{branch.data?.colors?.olive || '#000000'}-{branch.data?.colors?.branch || '#000000'}-{branch.rarity?.count?.toUpperCase() || 'UNKNOWN'}
                            </option>
                          ))}
                      </select>
                      
                      {/* Branch Preview */}
                      {selectedOliveBranch && userData.inventory && (
                        <div className="flex items-center space-x-4 p-3 bg-neutral-50 rounded-md">
                          <div className="w-16 h-16 border border-neutral-200 rounded-lg overflow-hidden bg-white">
                            {(() => {
                              const branch = userData.inventory.find(item => item.id === selectedOliveBranch);
                              return branch?.data?.svg ? (
                                <div 
                                  className="w-full h-full"
                                  dangerouslySetInnerHTML={{ __html: branch.data.svg }}
                                />
                              ) : null;
                            })()}
                          </div>
                          <div className="flex-1">
                            {(() => {
                              const branch = userData.inventory.find(item => item.id === selectedOliveBranch);
                              return branch?.data ? (
                                <div className="text-xs font-mono text-neutral-600 space-y-1">
                                  <p>{branch.data.oliveCount} {branch.data.oliveType?.toLowerCase()}</p>
                                  {branch.rarity && (
                                    <p>rarity: <span className={`${
                                      branch.rarity.count === 'Very Rare' ? 'text-red-600' :
                                      branch.rarity.count === 'Rare' ? 'text-purple-600' :
                                      branch.rarity.count === 'Uncommon' ? 'text-blue-600' : 'text-green-600'
                                    }`}>{branch.rarity.count.toLowerCase()}</span> ({branch.rarity.countPercentage}%)</p>
                                  )}
                                  <p className="text-neutral-500">id: #{branch.id.slice(-6)}</p>
                                </div>
                              ) : null;
                            })()}
                          </div>
                        </div>
                      )}
                    </div>
                  ) : userData.inventory && userData.inventory.filter(item => item.type === 'branch').length === 1 ? (
                    <div className="w-full px-4 py-3 border border-neutral-200 rounded-md bg-neutral-50 text-neutral-500 font-mono text-sm">
                      Only one branch available. <Link href="/inventory" className="text-neutral-700 hover:underline">Visit inventory ‚Üí</Link> to plant seeds for more branches.
                    </div>
                  ) : (
                    <div className="w-full px-4 py-3 border border-neutral-200 rounded-md bg-neutral-50 text-neutral-500 font-mono text-sm uppercase">
                      No alternate branches available. <Link href="/catalog" className="text-green-700 hover:underline">buy seed(s)?</Link>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Account Tab */}
            {activeTab === 'account' && (
              <div className="space-y-6 max-w-2xl">
                <div>
                  <h2 className="text-xl font-semibold text-neutral-900 mb-4">Account Information</h2>
                  <p className="text-sm text-neutral-600 font-mono mb-6">
                    View and update your account details.
                  </p>
                </div>

                {/* Email */}
                <div>
                  <label className="block text-sm font-medium text-neutral-700 mb-2 font-mono lowercase">
                    email address
                  </label>
                  <input
                    type="email"
                    value={newEmail}
                    onChange={(e) => setNewEmail(e.target.value.toLowerCase())}
                    className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
                  />
                  {emailValidation.errors.length > 0 && (
                    <p className="text-xs text-red-600 mt-1 font-mono">
                      {emailValidation.errors[0]}
                    </p>
                  )}
                  {newEmail !== userData.email && (
                    <p className="text-xs text-blue-600 mt-1 font-mono">
                      Email change requires verification
                    </p>
                  )}
                </div>

                {/* Read-only fields */}
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                  <div>
                    <label className="block text-sm font-medium text-neutral-500 mb-2 font-mono lowercase">
                      account onset
                    </label>
                    <div className="w-full px-4 py-3 border border-neutral-200 rounded-md bg-neutral-50 text-neutral-600 font-mono text-sm">
                      {userData.onset}
                    </div>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-neutral-500 mb-2 font-mono lowercase">
                      operative id
                    </label>
                    <div className="w-full px-4 py-3 border border-neutral-200 rounded-md bg-neutral-50 text-neutral-600 font-mono text-sm">
                      #{userData.idNo}
                    </div>
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-neutral-500 mb-2 font-mono lowercase">
                    email status
                  </label>
                  <div className="w-full px-4 py-3 border border-neutral-200 rounded-md bg-neutral-50 text-neutral-600 font-mono text-sm">
                    {userData.isEmailVerified ? '‚úì verified' : '‚ö† unverified'}
                  </div>
                </div>

                {/* Personal Information */}
                <div className="mt-8">
                  <h3 className="text-lg font-medium text-neutral-800 mb-4">Personal Information</h3>
                  <p className="text-sm text-neutral-600 font-mono mb-4">
                    Optional demographic information (not displayed publicly).
                  </p>
                  
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 mb-2 font-mono lowercase">
                        birthday
                      </label>
                      <input
                        type="date"
                        value={newBirthday}
                        onChange={(e) => setNewBirthday(e.target.value)}
                        className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 mb-2 font-mono lowercase">
                        country
                      </label>
                      <select
                        value={newCountry}
                        onChange={(e) => setNewCountry(e.target.value)}
                        className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
                      >
                        <option value="">Select a country</option>
                        {COUNTRIES.slice(1).map((country) => (
                          <option key={country} value={country}>
                            {country}
                          </option>
                        ))}
                      </select>
                    </div>
                  </div>
                  
                  <div className="mt-6">
                    <label className="block text-sm font-medium text-neutral-700 mb-2 font-mono lowercase">
                      city
                    </label>
                    <input
                      type="text"
                      value={newCity}
                      onChange={(e) => setNewCity(e.target.value)}
                      placeholder="e.g., New York"
                      className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
                    />
                  </div>
                </div>
              </div>
            )}

            {/* Security Tab */}
            {activeTab === 'security' && (
              <div className="space-y-8 max-w-2xl">
                <div>
                  <h2 className="text-xl font-semibold text-neutral-900 mb-4">Security Settings</h2>
                  <p className="text-sm text-neutral-600 font-mono mb-6">
                    Manage your password and two-factor authentication.
                  </p>
                </div>

                {/* Password Change */}
                <div>
                  <h3 className="text-lg font-medium text-neutral-800 mb-4">Change Password</h3>
                  
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 mb-2 font-mono lowercase">
                        current password
                      </label>
                      <input
                        type="password"
                        value={currentPassword}
                        onChange={(e) => setCurrentPassword(e.target.value)}
                        className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
                      />
                      {currentPasswordValid === true && (
                        <p className="text-xs text-green-600 mt-1 font-mono">
                          ‚úì current password verified
                        </p>
                      )}
                      {currentPasswordValid === false && (
                        <p className="text-xs text-red-600 mt-1 font-mono">
                          ‚úó incorrect current password
                        </p>
                      )}
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 mb-2 font-mono lowercase">
                        new password
                      </label>
                      <input
                        type="password"
                        value={newPassword}
                        onChange={(e) => setNewPassword(e.target.value)}
                        className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
                      />
                      {passwordValidation.errors.length > 0 && (
                        <p className="text-xs text-red-600 mt-1 font-mono">
                          {passwordValidation.errors[0]}
                        </p>
                      )}
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 mb-2 font-mono lowercase">
                        confirm new password
                      </label>
                      <input
                        type="password"
                        value={confirmPassword}
                        onChange={(e) => setConfirmPassword(e.target.value)}
                        className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm"
                      />
                      {passwordsMatch === true && (
                        <p className="text-xs text-green-600 mt-1 font-mono">
                          ‚úì passwords match
                        </p>
                      )}
                      {passwordsMatch === false && (
                        <p className="text-xs text-red-600 mt-1 font-mono">
                          ‚úó passwords do not match
                        </p>
                      )}
                    </div>
                  </div>
                </div>

                {/* Two-Factor Authentication */}
                <div>
                  <h3 className="text-lg font-medium text-neutral-800 mb-4">Two-Factor Authentication</h3>
                  
                  {/* SMS 2FA */}
                  <div className="mb-4 p-4 border border-neutral-200 rounded-md">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-sm font-medium text-neutral-700 font-mono">SMS Authentication</span>
                      <button
                        onClick={() => smsEnabled ? setSmsEnabled(false) : setShowSmsSetup(true)}
                        className={`px-3 py-1 text-xs font-mono rounded transition-colors duration-200 ${
                          smsEnabled 
                            ? 'bg-red-100 text-red-700 hover:bg-red-200'
                            : 'bg-green-100 text-green-700 hover:bg-green-200'
                        }`}
                      >
                        {smsEnabled ? 'disable' : 'enable'}
                      </button>
                    </div>
                    {smsEnabled && (
                      <div>
                        <input
                          type="tel"
                          value={newPhoneNumber}
                          onChange={(e) => setNewPhoneNumber(e.target.value)}
                          placeholder="Phone number"
                          className="w-full px-3 py-2 border border-neutral-300 rounded text-sm font-mono"
                        />
                      </div>
                    )}
                  </div>

                  {/* Email 2FA */}
                  <div className="p-4 border border-neutral-200 rounded-md">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium text-neutral-700 font-mono">Email Authentication</span>
                      <button
                        onClick={() => setEmailTwoFactorEnabled(!emailTwoFactorEnabled)}
                        className={`px-3 py-1 text-xs font-mono rounded transition-colors duration-200 ${
                          emailTwoFactorEnabled 
                            ? 'bg-red-100 text-red-700 hover:bg-red-200'
                            : 'bg-green-100 text-green-700 hover:bg-green-200'
                        }`}
                      >
                        {emailTwoFactorEnabled ? 'disable' : 'enable'}
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Danger Zone Tab */}
            {activeTab === 'danger' && (
              <div className="space-y-6 max-w-2xl">
                <div>
                  <h2 className="text-xl font-semibold text-red-800 mb-4">Danger Zone</h2>
                  <p className="text-sm text-red-600 font-mono mb-6">
                    These actions cannot be undone. Proceed with caution.
                  </p>
                </div>
                
                <div className="p-6 bg-red-50 rounded-md border border-red-200">
                  <h3 className="text-lg font-medium text-red-800 mb-2">Delete Account</h3>
                  <p className="text-sm text-red-600 mb-4 font-mono">
                    This action cannot be undone. All data will be permanently deleted including your operative profile, olive branches, and all associated research records.
                  </p>
                  <button
                    onClick={() => setShowDeleteConfirm(true)}
                    className="px-4 py-2 bg-red-600 text-white text-sm font-mono rounded hover:bg-red-700 transition-colors duration-200"
                  >
                    Delete Account
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Save Button */}
        <div className="mt-8 flex justify-between items-center">
          <Link
            href="/"
            className="text-neutral-600 hover:text-neutral-800 transition-colors duration-200 font-mono text-sm"
          >
            ‚Üê back to home
          </Link>
          
          <button
            onClick={handleSaveChanges}
            disabled={!hasUnsavedChanges || isSaving}
            className={`px-6 py-3 font-mono text-sm uppercase tracking-wide transition-all duration-200 border-2 ${
              hasUnsavedChanges && !isSaving
                ? 'bg-transparent text-neutral-900 border-neutral-300 hover:bg-neutral-900 hover:text-white hover:border-neutral-900 hover:shadow-lg transform hover:-translate-y-0.5'
                : 'bg-neutral-200 text-neutral-500 border-neutral-200 cursor-not-allowed'
            }`}
          >
            {isSaving ? 'saving...' : 'save changes'}
          </button>
        </div>
      </div>

      {/* Modals remain the same */}
      {/* Delete Account Confirmation Modal */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-lg font-semibold text-red-800 mb-4">Confirm Account Deletion</h3>
            <p className="text-sm text-neutral-600 mb-6">
              This action cannot be undone. All your data will be permanently deleted including your operative profile, olive branches, and all associated research records.
            </p>
            
            <div className="space-y-4 mb-6">
              <div>
                <label className="block text-sm font-medium text-neutral-700 mb-2 font-mono">
                  Type your username to confirm: <span className="text-red-600">{userData?.username}</span>
                </label>
                <input
                  type="text"
                  value={deleteConfirmUsername}
                  onChange={(e) => setDeleteConfirmUsername(e.target.value)}
                  placeholder={userData?.username}
                  className="w-full px-3 py-2 border border-neutral-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent transition-all duration-200 font-mono text-sm"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-neutral-700 mb-2 font-mono">
                  Enter your password to confirm
                </label>
                <input
                  type="password"
                  value={deleteConfirmPassword}
                  onChange={(e) => setDeleteConfirmPassword(e.target.value)}
                  placeholder="Password"
                  className="w-full px-3 py-2 border border-neutral-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent transition-all duration-200 font-mono text-sm"
                />
              </div>
              
              {deleteValidationError && (
                <div className="bg-red-50 border border-red-200 rounded-md p-3">
                  <p className="text-sm text-red-700 font-mono">{deleteValidationError}</p>
                </div>
              )}
            </div>
            
            <div className="flex space-x-3">
              <button
                onClick={resetDeleteModal}
                className="flex-1 px-4 py-2 bg-neutral-200 text-neutral-700 rounded hover:bg-neutral-300 transition-colors duration-200 font-mono text-sm"
              >
                Cancel
              </button>
              <button
                onClick={handleDeleteAccount}
                disabled={!deleteConfirmUsername || !deleteConfirmPassword}
                className="flex-1 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200 font-mono text-sm"
              >
                Delete Account
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Email Verification Modal */}
      {showEmailVerification && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-lg font-semibold text-neutral-800 mb-4">Verify New Email</h3>
            <p className="text-sm text-neutral-600 mb-4 font-mono">
              Enter the verification code sent to {newEmail}
            </p>
            <div className="mb-4">
              <input
                type="text"
                value={emailVerificationCode}
                onChange={(e) => setEmailVerificationCode(e.target.value)}
                placeholder="123456"
                className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-lg text-center tracking-widest"
                maxLength={6}
              />
            </div>
            <div className="bg-yellow-50 border border-yellow-200 rounded-md p-3 mb-4">
              <p className="text-xs text-yellow-800 font-mono text-center">
                Demo Mode: Use code <strong>123456</strong>
              </p>
            </div>
            <div className="flex space-x-3">
              <button
                onClick={() => {
                  setShowEmailVerification(false);
                  setEmailVerificationCode('');
                }}
                className="flex-1 px-4 py-2 bg-neutral-200 text-neutral-700 rounded hover:bg-neutral-300 transition-colors duration-200 font-mono text-sm"
              >
                Cancel
              </button>
              <button
                onClick={handleEmailVerification}
                disabled={emailVerificationCode.length !== 6}
                className="flex-1 px-4 py-2 bg-neutral-900 text-white rounded hover:bg-neutral-700 transition-colors duration-200 font-mono text-sm disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Verify
              </button>
            </div>
          </div>
        </div>
      )}

      {/* SMS Setup Modal */}
      {showSmsSetup && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-lg font-semibold text-neutral-800 mb-4">Setup SMS 2FA</h3>
            <p className="text-sm text-neutral-600 mb-4 font-mono">
              Enter the verification code sent to your phone
            </p>
            <div className="mb-4">
              <input
                type="text"
                value={smsVerificationCode}
                onChange={(e) => setSmsVerificationCode(e.target.value)}
                placeholder="123456"
                className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-lg text-center tracking-widest"
                maxLength={6}
              />
            </div>
            <div className="bg-yellow-50 border border-yellow-200 rounded-md p-3 mb-4">
              <p className="text-xs text-yellow-800 font-mono text-center">
                Demo Mode: Use code <strong>123456</strong>
              </p>
            </div>
            <div className="flex space-x-3">
              <button
                onClick={() => {
                  setShowSmsSetup(false);
                  setSmsVerificationCode('');
                }}
                className="flex-1 px-4 py-2 bg-neutral-200 text-neutral-700 rounded hover:bg-neutral-300 transition-colors duration-200 font-mono text-sm"
              >
                Cancel
              </button>
              <button
                onClick={handleSmsSetup}
                disabled={smsVerificationCode.length !== 6}
                className="flex-1 px-4 py-2 bg-neutral-900 text-white rounded hover:bg-neutral-700 transition-colors duration-200 font-mono text-sm disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Enable SMS 2FA
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// === END app/settings/page.tsx ===


============================================================
DIRECTORY: app/verify-email
============================================================

// === app/verify-email/page.tsx ===
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';

interface PendingUser {
  username: string;
  email: string;
  password: string;
  role: string;
  onset: string;
  isEmailVerified: boolean;
  registrationStep: string;
  accountCreated: string;
  deletionWarningDate: string;
}

export default function VerifyEmailPage() {
  const router = useRouter();
  const [pendingUser, setPendingUser] = useState<PendingUser | null>(null);
  const [isResending, setIsResending] = useState(false);
  const [resendCooldown, setResendCooldown] = useState(0);
  const [verificationCooldown, setVerificationCooldown] = useState(0);
  const [emailSent, setEmailSent] = useState(false);
  const [verificationCode, setVerificationCode] = useState('');
  const [isVerifying, setIsVerifying] = useState(false);
  const [verificationError, setVerificationError] = useState('');
  
  // Email editing states
  const [isEditingEmail, setIsEditingEmail] = useState(false);
  const [editedEmail, setEditedEmail] = useState('');
  const [emailEditError, setEmailEditError] = useState('');
  const [isSavingEmail, setIsSavingEmail] = useState(false);

  // Mock verification code for demo (in real app, this would be sent to email)
  const mockVerificationCode = '123456';

  useEffect(() => {
    // Get pending user data
    const storedUser = localStorage.getItem('galwayUserPending');
    if (!storedUser) {
      router.push('/register');
      return;
    }

    const user = JSON.parse(storedUser);
    setPendingUser(user);
    setEditedEmail(user.email);
    setEmailSent(true); // Assume email was sent after registration
  }, [router]);

  useEffect(() => {
    // Cooldown timer for resend button
    if (resendCooldown > 0) {
      const timer = setTimeout(() => {
        setResendCooldown(resendCooldown - 1);
      }, 1000);
      return () => clearTimeout(timer);
    }
  }, [resendCooldown]);

  useEffect(() => {
    // Cooldown timer for verification attempts
    if (verificationCooldown > 0) {
      const timer = setTimeout(() => {
        setVerificationCooldown(verificationCooldown - 1);
      }, 1000);
      return () => clearTimeout(timer);
    }
  }, [verificationCooldown]);

  // Email validation function (reused from register page)
  const validateEmail = (email: string): { isValid: boolean; error: string } => {
    const cleanEmail = email.toLowerCase().trim();
    
    if (cleanEmail.length === 0) {
      return { isValid: false, error: 'email address is required' };
    }
    
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(cleanEmail)) {
      return { isValid: false, error: 'please enter a valid email address' };
    }
    
    if (cleanEmail.length > 254) {
      return { isValid: false, error: 'email address too long' };
    }
    
    return { isValid: true, error: '' };
  };

  const handleEditEmail = () => {
    setIsEditingEmail(true);
    setEmailEditError('');
  };

  const handleCancelEditEmail = () => {
    setIsEditingEmail(false);
    setEditedEmail(pendingUser?.email || '');
    setEmailEditError('');
  };

  const handleSaveEmail = async () => {
    if (!pendingUser || isSavingEmail) return;

    const validation = validateEmail(editedEmail);
    if (!validation.isValid) {
      setEmailEditError(validation.error);
      return;
    }

    const cleanEmail = editedEmail.toLowerCase().trim();
    
    // Check if email actually changed
    if (cleanEmail === pendingUser.email) {
      setIsEditingEmail(false);
      return;
    }

    setIsSavingEmail(true);
    setEmailEditError('');

    try {
      // Simulate API call to update email
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Update the pending user data
      const updatedUser = {
        ...pendingUser,
        email: cleanEmail
      };

      // Save to localStorage
      localStorage.setItem('galwayUserPending', JSON.stringify(updatedUser));
      
      // Update local state
      setPendingUser(updatedUser);
      setIsEditingEmail(false);
      
      // Reset verification state since email changed
      setVerificationCode('');
      setVerificationError('');
      setResendCooldown(0);
      setVerificationCooldown(0);
      
      // Automatically send verification email to new address
      console.log('Demo: Email updated to', cleanEmail);
      console.log('Demo: New verification code automatically sent to updated email');
      
      // In a real app, you'd make an API call here to send verification email
      // await sendVerificationEmail(cleanEmail);
      
    } catch (error) {
      setEmailEditError('failed to update email. please try again.');
    } finally {
      setIsSavingEmail(false);
    }
  };

  const handleResendEmail = async () => {
    if (isResending || resendCooldown > 0) return;

    setIsResending(true);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      setEmailSent(true);
      setResendCooldown(60); // 60 second cooldown
      console.log('Demo: Verification email sent to', pendingUser?.email);
      console.log('Demo: Use code 123456 to verify');
      
    } catch (error) {
      console.error('Failed to resend email:', error);
    } finally {
      setIsResending(false);
    }
  };

  const handleVerifyCode = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!verificationCode.trim() || isVerifying || verificationCooldown > 0) return;
    
    setIsVerifying(true);
    setVerificationError('');
    
    try {
      // Simulate API verification
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      if (verificationCode.trim() === mockVerificationCode) {
        // Verification successful
        if (pendingUser) {
          const verifiedUser = {
            ...pendingUser,
            isEmailVerified: true,
            registrationStep: 'olive_branch_generation'
          };
          
          // Move from pending to verified
          localStorage.removeItem('galwayUserPending');
          localStorage.setItem('galwayUserVerified', JSON.stringify(verifiedUser));
          
          // Redirect to olive branch generation
          router.push('/generate-olive-branch');
        }
      } else {
        setVerificationError('invalid verification code. please try again.');
        setVerificationCooldown(60); // Start 60 second cooldown on failed attempt
      }
      
    } catch (error) {
      setVerificationError('verification failed. please try again.');
      setVerificationCooldown(60); // Start 60 second cooldown on error
    } finally {
      setIsVerifying(false);
    }
  };

  const handleSkipVerification = () => {
    if (pendingUser) {
      const unverifiedUser = {
        ...pendingUser,
        isEmailVerified: false,
        registrationStep: 'olive_branch_generation'
      };
      
      // Keep in pending state but proceed
      localStorage.setItem('galwayUserPending', JSON.stringify(unverifiedUser));
      router.push('/generate-olive-branch');
    }
  };

  const formatTimeRemaining = () => {
    if (!pendingUser) return '';
    
    const deletionDate = new Date(pendingUser.deletionWarningDate);
    const now = new Date();
    const timeLeft = deletionDate.getTime() - now.getTime();
    
    if (timeLeft <= 0) return 'expired';
    
    const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
    const hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    
    if (days > 0) {
      return `${days} day${days !== 1 ? 's' : ''}, ${hours} hour${hours !== 1 ? 's' : ''}`;
    } else {
      return `${hours} hour${hours !== 1 ? 's' : ''}`;
    }
  };

  if (!pendingUser) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150 flex items-center justify-center">
        <div className="text-center">
          <p className="text-neutral-600 font-mono">Loading...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-neutral-50 via-neutral-100 to-neutral-150 relative overflow-hidden">
      {/* Subtle background pattern */}
      <div className="absolute inset-0 opacity-[0.02]">
        <div className="absolute inset-0" style={{
          backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23000000' fill-opacity='0.4'%3E%3Ccircle cx='7' cy='7' r='1'/%3E%3Ccircle cx='53' cy='53' r='1'/%3E%3Ccircle cx='30' cy='30' r='1'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`,
        }} />
      </div>

      <div className="relative z-10 flex items-center justify-center p-4 sm:p-6 pt-8 sm:pt-10 min-h-screen">
        <div className="max-w-md mx-auto w-full">
          <div className="text-center mb-8">
            <h1 className="text-2xl sm:text-3xl font-semibold text-neutral-900 mb-3 leading-tight uppercase">
              Verify Your Email
            </h1>
            {/*<p className="text-neutral-600 text-sm leading-relaxed">
              Check your inbox and enter the verification code to activate your account.
            </p>*/}
          </div>

          <div className="bg-white rounded-lg p-6 sm:p-8 shadow-lg border border-neutral-200 space-y-6">
            {/* Email Status */}
            <div className="text-center">
              <div className="w-16 h-16 mx-auto mb-4 bg-neutral-100 rounded-full flex items-center justify-center">
                <svg className="w-8 h-8 text-neutral-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 3.26a2 2 0 001.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
              </div>
              <p className="text-sm text-neutral-700 font-mono mb-2 uppercase">
                verification code sent to:
              </p>
              
              {/* Email display/edit section */}
              {isEditingEmail ? (
                <div className="space-y-3">
                  <div>
                    <input
                      type="email"
                      value={editedEmail}
                      onChange={(e) => setEditedEmail(e.target.value.toLowerCase())}
                      className="w-full px-3 py-2 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-sm text-center"
                      placeholder="new@email.com"
                      autoFocus
                    />
                    {emailEditError && (
                      <p className="text-xs text-red-600 mt-1 font-mono">
                        {emailEditError}
                      </p>
                    )}
                  </div>
                  <div className="flex space-x-2 justify-center">
                    <button
                      onClick={handleSaveEmail}
                      disabled={isSavingEmail}
                      className="px-3 py-1 text-xs font-mono bg-neutral-900 text-white rounded hover:bg-neutral-700 transition-colors duration-200 disabled:opacity-50"
                    >
                      {isSavingEmail ? 'saving...' : 'save'}
                    </button>
                    <button
                      onClick={handleCancelEditEmail}
                      disabled={isSavingEmail}
                      className="px-3 py-1 text-xs font-mono bg-neutral-200 text-neutral-700 rounded hover:bg-neutral-300 transition-colors duration-200 disabled:opacity-50"
                    >
                      cancel
                    </button>
                  </div>
                </div>
              ) : (
                <div className="flex items-center justify-center space-x-2">
                  <p className="text-neutral-900 font-mono text-sm font-medium">
                    {pendingUser.email}
                  </p>
                  <button
                    onClick={handleEditEmail}
                    className="text-neutral-500 hover:text-neutral-700 transition-colors duration-200 p-1"
                    title="Edit email address"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                    </svg>
                  </button>
                </div>
              )}
            </div>

            {/* Demo Notice */}
            <div className="bg-yellow-50 border border-yellow-200 rounded-md p-3">
              <p className="text-xs text-yellow-800 font-mono text-center">
                Demo Mode: Use code <strong>123456</strong> to verify
              </p>
            </div>

            {/* Verification Code Form */}
            <form onSubmit={handleVerifyCode} className="space-y-4">
              <div>
                <label htmlFor="verificationCode" className="block text-sm font-medium text-neutral-700 mb-2 font-mono uppercase">
                  verification code
                </label>
                <input
                  type="text"
                  id="verificationCode"
                  value={verificationCode}
                  onChange={(e) => setVerificationCode(e.target.value.replace(/\D/g, '').slice(0, 6))}
                  className="w-full px-4 py-3 border border-neutral-300 rounded-md focus:ring-2 focus:ring-neutral-900 focus:border-transparent transition-all duration-200 font-mono text-lg text-center tracking-widest"
                  placeholder="000000"
                  maxLength={6}
                  required
                />
                {verificationError && (
                  <p className="text-xs text-red-600 mt-1 font-mono">
                    {verificationError}
                  </p>
                )}
              </div>

              <button
                type="submit"
                disabled={verificationCode.length !== 6 || isVerifying || verificationCooldown > 0}
                className={`w-full py-3 px-6 font-mono text-sm uppercase tracking-wide transition-all duration-200 border-2 ${
                  verificationCode.length === 6 && !isVerifying && verificationCooldown === 0
                    ? 'bg-transparent text-neutral-900 border-neutral-300 hover:bg-neutral-900 hover:text-white hover:border-neutral-900 hover:shadow-lg transform hover:-translate-y-0.5'
                    : 'bg-neutral-200 text-neutral-500 border-neutral-200 cursor-not-allowed'
                }`}
              >
                {isVerifying 
                  ? 'verifying...' 
                  : verificationCooldown > 0 
                    ? `wait ${verificationCooldown}s` 
                    : 'verify account'
                }
              </button>
            </form>

            {/* Resend Email */}
            <div className="text-center pt-4 border-t border-neutral-200">
              <p className="text-xs text-neutral-600 font-mono mb-3 uppercase">
                Didn't receive the code?
              </p>
              <button
                onClick={handleResendEmail}
                disabled={isResending || resendCooldown > 0}
                className={`text-sm font-mono ${
                  resendCooldown > 0 
                    ? 'text-neutral-400 cursor-not-allowed uppercase' 
                    : 'text-neutral-700 hover:text-neutral-900 hover:underline uppercase'
                } transition-all duration-200`}
              >
                {isResending 
                  ? 'sending...' 
                  : resendCooldown > 0 
                    ? `resend in ${resendCooldown}s` 
                    : 'resend code'
                }
              </button>
            </div>

            {/* Skip Option */}
            <div className="text-center pt-4 border-t border-neutral-200">
              <button
                onClick={handleSkipVerification}
                className="text-sm font-mono text-green-700 hover:text-neutral-800 transition-all duration-200 uppercase"
              >
                skip for now ‚Üí
              </button>
              <p className="text-xs text-green-700 font-mono mt-1 uppercase">
                (verify later in settings)
              </p>
            </div>

            {/* Deletion Warning */}
            <div className="bg-red-50 border border-red-200 rounded-md p-4">
              <div className="flex items-start space-x-2">
                <svg className="w-4 h-4 text-red-500 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 18.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
                <div>
                  <p className="text-xs text-red-800 font-mono font-medium uppercase">
                    Account Deletion Warning
                  </p>
                  <p className="text-xs text-red-700 font-mono mt-1 uppercase">
                    Unverified accounts are automatically deleted after 7 days.
                  </p>
                  <p className="text-xs text-red-600 font-mono mt-1 uppercase">
                    Time remaining: <strong>{formatTimeRemaining()}</strong>
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Footer Links */}
          <div className="text-center mt-6">
            <p className="text-sm text-neutral-500 font-mono">
              <Link 
                href="/register" 
                className="hover:text-neutral-700 transition-all duration-200 uppercase"
              >
                ‚Üê back to registration
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

// === END app/verify-email/page.tsx ===


============================================================
DIRECTORY: components
============================================================

// === components/GalwayIdCard.tsx ===
'use client';

import { useEffect, useRef, useState } from 'react';
import Link from 'next/link';
import { CardProps } from '@/lib/types';
import { OLIVE_BRANCH_BG_COLOR } from '@/lib/oliveGenerator';

interface OliveBranchData {
  svg: string;
  colors: {
    olive: string;
    branch: string;
    leaf: string;
  };
  oliveCount: number;
  oliveType?: string;
  rarity?: {
    count: string;
    type: string;
    countPercentage: number;
    typePercentage: number;
  };
  id: number;
}

interface ExtendedCardProps extends CardProps {
  oliveBranch?: OliveBranchData;
  size?: 'small' | 'large';
  compact?: boolean;
  context?: 'default' | 'modal';
}

export default function GalwayIdCard({
  role = 'guest',
  username,
  onset,
  idNo,
  bio,
  oliveBranch,
  followMouse = true,
  size = 'large',
  compact = false,
  context = 'default'
}: ExtendedCardProps) {
  const cardRef = useRef<HTMLDivElement>(null);
  const [mousePos, setMousePos] = useState({ x: 50, y: 0 });
  const [tilt, setTilt] = useState({ rotX: 0, rotY: 0 });
  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);
  const [guestOliveBranch, setGuestOliveBranch] = useState<OliveBranchData | null>(null);
  const [showContextMenu, setShowContextMenu] = useState(false);
  const [showTooltip, setShowTooltip] = useState(false);
  const [gyroEnabled, setGyroEnabled] = useState(false);

  // Generate a consistent black olive branch for guest users
  useEffect(() => {
    if (role === 'guest') {
      const demoBranch = {
        svg: `<svg width="100%" height="100%" viewBox="0 0 70 70" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="70" height="70" fill="${OLIVE_BRANCH_BG_COLOR}"/>
<!-- Main Stem -->
<rect x="33" y="20" width="4" height="30" fill="#8B7355"/>
<!-- Branches -->
<rect x="24" y="27" width="12" height="4" fill="#8B7355"/>
<rect x="34" y="37" width="12" height="4" fill="#8B7355"/>
<rect x="24" y="44" width="12" height="4" fill="#8B7355"/>
<!-- Leaves -->
<rect x="18" y="25" width="8" height="4" fill="#228B22"/>
<rect x="20" y="29" width="8" height="4" fill="#228B22"/>
<rect x="42" y="35" width="8" height="4" fill="#228B22"/>
<rect x="44" y="39" width="8" height="4" fill="#228B22"/>
<rect x="18" y="42" width="8" height="4" fill="#228B22"/>
<rect x="20" y="46" width="8" height="4" fill="#228B22"/>
<!-- Black Olives -->
<rect x="20" y="32" width="4" height="4" fill="#2F2F2F"/>
<rect x="40" y="42" width="4" height="4" fill="#2F2F2F"/>
<rect x="26" y="49" width="4" height="4" fill="#2F2F2F"/>
</svg>`,
        colors: { olive: '#2F2F2F', branch: '#8B7355', leaf: '#228B22' },
        oliveCount: 3,
        oliveType: 'black olives',
        rarity: {
          count: 'Uncommon',
          type: 'Common',
          countPercentage: 19,
          typePercentage: 25
        },
        id: 999999
      };
      setGuestOliveBranch(demoBranch);
    }
  }, [role]);

  // Check for reduced motion preference
  useEffect(() => {
    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
    setPrefersReducedMotion(mediaQuery.matches);
    
    const handleChange = (e: MediaQueryListEvent) => {
      setPrefersReducedMotion(e.matches);
    };
    
    mediaQuery.addEventListener('change', handleChange);
    return () => mediaQuery.removeEventListener('change', handleChange);
  }, []);

  // Mouse tracking for tilt effect (desktop only) - disabled for small cards
  useEffect(() => {
    if (!followMouse || prefersReducedMotion || size === 'small') return;

    const card = cardRef.current;
    if (!card) return;

    const handleMouseMove = (e: MouseEvent) => {
      const rect = card.getBoundingClientRect();
      const x = (e.clientX - rect.left) / rect.width;
      const y = (e.clientY - rect.top) / rect.height;
      
      const strength = 20;
      const rotY = (x - 0.5) * strength;
      const rotX = -(y - 0.5) * strength;
      
      setMousePos({ x: x * 100, y: y * 100 });
      setTilt({ rotX, rotY });
    };

    const handleMouseLeave = () => {
      setMousePos({ x: 50, y: 0 });
      setTilt({ rotX: 0, rotY: 0 });
    };

    card.addEventListener('mousemove', handleMouseMove);
    card.addEventListener('mouseleave', handleMouseLeave);

    return () => {
      card.removeEventListener('mousemove', handleMouseMove);
      card.removeEventListener('mouseleave', handleMouseLeave);
    };
  }, [followMouse, prefersReducedMotion, size]);

  // Enhanced device orientation tracking for mobile tilt - disabled for small cards
  useEffect(() => {
    if (prefersReducedMotion || size === 'small') return;

    const isMobile = window.matchMedia('(pointer: coarse)').matches;
    const isTouchDevice = 'ontouchstart' in window;
    
    if (!isMobile && !isTouchDevice) return;

    let permissionGranted = false;

    const handleOrientation = (event: DeviceOrientationEvent) => {
      if (event.beta !== null && event.gamma !== null) {
        const betaScale = 0.4;
        const gammaScale = 0.4;
        
        const rotX = Math.max(-20, Math.min(20, event.beta * betaScale));
        const rotY = Math.max(-20, Math.min(20, event.gamma * gammaScale));
        
        setTilt({ rotX: -rotX, rotY: rotY });
      }
    };

    const requestPermission = async () => {
      if (typeof DeviceOrientationEvent !== 'undefined' && 
          typeof (DeviceOrientationEvent as any).requestPermission === 'function') {
        
        try {
          const permission = await (DeviceOrientationEvent as any).requestPermission();
          if (permission === 'granted') {
            permissionGranted = true;
            setGyroEnabled(true);
            window.addEventListener('deviceorientation', handleOrientation);
            console.log('Gyroscope permission granted');
          } else {
            console.log('Gyroscope permission denied');
          }
        } catch (error) {
          console.error('Error requesting gyroscope permission:', error);
          window.addEventListener('deviceorientation', handleOrientation);
        }
      } else {
        permissionGranted = true;
        setGyroEnabled(true);
        window.addEventListener('deviceorientation', handleOrientation);
        console.log('Gyroscope enabled (no permission required)');
      }
    };

    requestPermission();

    return () => {
      if (permissionGranted) {
        window.removeEventListener('deviceorientation', handleOrientation);
      }
    };
  }, [prefersReducedMotion, size]);

  // Role-specific data
  const isGuest = role === 'guest';
  const displayUsername = isGuest ? 'guest_user' : username || 'guest_user';
  const displayOnset = isGuest ? 'n/a' : onset || 'n/a';
  const displayIdNo = isGuest ? '######' : idNo || '######';
  const displayBio = isGuest ? 'Register your operative id today!' : bio || 'No self-reported data on record...';

  // Dynamic username sizing with proportional scaling to card sizes
  const getUsernameSize = (name: string) => {
    if (size === 'small') {
      return 'text-[10px]';
    }
    // Scale proportionally: 280px base ‚Üí 320px (14% larger) ‚Üí 340px (21% larger)
    if (name.length <= 12) return 'text-xl lg:text-2xl xl:text-3xl';
    if (name.length <= 16) return 'text-lg lg:text-xl xl:text-2xl';
    return 'text-base lg:text-lg xl:text-xl';
  };

  // Dynamic bio text sizing with proportional scaling
  const getBioTextSize = (bio: string) => {
    if (size === 'small') {
      if (bio.length <= 30) return 'text-[5px] leading-[6px]';
      if (bio.length <= 50) return 'text-[4px] leading-[5px]';
      if (bio.length <= 80) return 'text-[3.5px] leading-[4px]';
      return 'text-[3px] leading-[4px]';
    }
    // Scale proportionally to maintain perfect ratios
    if (bio.length <= 40) return 'text-[10px] lg:text-[11px] xl:text-xs';
    if (bio.length <= 60) return 'text-[9px] lg:text-[10px] xl:text-[11px]';
    if (bio.length <= 80) return 'text-[8px] lg:text-[11px] leading-[12px] xl:text-xs leading-[14px]';
    if (bio.length <= 100) return 'text-[7px] lg:text-[10px] leading-[11px] xl:text-[11px] leading-[12px]';
    if (bio.length <= 130) return 'text-[6px] lg:text-[9px] leading-[10px] xl:text-[10px] leading-[11px]';
    return 'text-[5px] lg:text-[8px] leading-[9px] xl:text-[9px] leading-[10px]';
  };

  // Role colors and styling
  const roleStyles = {
    guest: { color: 'rgb(57, 57, 57)' },
    operative: { color: '#DB52F4' },
    contributor: { color: '#D5B504' },
    'beta-tester': { color: '#0D7F10' },
    moderator: { color: '#D40684' }
  };

  const currentStyle = roleStyles[role];

  // Proportional sizing - scale everything based on your card size progression
  // Base: 280px, SM: 280px, LG: 320px (14% increase), XL: 340px (21% increase from base)
  const containerClass = size === 'small' 
    ? 'w-full max-w-[100px] min-w-[80px]' 
    : 'w-full max-w-[280px] sm:max-w-[280px] lg:max-w-[320px] xl:max-w-[340px] min-w-[260px]';
    
  const cardRounding = size === 'small' ? 'rounded-[8px]' : 'rounded-[24px] lg:rounded-[28px] xl:rounded-[30px]';
  const cardPadding = size === 'small' 
    ? 'px-1.5 pt-1.5 pb-1' 
    : 'px-5 pt-5 pb-4 lg:px-6 lg:pt-6 lg:pb-4 xl:px-7 xl:pt-7 xl:pb-5';
  const imageRounding = size === 'small' ? 'rounded-sm' : 'rounded-xl lg:rounded-2xl xl:rounded-2xl';
  const bioHeight = size === 'small' 
    ? 'h-[16px]' 
    : 'h-10 lg:h-12 xl:h-14';
  const bioRounding = size === 'small' ? 'rounded-sm' : 'rounded-md lg:rounded-md xl:rounded-lg';
  const bioPadding = size === 'small' 
    ? 'px-1.5 py-1' 
    : 'px-3 py-2 lg:px-3 lg:py-2.5 xl:px-3 xl:py-3';
  
  // Proportional text sizing for metadata
  const metadataText = size === 'small' 
    ? 'text-[6px]' 
    : 'text-sm lg:text-base xl:text-lg';
      
  const metadataGap = size === 'small' 
    ? 'gap-y-0' 
    : 'gap-y-1.5 lg:gap-y-2 xl:gap-y-3';
      
  const usernameMargin = size === 'small' ? 'mt-0.5' : 'mt-2 lg:mt-2 xl:mt-3';
  const bioMargin = size === 'small' ? 'mt-0.5' : 'mt-2.5 lg:mt-3 xl:mt-4';
  const bioWidth = size === 'small' ? 'w-[85%]' : 'w-[82%]';
  const metadataWidth = size === 'small' ? 'w-[90%]' : 'w-[86%]';

  const dropShadowClass = {
    guest: size === 'small' ? 'shadow-md' : 'drop-shadow-card-guest',
    operative: size === 'small' ? 'shadow-md' : 'drop-shadow-card-operative',
    contributor: size === 'small' ? 'shadow-md' : 'drop-shadow-card-contributor',
    'beta-tester': size === 'small' ? 'shadow-md' : 'drop-shadow-card-beta-tester',
    moderator: size === 'small' ? 'shadow-md' : 'drop-shadow-card-moderator'
  };

  const usernameDropShadowClass = {
    guest: size === 'small' ? '' : 'drop-shadow-username-guest',
    operative: size === 'small' ? '' : 'drop-shadow-username-operative',
    contributor: size === 'small' ? '' : 'drop-shadow-username-contributor',
    'beta-tester': size === 'small' ? '' : 'drop-shadow-username-beta-tester',
    moderator: size === 'small' ? '' : 'drop-shadow-username-moderator'
  };

  // Enhanced olive branch rendering
  const renderOliveBranch = () => {
    if (!isGuest && oliveBranch && oliveBranch.svg) {
      return (
        <div className="w-full h-full">
          <div 
            className="w-full h-full"
            dangerouslySetInnerHTML={{ __html: oliveBranch.svg }}
          />
        </div>
      );
    }

    if (isGuest && guestOliveBranch && guestOliveBranch.svg) {
      return (
        <div className="w-full h-full">
          <div 
            className="w-full h-full opacity-60"
            dangerouslySetInnerHTML={{ __html: guestOliveBranch.svg }}
          />
          <div className="absolute inset-0 bg-neutral-900/5 flex items-center justify-center">
            <div className="text-center"></div>
          </div>
        </div>
      );
    }

    return (
      <div className="w-full h-full flex items-center justify-center bg-neutral-100">
        <div className="text-center">
          <div className={`${size === 'small' ? 'w-0.5 h-0.5' : 'w-4 h-4'} mx-auto mb-1 opacity-30 animate-pulse`}>
            <div className="w-full h-full bg-neutral-400 rounded-full"></div>
          </div>
          <div className={`${size === 'small' ? 'text-[4px]' : 'text-xs'} font-mono text-neutral-500`}>loading...</div>
        </div>
      </div>
    );
  };

  // Get the current olive branch data
  const currentOliveBranch = !isGuest && oliveBranch ? oliveBranch : guestOliveBranch;

  // Get rarity color based on rarity level
  const getRarityColor = (rarity: string) => {
    switch (rarity) {
      case 'Common': return 'text-green-600';
      case 'Uncommon': return 'text-blue-600';
      case 'Rare': return 'text-purple-600';
      case 'Very Rare': return 'text-red-600';
      default: return 'text-neutral-600';
    }
  };

  return (
    <div style={{ perspective: size === 'small' ? '600px' : '1200px' }} className={`${containerClass} mx-auto`}>
      <div
        ref={cardRef}
        className={`relative w-full aspect-cr80 ${cardRounding} bg-white border overflow-hidden ${dropShadowClass[role]} transition-transform duration-150 ease-out`}
        style={{
          transform: (prefersReducedMotion || size === 'small') ? 'none' : `rotateY(${tilt.rotY}deg) rotateX(${tilt.rotX}deg)`,
          transformStyle: 'preserve-3d'
        }}
      >
        {/* Top gloss streak */}
        <div 
          className="absolute -top-[30%] -left-[10%] w-[140%] h-[40%] pointer-events-none"
          style={{
            background: 'linear-gradient(to bottom, rgba(255,255,255,.65) 0%, rgba(255,255,255,.15) 60%, rgba(255,255,255,0) 100%)',
            transform: 'rotate(-16deg)',
            borderRadius: size === 'small' ? '24px' : '48px',
            filter: size === 'small' ? 'blur(0.5px)' : 'blur(1px)',
            mixBlendMode: 'screen'
          }}
        />

        {/* Card content */}
        <div className={`absolute inset-0 flex flex-col ${cardPadding}`}>
          {/* Profile image with olive branch */}
          <div className="flex justify-center">
            <div className={`relative aspect-square ${imageRounding} border border-neutral-200 overflow-hidden bg-neutral-50 flex-shrink-0`}
                 style={{ 
                   width: size === 'small' ? '60%' : '68%',
                   aspectRatio: '1'
                 }}>
              {renderOliveBranch()}
              
              {/* Context menu for olive branch info - only for large cards */}
              {currentOliveBranch && size === 'large' && (
                <div className="absolute top-2 right-3 z-20">
                  <button
                    onClick={() => {
                      setShowContextMenu(!showContextMenu);
                      setShowTooltip(false);
                    }}
                    className="text-sm font-mono text-neutral-600 hover:text-neutral-800 transition-colors duration-200 w-6 h-6 rounded-full border border-neutral-300 flex items-center justify-center bg-white/90 hover:bg-white/100"
                  >
                    ‚ãØ
                  </button>
                  
                  {/* Context Menu */}
                  {showContextMenu && (
                    <div className="absolute top-full right-0 mt-1 bg-white border border-neutral-200 rounded-md shadow-lg z-30 min-w-36 overflow-hidden">
                      <Link 
                        href="/olive-rarity"
                        className="block px-3 py-2 text-xs font-mono text-neutral-700 hover:bg-neutral-50 transition-colors duration-150 lowercase"
                        onClick={() => setShowContextMenu(false)}
                      >
                        view rarities ‚Üí
                      </Link>
                      <button 
                        onClick={() => {
                          setShowTooltip(!showTooltip);
                          setShowContextMenu(false);
                        }}
                        className="block w-full text-left px-3 py-2 text-xs font-mono text-neutral-700 hover:bg-neutral-50 transition-colors duration-150 lowercase border-t border-neutral-100"
                      >
                        branch info
                      </button>
                    </div>
                  )}

                  {/* Branch Info Tooltip */}
                  {showTooltip && (
                    <div className="absolute top-full right-0 mt-1 w-56 p-3 bg-white/95 backdrop-blur-sm border border-neutral-200 rounded-md shadow-lg text-xs font-mono text-neutral-600 leading-tight z-30">
                      <button 
                        onClick={() => setShowTooltip(false)}
                        className="absolute top-2 right-2 text-neutral-400 hover:text-neutral-600 w-4 h-4 flex items-center justify-center"
                      >
                        √ó
                      </button>
                      
                      {!isGuest && currentOliveBranch.rarity ? (
                        <div className="space-y-2">
                          <div className="space-y-1">
                            <div className="flex justify-between">
                              <span>count:</span>
                              <span>{currentOliveBranch.oliveCount} olives</span>
                            </div>
                            <div className="flex justify-between">
                              <span>rarity:</span>
                              <span className={getRarityColor(currentOliveBranch.rarity.count)}>{currentOliveBranch.rarity.count.toLowerCase()} ({currentOliveBranch.rarity.countPercentage}%)</span>
                            </div>
                          </div>
                          
                          <div className="space-y-1">
                            <div className="flex justify-between">
                              <span>type:</span>
                              <span>{currentOliveBranch.oliveType?.toLowerCase()}</span>
                            </div>
                            <div className="flex justify-between">
                              <span>rarity:</span>
                              <span className={getRarityColor(currentOliveBranch.rarity.type)}>{currentOliveBranch.rarity.type.toLowerCase()} ({currentOliveBranch.rarity.typePercentage}%)</span>
                            </div>
                          </div>
                          
                          <div className="pt-1 border-t border-neutral-300">
                            <div className="text-neutral-500">id: #{currentOliveBranch.id.toString().slice(-6)}</div>
                          </div>
                        </div>
                      ) : (
                        <div className="space-y-1">
                          <div>demo branch</div>
                          <div>olives: {currentOliveBranch.oliveCount}</div>
                          <div>type: {currentOliveBranch.oliveType?.toLowerCase()}</div>
                          <div className="text-neutral-500 pt-1 border-t border-neutral-300">
                            <div>register to get your own</div>
                          </div>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>

          {/* Username and bio - now with flex-grow to take available space */}
          <div className="w-full flex flex-col items-center flex-grow justify-center">
            <div 
              className={`${usernameMargin} font-mono leading-none lowercase ${getUsernameSize(displayUsername)} ${usernameDropShadowClass[role]}`}
              style={{ color: role === 'guest' ? 'inherit' : currentStyle.color }}
            >
              {displayUsername}
            </div>
            <div className={`${bioMargin} ${bioWidth} ${bioHeight} ${bioRounding} bg-neutral-300/80 text-center ${bioPadding} flex items-center justify-center overflow-hidden`}>
              <p className={`font-mono text-neutral-700 leading-tight ${getBioTextSize(displayBio)} break-words hyphens-auto`}>
                {displayBio}
              </p>
            </div>
          </div>

          {/* Metadata - now at bottom with flex-shrink-0 and consistent styling */}
          <div className={`${metadataWidth} flex-shrink-0 mx-auto`}>
            <div className={`grid grid-cols-2 ${metadataGap} font-mono ${metadataText} text-left`}>
              <div className="text-neutral-900 lowercase text-left">role:</div>
              <div 
                className="text-right lowercase justify-self-end"
                style={{ color: currentStyle.color }}
              >
                {role === 'beta-tester' ? 'beta-tester' : role}
              </div>

              <div className="text-neutral-900 lowercase text-left">onset:</div>
              <div className="text-right lowercase justify-self-end">{displayOnset}</div>

              <div className="text-neutral-900 lowercase text-left">id-no:</div>
              <div className="text-right lowercase justify-self-end">{displayIdNo}</div>
            </div>
          </div>
        </div>
      </div>

      {/* Card shadow - only for large cards */}
      {size === 'large' && (
        <div className="mx-auto mt-4 sm:mt-6 h-4 sm:h-6 w-2/3 rounded-full bg-black/10 blur-xl"></div>
      )}
    </div>
  );
}

// === END components/GalwayIdCard.tsx ===

// === components/PlaceholderLogo.tsx ===
import Image from 'next/image';

interface PlaceholderLogoProps {
  className?: string;
}

export default function PlaceholderLogo({ className = "" }: PlaceholderLogoProps) {
  return (
    <div className={`flex items-center ${className}`}>
      <Image
        src="/logo.png"  // Change this to your actual filename
        alt="Galway Research"
        width={120}      // Adjust width as needed
        height={40}      // Adjust height as needed
        className="h-auto"
        priority
      />
    </div>
  );
}

// === END components/PlaceholderLogo.tsx ===


============================================================
DIRECTORY: components/layout
============================================================

// === components/layout/Footer.tsx ===
export default function Footer() {
  return (
    <footer className="bg-gradient-to-r from-neutral-50 via-neutral-100 to-neutral-50 border-t border-neutral-200 mt-auto relative overflow-hidden">
      <div className="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="flex flex-col items-center space-y-4">
          {/* Main tagline */}
          <div className="text-center">
            <p className="text-sm text-neutral-600 font-mono leading-relaxed">
              ¬© 2025 Galway Research Institute
            </p>
            <div className="flex items-center justify-center space-x-2 mt-2">
              <p className="text-xs text-neutral-500 font-mono">
                Field-tested research. Evidence-based iteration.
              </p>
            </div>
          </div>

          {/* Research ethics statement (Temporarirly Removed)
          <div className="text-center border-t border-neutral-200/50 pt-4 max-w-md">
            <p className="text-xs text-neutral-400 font-mono leading-relaxed">
              All research recorded in line with temporal ethics protocols. 
              
              Data integrity maintained via peer review and operative accountability
            </p>
          </div>*/}

          {/* Status indicators */}
          <div className="flex items-center space-x-4 text-xs text-neutral-400 font-mono">
  <div className="flex items-center space-x-1">
    <div className="w-2 h-2 rounded-full animate-pulse-fast" style={{backgroundColor: '#2cff00'}}></div>
    <span>SYSTEMS OPERATIONAL</span>
  </div>
  <div className="w-px h-4 bg-neutral-300"></div>
  <div className="flex items-center space-x-1">
    <div className="w-2 h-2 rounded-full animate-pulse-fast" style={{backgroundColor: '#2cff00'}}></div>
    <span>DATA SECURE</span>
  </div>
  <div className="w-px h-4 bg-neutral-300"></div>
  <div className="flex items-center space-x-1">
    <div className="w-2 h-2 rounded-full animate-pulse-fast" style={{backgroundColor: '#ff0000'}}></div>
    <span>STARS ALIGNED</span>
  </div>
</div>
        </div>
      </div>
    </footer>
  );
}

// === END components/layout/Footer.tsx ===

// === components/layout/Header.tsx ===
'use client';

import Link from 'next/link';
import { useAuth } from '@/lib/auth';
import { usePathname } from 'next/navigation';
import PlaceholderLogo from '../PlaceholderLogo';
import MobileMenu from './MobileMenu';

export default function Header() {
  const { isLoggedIn, cartItemCount } = useAuth();  // ‚Üê Add cartItemCount
  const pathname = usePathname();

  const navItems = [
    { name: 'CATALOG', href: '/catalog' },
    { name: 'FORUM', href: '/forum' },
    { name: 'INSTITUTE', href: '/institute' },
    { name: 'CORRESPONDENCE', href: '/correspondence' },
    { name: 'DATABASE', href: '/database' },
  ];

  const isActive = (href: string) => pathname === href;

  return (
    <header className="bg-white/95 backdrop-blur-sm border-b border-neutral-200 sticky top-0 z-40 shadow-sm">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          {/* Logo */}
          <Link href="/" className="flex-shrink-0 group">
            <div className="transform group-hover:scale-105 transition-transform duration-200">
              <PlaceholderLogo />
            </div>
          </Link>

          {/* Desktop Navigation */}
          <nav className="hidden lg:flex space-x-1">
            {navItems.map((item) => (
              <Link
                key={item.name}
                href={item.href}
                className={`relative px-4 py-2 text-neutral-700 hover:text-neutral-900 font-mono text-sm transition-all duration-200 rounded-md group ${
                  isActive(item.href) 
                    ? 'text-neutral-900 bg-neutral-100' 
                    : 'hover:bg-neutral-50'
                }`}
              >
                <span className="relative z-10">{item.name}</span>
                {/* Active indicator */}
                {isActive(item.href) && (
                  <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-neutral-900 rounded-full"></div>
                )}
                {/* Hover indicator */}
                <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-neutral-400 group-hover:w-6 transition-all duration-200"></div>
              </Link>
            ))}
          </nav>

          {/* Right side icons */}
          <div className="flex items-center space-x-3">
            {/* Cart icon with subtle badge */}
{/* Cart icon with conditional badge */}
<Link
    href="/cart"
    className="relative p-2 text-neutral-700 hover:text-neutral-900 focus:outline-none focus:ring-2 focus:ring-neutral-500 focus:ring-offset-2 rounded-md transition-all duration-200 hover:bg-neutral-50 group"
    aria-label="Shopping cart"
  >
    <span className="material-symbols-sharp translate-y-1 group-hover:scale-110 transition-transform duration-200" style={{ fontSize: '24px' }}>shopping_cart</span>
    {/* Conditional cart badge */}
    {isLoggedIn && cartItemCount > 0 && (  // ‚Üê Updated condition
      <span className="absolute -top+1 -right-0.5 w-2.5 h-2.5 bg-red-400 rounded-full animate-pulse-fast"></span>
    )}
  </Link>

            {/* Settings icon */}
            <Link
              href="/settings"
              className="p-2 text-neutral-700 hover:text-neutral-900 focus:outline-none focus:ring-2 focus:ring-neutral-500 focus:ring-offset-2 rounded-md transition-all duration-200 hover:bg-neutral-50 group"
              aria-label="Settings"
            >
              <svg className="w-6 h-6 group-hover:rotate-45 group-hover:scale-110 transition-all duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
            </Link>

            {/* Mobile menu */}
            <MobileMenu />
          </div>
        </div>
      </div>
    </header>
  );
}

// === END components/layout/Header.tsx ===

// === components/layout/MobileMenu.tsx ===
'use client';

import { useState } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';

export default function MobileMenu() {
  const [isOpen, setIsOpen] = useState(false);
  const pathname = usePathname();

  const toggleMenu = () => setIsOpen(!isOpen);

  const menuItems = [
    { 
      name: 'CATALOG', 
      href: '/catalog',
      icon: 'attach_money',
      description: 'Browse our research catalog'
    },
    { 
      name: 'FORUM', 
      href: '/forum',
      icon: 'forum',
      description: 'Community discussions'
    },
    { 
      name: 'INSTITUTE', 
      href: '/institute',
      icon: 'info',
      description: 'About our research'
    },
    { 
      name: 'CORRESPONDENCE', 
      href: '/correspondence',
      icon: 'mail',
      description: 'Official communications'
    },
    { 
      name: 'DATABASE', 
      href: '/database',
      icon: 'search',
      description: 'Research database'
    },
  ];

  const isActive = (href: string) => pathname === href;

  return (
    <div className="lg:hidden">
      {/* Menu button */}
      <button
        onClick={toggleMenu}
        className="p-2 text-neutral-700 hover:text-neutral-900 focus:outline-none focus:ring-2 focus:ring-neutral-500 focus:ring-offset-2 rounded-md transition-all duration-200 hover:bg-neutral-50 group"
        aria-label={isOpen ? 'Close menu' : 'Open menu'}
        aria-expanded={isOpen}
      >
        {isOpen ? (
          // Close icon (X) with rotation animation
          <svg className="w-6 h-6 transform rotate-180 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        ) : (
          // Menu icon (hamburger) with hover animation
          <div className="w-6 h-6 flex flex-col justify-center space-y-1">
            <div className="w-6 h-0.5 bg-current transform group-hover:translate-x-1 transition-transform duration-200"></div>
            <div className="w-6 h-0.5 bg-current"></div>
            <div className="w-6 h-0.5 bg-current transform group-hover:-translate-x-1 transition-transform duration-200"></div>
          </div>
        )}
      </button>

      {/* Dropdown menu with enhanced animations */}
      {isOpen && (
        <>
          
          {/* Menu panel */}
          <div className="absolute top-full left-0 right-0 bg-white/95 backdrop-blur-md border-t border-neutral-200 shadow-xl z-50">
            <nav className="px-4 py-3 max-h-[70vh] overflow-y-auto">
              <div className="space-y-1">
                {menuItems.map((item, index) => (
                  <Link
                    key={item.name}
                    href={item.href}
                    className={`group flex items-center justify-between px-4 py-4 text-neutral-700 hover:text-neutral-900 hover:bg-neutral-50/80 rounded-lg transition-all duration-200 font-mono ${
                      isActive(item.href) 
                        ? 'bg-neutral-50 text-neutral-900' 
                        : ''
                    }`}
                    onClick={() => setIsOpen(false)}
                  >
                    <div className="flex items-center space-x-3">
                      <span 
                        className="material-symbols-sharp text-lg group-hover:scale-110 transition-transform duration-200" 
                        style={{ fontSize: '18px' }}
                      >
                        {item.icon}
                      </span>
                      <div className="flex flex-col">
                        <span className="font-medium">{item.name}</span>
                        <span className="text-xs text-neutral-500 group-hover:text-neutral-600 transition-colors duration-200">
                          {item.description}
                        </span>
                      </div>
                    </div>
                    
                    {/* Arrow indicator */}
                    <svg 
                      className="w-4 h-4 text-neutral-400 group-hover:text-neutral-600 group-hover:translate-x-1 transition-all duration-200" 
                      fill="none" 
                      stroke="currentColor" 
                      viewBox="0 0 24 24"
                    >
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                  </Link>
                ))}
              </div>
              
              {/* Menu footer */}
              <div className="mt-4 pt-3 border-t border-neutral-200/50">
                <div className="text-xs text-neutral-400 text-center font-mono">
                  Navigation Menu
                </div>
              </div>
            </nav>
          </div>
        </>
      )}
    </div>
  );
}

// === END components/layout/MobileMenu.tsx ===


============================================================
DIRECTORY: lib
============================================================

// === lib/auth.ts ===
'use client';

import { User, AuthState } from './types';
import { create } from 'zustand';

// Mock user data for demo
const mockUser: User = {
  username: 'test_operative',
  role: 'operative',
  onset: '05/16/2025',
  idNo: '582491',
  bio: 'Researching quantum botany and temporal leaf patterns üå±...'
};

interface AuthStore extends AuthState {
  cartItemCount: number;  // ‚Üê Add this
  toggleAuth: () => void;
  login: (user: User) => void;
  logout: () => void;
  addToCart: () => void;     // ‚Üê Add this
  removeFromCart: () => void; // ‚Üê Add this
  clearCart: () => void;     // ‚Üê Add this
}

export const useAuth = create<AuthStore>((set) => ({
  isLoggedIn: false,
  user: null,
  cartItemCount: 0,  // ‚Üê Add this
  
  toggleAuth: () => set((state) => ({
    isLoggedIn: !state.isLoggedIn,
    user: !state.isLoggedIn ? mockUser : null
  })),
  
  login: (user: User) => set({
    isLoggedIn: true,
    user
  }),
  
  logout: () => set({
    isLoggedIn: false,
    user: null,
    cartItemCount: 0  // Clear cart on logout
  }),

  addToCart: () => set((state) => ({
    cartItemCount: state.cartItemCount + 1
  })),

  removeFromCart: () => set((state) => ({
    cartItemCount: Math.max(0, state.cartItemCount - 1)
  })),

  clearCart: () => set({
    cartItemCount: 0
  }),
}));

// === END lib/auth.ts ===

// === lib/oliveGenerator.ts ===
// Enhanced Olive Branch Generator - Galway Research Institute
// Botanical Signature System with Rarity System

// Olive branch background color constant
export const OLIVE_BRANCH_BG_COLOR = '#fcfcfc';

interface OliveBranchData {
  svg: string;
  colors: {
    olive: string;
    branch: string;
    leaf: string;
  };
  oliveCount: number;
  oliveType: string;
  rarity: {
    count: string;
    type: string;
    countPercentage: number;
    typePercentage: number;
  };
  id: number;
}

const oliveColors = {
  greenOlives: ['#6B8E23', '#808000', '#9ACD32', '#7CFC00', '#ADFF2F'],
  blackOlives: ['#2F2F2F', '#404040', '#1C1C1C', '#36454F', '#28282B'],
  brownOlives: ['#8B4513', '#A0522D', '#CD853F', '#D2691E', '#BC9A6A'],
  purpleOlives: ['#663399', '#4B0082', '#800080', '#9932CC', '#8B008B'],
  ripeMixed: ['#6B8E23', '#2F2F2F', '#663399', '#8B4513']
};

const branchColors = {
  youngBranch: ['#8FBC8F', '#90EE90', '#98FB98', '#7CFC00'],
  matureBranch: ['#556B2F', '#6B8E23', '#808000', '#9ACD32'],
  brownBranch: ['#8B7355', '#A0522D', '#CD853F', '#DEB887'],
  silverBranch: ['#C0C0C0', '#D3D3D3', '#DCDCDC', '#F5F5F5']
};

const leafColors = {
  freshLeaves: ['#228B22', '#32CD32', '#00FF00', '#7CFC00'],
  matureLeaves: ['#006400', '#228B22', '#2E8B57', '#3CB371'],
  silverLeaves: ['#9ACD32', '#C0C0C0', '#D3D3D3', '#E6E6FA'],
  dryLeaves: ['#6B8E23', '#808000', '#BDB76B', '#F0E68C']
};

// Rarity weights for olive count
const oliveCountWeights = {
  1: { weight: 0.33, rarity: 'Common' },
  2: { weight: 0.28, rarity: 'Common' },
  3: { weight: 0.19, rarity: 'Uncommon' },
  4: { weight: 0.12, rarity: 'Rare' },
  5: { weight: 0.08, rarity: 'Very Rare' }
};

// Rarity weights for olive types
const oliveTypeWeights = {
  greenOlives: { weight: 0.30, rarity: 'Common', displayName: 'Green Olives' },
  blackOlives: { weight: 0.25, rarity: 'Common', displayName: 'Black Olives' },
  brownOlives: { weight: 0.20, rarity: 'Uncommon', displayName: 'Brown Olives' },
  purpleOlives: { weight: 0.15, rarity: 'Rare', displayName: 'Purple Olives' },
  ripeMixed: { weight: 0.10, rarity: 'Very Rare', displayName: 'Mixed Ripe Olives' }
};

function getRandomColor(colorArray: string[]): string {
  return colorArray[Math.floor(Math.random() * colorArray.length)];
}

function getRandomBranchColor(): string {
  const palettes = Object.values(branchColors);
  const randomPalette = palettes[Math.floor(Math.random() * palettes.length)];
  return getRandomColor(randomPalette);
}

function getRandomLeafColor(): string {
  const palettes = Object.values(leafColors);
  const randomPalette = palettes[Math.floor(Math.random() * palettes.length)];
  return getRandomColor(randomPalette);
}

function generateWeightedOliveCount(): { count: number; rarity: string; percentage: number } {
  const random = Math.random();
  let cumulative = 0;
  
  for (const [count, data] of Object.entries(oliveCountWeights)) {
    cumulative += data.weight;
    if (random <= cumulative) {
      return {
        count: parseInt(count),
        rarity: data.rarity,
        percentage: Math.round(data.weight * 100)
      };
    }
  }
  return { count: 1, rarity: 'Common', percentage: 33 }; // fallback
}

function generateWeightedOliveType(): { type: string; color: string; rarity: string; displayName: string; percentage: number } {
  const random = Math.random();
  let cumulative = 0;
  
  for (const [type, data] of Object.entries(oliveTypeWeights)) {
    cumulative += data.weight;
    if (random <= cumulative) {
      const palette = oliveColors[type as keyof typeof oliveColors];
      return {
        type,
        color: getRandomColor(palette),
        rarity: data.rarity,
        displayName: data.displayName,
        percentage: Math.round(data.weight * 100)
      };
    }
  }
  // fallback
  return {
    type: 'greenOlives',
    color: getRandomColor(oliveColors.greenOlives),
    rarity: 'Common',
    displayName: 'Green Olives',
    percentage: 30
  };
}

function generateOlivePositions(count: number): Array<{x: number, y: number}> {
  const possiblePositions = [
    { x: 20, y: 32 }, { x: 40, y: 42 }, { x: 26, y: 49 }, 
    { x: 48, y: 35 }, { x: 22, y: 45 }
  ];
  const shuffled = possiblePositions.sort(() => 0.5 - Math.random());
  return shuffled.slice(0, count);
}

export function generateOliveBranch(): OliveBranchData {
  const oliveCountData = generateWeightedOliveCount();
  const oliveTypeData = generateWeightedOliveType();
  const branchColor = getRandomBranchColor();
  const leafColor = getRandomLeafColor();
  
  const olivePositions = generateOlivePositions(oliveCountData.count);

  let oliveElements = '';
  olivePositions.forEach(pos => {
    oliveElements += `<rect x="${pos.x}" y="${pos.y}" width="4" height="4" fill="${oliveTypeData.color}"/>`;
  });

  const svg = `<svg width="100%" height="100%" viewBox="0 0 70 70" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="70" height="70" fill="${OLIVE_BRANCH_BG_COLOR}"/>
<!-- Main Stem -->
<rect x="33" y="20" width="4" height="30" fill="${branchColor}"/>
<!-- Branches -->
<rect x="24" y="27" width="12" height="4" fill="${branchColor}"/>
<rect x="34" y="37" width="12" height="4" fill="${branchColor}"/>
<rect x="24" y="44" width="12" height="4" fill="${branchColor}"/>
<!-- Leaves -->
<rect x="18" y="25" width="8" height="4" fill="${leafColor}"/>
<rect x="20" y="29" width="8" height="4" fill="${leafColor}"/>
<rect x="42" y="35" width="8" height="4" fill="${leafColor}"/>
<rect x="44" y="39" width="8" height="4" fill="${leafColor}"/>
<rect x="18" y="42" width="8" height="4" fill="${leafColor}"/>
<rect x="20" y="46" width="8" height="4" fill="${leafColor}"/>
<!-- Olives -->
${oliveElements}
</svg>`;

  return {
    svg,
    colors: { 
      olive: oliveTypeData.color, 
      branch: branchColor, 
      leaf: leafColor 
    },
    oliveCount: oliveCountData.count,
    oliveType: oliveTypeData.displayName,
    rarity: {
      count: oliveCountData.rarity,
      type: oliveTypeData.rarity,
      countPercentage: oliveCountData.percentage,
      typePercentage: oliveTypeData.percentage
    },
    id: Date.now() + Math.random()
  };
}

// Export rarity data for reference page
export const OLIVE_RARITY_DATA = {
  counts: oliveCountWeights,
  types: oliveTypeWeights,
  colors: oliveColors
};

// === END lib/oliveGenerator.ts ===

// === lib/types.ts ===
export type Role = 'guest' | 'operative' | 'contributor' | 'beta-tester' | 'moderator';

export interface OliveBranchData {
  svg: string;
  colors: {
    olive: string;
    branch: string;
    leaf: string;
  };
  oliveCount: number;
  id: number;
}

export interface User {
  username: string;
  role: Role;
  onset: string; // 'dd/mm/yyyy' format
  idNo: string; // '######' format
  bio?: string;
  oliveBranch?: OliveBranchData;
}

export interface CardProps {
  role: Role;
  username?: string;
  onset?: string;
  idNo?: string;
  bio?: string;
  seed?: string;
  followMouse?: boolean;
  oliveBranch?: OliveBranchData;
  size?: 'small' | 'large'; // Add size prop
}

export interface AuthState {
  isLoggedIn: boolean;
  user: User | null;
}

// === END lib/types.ts ===


============================================================
DIRECTORY: public/msn-emoticons
============================================================

// === public/msn-emoticons/README.md ===
# Original MSN Emoticons

All **76** *(+ 5 unused)* original emoticons from the **Microsoft Live Messenger**.

|                                                                                                                        | Name                    | Shortcut | Filename                  | Animated | Emoji |
|------------------------------------------------------------------------------------------------------------------------|-------------------------|----------|---------------------------|----------|-------|
| ![Smile :)](original/smile.png)                                       | Smile                   | `:)`     | `smile`                   | No       | üôÇ    |
| ![Open-mouthed smile :D](original/open-mouthed-smile.png)             | Open-mouthed smile      | `:D`     | `open-mouthed-smile`      | No       | üòÄ    |
| ![Winking smile ;)](original/winking-smile.png)                       | Winking smile           | `;)`     | `winking-smile`           | Yes      | üòâ    |
| ![Surprised smile :-O](original/surprised-smile.png)                  | Surprised smile         | `:-O`    | `surprised-smile`         | No       | üò≤    |
| ![Smile with tongue out :P](original/smile-with-tongue-out.png)       | Smile with tongue out   | `:P`     | `smile-with-tongue-out`   | No       | üòõ    |
| ![Hot smile (H)](original/hot-smile.png)                              | Hot smile               | `(H)`    | `hot-smile`               | No       | üòé    |
| ![Angry smile :@](original/angry-smile.png)                           | Angry smile             | `:@`     | `angry-smile`             | No       | üò°    |
| ![Embarrassed smile :$](original/embarrassed-smile.png)               | Embarrassed smile       | `:$`     | `embarrassed-smile`       | No       | üò≥    |
| ![Confused smile :S](original/confused-smile.png)                     | Confused smile          | `:S`     | `confused-smile`          | No       | üòï    |
| ![Sad smile :(](original/sad-smile.png)                               | Sad smile               | `:(`     | `sad-smile`               | No       | ‚òπÔ∏è    |
| ![Crying face :'(](original/crying-face.png)                          | Crying face             | `:'(`    | `crying-face`             | Yes      | üò¢    |
| ![Disappointed smile :\|](original/disappointed-smile.png)            | Disappointed smile      | `:\|`    | `disappointed-smile`      | No       | üòê    |
| ![Devil (6)](original/devil.png)                                      | Devil                   | `(6)`    | `devil`                   | No       | üòà    |
| ![Angel (A)](original/angel.png)                                      | Angel                   | `(A)`    | `angel`                   | No       | üòá    |
| ![Red heart (L)](original/red-heart.png)                              | Red heart               | `(L)`    | `red-heart`               | No       | ‚ù§Ô∏è    |
| ![Broken heart (U)](original/broken-heart.png)                        | Broken heart            | `(U)`    | `broken-heart`            | No       | üíî    |
| ![Messenger (M)](original/messenger.png)                              | Messenger               | `(M)`    | `messenger`               | No       | üë•    |
| ![Cat face (@)](original/cat-face.png)                                | Cat face                | `(@)`    | `cat-face`                | No       | üò∫    |
| ![Dog face (&)](original/dog-face.png)                                | Dog face                | `(&)`    | `dog-face`                | No       | üê∂    |
| ![Sleeping half-moon (S)](original/sleeping-half-moon.png)            | Sleeping half-moon      | `(S)`    | `sleeping-half-moon`      | No       | üåú    |
| ![Star (*)](original/star.png)                                        | Star                    | `(*)`    | `star`                    | No       | ‚≠ê    |
| ![Filmstrip (~)](original/filmstrip.png)                              | Filmstrip               | `(~)`    | `filmstrip`               | No       | üéûÔ∏è    |
| ![Note (8)](original/note.png)                                        | Note                    | `(8)`    | `note`                    | No       | üéµ    |
| ![E-mail (E)](original/e-mail.png)                                    | E-mail                  | `(E)`    | `e-mail`                  | No       | ‚úâÔ∏è    |
| ![Red rose (F)](original/red-rose.png)                                | Red rose                | `(F)`    | `red-rose`                | No       | üåπ    |
| ![Wilted rose (W)](original/wilted-rose.png)                          | Wilted rose             | `(W)`    | `wilted-rose`             | No       | ü•Ä    |
| ![Clock (O)](original/clock.png)                                      | Clock                   | `(O)`    | `clock`                   | No       | üïë    |
| ![Red lips (K)](original/red-lips.png)                                | Red lips                | `(K)`    | `red-lips`                | No       | üëÑ    |
| ![Gift with a bow (G)](original/gift-with-a-bow.png)                  | Gift with a bow         | `(G)`    | `gift-with-a-bow`         | No       | üéÅ    |
| ![Birthday cake (^)](original/birthday-cake.png)                      | Birthday cake           | `(^)`    | `birthday-cake`           | Yes      | üéÇ    |
| ![Camera (P)](original/camera.png)                                    | Camera                  | `(P)`    | `camera`                  | No       | üì∑    |
| ![Light bulb (I)](original/light-bulb.png)                            | Light bulb              | `(I)`    | `light-bulb`              | No       | üí°    |
| ![Coffee cup (C)](original/coffee-cup.png)                            | Coffee cup              | `(C)`    | `coffee-cup`              | No       | ‚òï    |
| ![Telephone receiver (T)](original/telephone-receiver.png)            | Telephone receiver      | `(T)`    | `telephone-receiver`      | No       | üìû    |
| ![Left hug ({)](original/left-hug.png)                                | Left hug                | `({)`    | `left-hug`                | No       | ü´Ç    |
| ![Right hug (})](original/right-hug.png)                              | Right hug               | `(})`    | `right-hug`               | No       | ü´Ç    |
| ![Beer mug (B)](original/beer-mug.png)                                | Beer mug                | `(B)`    | `beer-mug`                | No       | üç∫    |
| ![Martini glass (D)](original/martini-glass.png)                      | Martini glass           | `(D)`    | `martini-glass`           | No       | üç∏    |
| ![Boy (Z)](original/boy.png)                                          | Boy                     | `(Z)`    | `boy`                     | No       | üë¶    |
| ![Girl (X)](original/girl.png)                                        | Girl                    | `(X)`    | `girl`                    | No       | üëß    |
| ![Thumbs up (Y)](original/thumbs-up.png)                              | Thumbs up               | `(Y)`    | `thumbs-up`               | No       | üëç    |
| ![Thumbs down (N)](original/thumbs-down.png)                          | Thumbs down             | `(N)`    | `thumbs-down`             | No       | üëé    |
| ![Vampire bat :\[](original/vampire-bat.png)                          | Vampire bat             | `:[`     | `vampire-bat`             | Yes      | ü¶á    |
| ![Goat (nnh)](original/goat.png)                                      | Goat                    | `(nnh)`  | `goat`                    | No       | üêê    |
| ![Sun (#)](original/sun.png)                                          | Sun                     | `(#)`    | `sun`                     | No       | ‚òÄÔ∏è    |
| ![Rainbow (R)](original/rainbow.png)                                  | Rainbow                 | `(R)`    | `rainbow`                 | No       | üåà    |
| ![Don't tell anyone smile :-#](original/dont-tell-anyone-smile.png)   | Don't tell anyone smile | `:-#`    | `dont-tell-anyone-smile`  | No       | ü§ê    |
| ![Baring teeth smile 8o\|](original/baring-teeth-smile.png)           | Baring teeth smile      | `8o\|`   | `baring-teeth-smile`      | No       | üò¨    |
| ![Nerd smile 8-\|](original/nerd-smile.png)                           | Nerd smile              | `8-\|`   | `nerd-smile`              | No       | ü§ì    |
| ![Sarcastic smile ^o)](original/sarcastic-smile.png)                  | Sarcastic smile         | `^o)`    | `sarcastic-smile`         | No       | ü§®    |
| ![Secret telling smile :-*](original/secret-telling-smile.png)        | Secret telling smile    | `:-*`    | `secret-telling-smile`    | No       | N/A   |
| ![Sick smile +o(](original/sick-smile.png)                            | Sick smile              | `+o(`    | `sick-smile`              | No       | ü§¢    |
| ![Snail (sn)](original/snail.png)                                     | Snail                   | `(sn)`   | `snail`                   | No       | üêå    |
| ![Turtle (tu)](original/turtle.png)                                   | Turtle                  | `(tu)`   | `turtle`                  | No       | üê¢    |
| ![Plate (pl)](original/plate.png)                                     | Plate                   | `(pl)`   | `plate`                   | No       | üçΩÔ∏è    |
| ![Bowl (\|\|)](original/bowl.png)                                     | Bowl                    | `(\|\|)` | `bowl`                    | No       | ü•£    |
| ![Pizza (pi)](original/pizza.png)                                     | Pizza                   | `(pi)`   | `pizza`                   | No       | üçï    |
| ![Soccer ball (so)](original/soccer-ball.png)                         | Soccer ball             | `(so)`   | `soccer-ball`             | No       | ‚öΩ    |
| ![Auto (au)](original/auto.png)                                       | Auto                    | `(au)`   | `auto`                    | No       | üöó    |
| ![Airplane (ap)](original/airplane.png)                               | Airplane                | `(ap)`   | `airplane`                | No       | ‚úàÔ∏è    |
| ![Umbrella (um)](original/umbrella.png)                               | Umbrella                | `(um)`   | `umbrella`                | No       | ‚òÇÔ∏è    |
| ![Island with a palm tree (ip)](original/island-with-a-palm-tree.png) | Island with a palm tree | `(ip)`   | `island-with-a-palm-tree` | No       | üèùÔ∏è    |
| ![Computer (co)](original/computer.png)                               | Computer                | `(co)`   | `computer`                | No       | üñ•Ô∏è    |
| ![Mobile phone (mp)](original/mobile-phone.png)                       | Mobile phone            | `(mp)`   | `mobile-phone`            | No       | üì±    |
| ![Be right back (brb)](original/be-right-back.png)                    | Be right back           | `(brb)`  | `be-right-back`           | No       | N/A   |
| ![Storm cloud (st)](original/storm-cloud.png)                         | Storm cloud             | `(st)`   | `storm-cloud`             | No       | üåßÔ∏è    |
| ![High five! (h5)](original/high-five.png)                            | High five!              | `(h5)`   | `high-five`               | No       | üôè    |
| ![Money (mo)](original/money.png)                                     | Money                   | `(mo)`   | `money`                   | No       | ü™ô    |
| ![Black sheep (bah)](original/black-sheep.png)                        | Black sheep             | `(bah)`  | `black-sheep`             | No       | üêë    |
| ![I don't know smile :^)](original/i-dont-know-smile.png)             | I don't know smile      | `:^)`    | `i-dont-know-smile`       | Yes      | üòï    |
| ![Thinking smile *-)](original/thinking-smile.png)                    | Thinking smile          | `*-)`    | `thinking-smile`          | Yes      | ü§î    |
| ![Lightning (li)](original/lightning.png)                             | Lightning               | `(li)`   | `lightning`               | Yes      | üå©Ô∏è    |
| ![Party smile <:o)](original/party-smile.png)                         | Party smile             | `<:o)`   | `party-smile`             | Yes      | ü•≥    |
| ![Eye-rolling smile 8-)](original/eye-rolling-smile.png)              | Eye-rolling smile       | `8-)`    | `eye-rolling-smile`       | Yes      | üôÑ    |
| ![Sleepy smile \|-)](original/sleepy-smile.png)                       | Sleepy smile            | `\|-)`   | `sleepy-smile`            | Yes      | ü•±    |
| ![Bunny ('.')](original/bunny.png)                                    | Bunny                   | `('.')`  | `bunny`                   | No       | üê∞    |

**Unused emoticons**

|                                                         | Name            | Filename                 | Animated | Emoji |
|---------------------------------------------------------|-----------------|--------------------------|----------|-------|
| ![Headphones](original/unused-headphones.png)           | Headphones      | `unused-headphones`      | No       | üéß    |
| ![Fingers crossed](original/unused-fingers-crossed.png) | Fingers crossed | `unused-fingers-crossed` | No       | ü§û    |
| ![Cigarette](original/unused-cigarette.png)             | Cigarette       | `unused-cigarette`       | Yes      | üö¨    |
| ![Xbox](original/unused-xbox.png)                       | Xbox            | `unused-xbox`            | No       | üéÆ    |
| ![Handcuffs](retro/unused-handcuffs.png)                | Handcuffs[^1]   | `unused-handcuffs`       | No       | N/A   |

[^1]: Only available in the `retro` directory.

*All emoticons were extracted from [Escargot](https://escargot.chat/) using [Resource Hacker](https://www.angusj.com/resourcehacker/).*

## Animated emoticons

Emoticons marked as **"Animated"** include four versions of themselves:
- `[filename].png` - APNG animated version
- `[filename].gif` - GIF animated version
- `[filename]-static.png` - Static version
- `[filename]-frames.png` - Animation sprite sheet

> [!NOTE]
> 
> It's recommended to use `.png` over `.gif` due to semi-transparent pixels featured in most animated emoticons.
>
> | `.png` | `.gif` |
> |--------|--------|
> | <img alt="birthday-cake.png" src="original/birthday-cake.png" height="100"> | <img alt="birthday-cake.gif" src="original/birthday-cake.gif" height="100"> |

## Directories

This repository is divided in the following directories:

- `original` - Every emoticon in it's original resolution. *(19x)*
- `retro` - 8-bit color versions. *(No animated versions.)*
- `source` - Original files with no modifications.

// === END public/msn-emoticons/README.md ===

